{-# OPTIONS --cubical #-}

module Type.Cubical.Path.Proofs where

import      Lvl
open import Type
open import Type.Cubical
open import Type.Cubical.Path

private variable ‚Ñì ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Lvl.Level

module _ where
  private variable A B : Type{‚Ñì}
  private variable P : Interval ‚Üí Type{‚Ñì}
  private variable x y z w : A

  -- The full path from the starting point to the end.
  path : (point : Interval ‚Üí A) ‚Üí Path(point(Interval.ùüé)) (point(Interval.ùüè))
  path point i = point i

  -- The point on the path, given a point of the interval indexing the path.
  pointOn : ‚àÄ{x y : A} ‚Üí Path x y ‚Üí (Interval ‚Üí A)
  pointOn p i = p i

  -- The path from a point to itself.
  -- This path only consists of the point itself.
  point : Path x x
  point{x = x} _ = x

  -- The reverse path of a path.
  -- Reverses the direction of a path by flipping all points around the point of symmetry.
  reverseP : PathP(P) x y ‚Üí PathP(\i ‚Üí P(Interval.flip i)) y x
  reverseP p(i) = p(Interval.flip i)

  reverse : Path x y ‚Üí Path y x
  reverse = reverseP

  -- A function mapping points between two spaces, given a path between the spaces.
  spaceMap : Path A B ‚Üí (A ‚Üí B)
  spaceMap p = Interval.transp (pointOn p) Interval.ùüé

  -- TODO: Move
  module _ {A : Type{‚Ñì}} where
    private variable a‚ÇÄ a‚ÇÅ a‚ÇÇ a‚ÇÉ : A
    private variable a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ : A
    private variable a‚ÇÄ‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÄ‚ÇÅ a‚ÇÄ‚ÇÅ‚ÇÄ a‚ÇÄ‚ÇÅ‚ÇÅ a‚ÇÅ‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ‚ÇÅ : A
    private variable p‚ÇÄ‚ÇÄ‚Çã p‚ÇÄ‚ÇÅ‚Çã p‚ÇÄ‚Çã‚ÇÄ p‚ÇÄ‚Çã‚ÇÅ p‚ÇÅ‚ÇÄ‚Çã p‚ÇÅ‚ÇÅ‚Çã p‚ÇÅ‚Çã‚ÇÄ p‚ÇÅ‚Çã‚ÇÅ p‚Çã‚ÇÄ‚ÇÄ p‚Çã‚ÇÄ‚ÇÅ p‚Çã‚ÇÅ‚ÇÄ p‚Çã‚ÇÅ‚ÇÅ : Path a‚ÇÄ a‚ÇÅ

    Path-missingSide : A ‚Üí A
    Path-missingSide a = Interval.hComp diag a where
      diag : Interval ‚Üí Interval.Partial Interval.ùüé A
      diag i ()

    module _
      (p‚ÇÄ‚Çã : Path a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ)
      (p‚ÇÅ‚Çã : Path a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ)
      (p‚Çã‚ÇÄ : Path a‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÄ)
      (p‚Çã‚ÇÅ : Path a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÅ)
      where
      -- a‚ÇÄ‚ÇÅ ‚Üí p‚Çã‚ÇÅ ‚Üí a‚ÇÅ‚ÇÅ
      --  ‚Üë           ‚Üë
      -- p‚ÇÄ‚Çã         p‚ÇÅ‚Çã
      --  ‚Üë           ‚Üë
      -- a‚ÇÄ‚ÇÄ ‚Üí p‚Çã‚ÇÄ ‚Üí a‚ÇÅ‚ÇÄ
      Square : Type
      Square = PathP (\i ‚Üí Path (p‚Çã‚ÇÄ i) (p‚Çã‚ÇÅ i)) p‚ÇÄ‚Çã p‚ÇÅ‚Çã
    module Square where
      missingSide : Path a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ ‚Üí Path a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ ‚Üí Path a‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÄ ‚Üí Path a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÅ
      missingSide p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÄ ix = Interval.hComp diagram (p‚Çã‚ÇÄ ix) where
        diagram : Interval ‚Üí Interval.Partial(Interval.max ix (Interval.flip ix)) A
        diagram iy (ix = Interval.ùüé) = p‚ÇÄ‚Çã iy
        diagram iy (ix = Interval.ùüè) = p‚ÇÅ‚Çã iy

      module _
        {p‚ÇÄ‚Çã : Path a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ}
        {p‚ÇÅ‚Çã : Path a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ}
        {p‚Çã‚ÇÄ : Path a‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÄ}
        {p‚Çã‚ÇÅ : Path a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÅ}
        (s : Square p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÄ p‚Çã‚ÇÅ)
        where

        diagonal : Path a‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÅ
        diagonal i = s i i

        rotate‚Çä : Square p‚Çã‚ÇÅ p‚Çã‚ÇÄ (reverse p‚ÇÄ‚Çã) (reverse p‚ÇÅ‚Çã)
        rotate‚Çä iy ix = s ix (Interval.flip iy)

        rotate‚Çã : Square (reverse p‚Çã‚ÇÄ) (reverse p‚Çã‚ÇÅ) p‚ÇÅ‚Çã p‚ÇÄ‚Çã
        rotate‚Çã iy ix = s (Interval.flip ix) iy

        flipX : Square p‚ÇÅ‚Çã p‚ÇÄ‚Çã (reverse p‚Çã‚ÇÄ) (reverse p‚Çã‚ÇÅ)
        flipX iy ix = s (Interval.flip iy) ix

        flipY : Square (reverse p‚ÇÄ‚Çã) (reverse p‚ÇÅ‚Çã) p‚Çã‚ÇÅ p‚Çã‚ÇÄ
        flipY iy ix = s iy (Interval.flip ix)

      module _
        {a‚ÇÄ a‚ÇÅ : A}
        (p : Path a‚ÇÄ a‚ÇÅ)
        where

        lineX : Square point point p p
        lineX ix iy = p ix

        lineY : Square p p point point
        lineY ix iy = p iy

        min : Square point p point p
        min ix iy = p(Interval.min ix iy)

        max : Square p point p point
        max ix iy = p(Interval.max ix iy)

    module _
      (p‚ÇÄ‚Çã‚Çã : Square p‚ÇÄ‚ÇÄ‚Çã p‚ÇÄ‚ÇÅ‚Çã p‚ÇÄ‚Çã‚ÇÄ p‚ÇÄ‚Çã‚ÇÅ)
      (p‚ÇÅ‚Çã‚Çã : Square p‚ÇÅ‚ÇÄ‚Çã p‚ÇÅ‚ÇÅ‚Çã p‚ÇÅ‚Çã‚ÇÄ p‚ÇÅ‚Çã‚ÇÅ)
      (p‚Çã‚ÇÄ‚Çã : Square p‚ÇÄ‚ÇÄ‚Çã p‚ÇÅ‚ÇÄ‚Çã p‚Çã‚ÇÄ‚ÇÄ p‚Çã‚ÇÄ‚ÇÅ)
      (p‚Çã‚ÇÅ‚Çã : Square p‚ÇÄ‚ÇÅ‚Çã p‚ÇÅ‚ÇÅ‚Çã p‚Çã‚ÇÅ‚ÇÄ p‚Çã‚ÇÅ‚ÇÅ)
      (p‚Çã‚Çã‚ÇÄ : Square p‚ÇÄ‚Çã‚ÇÄ p‚ÇÅ‚Çã‚ÇÄ p‚Çã‚ÇÄ‚ÇÄ p‚Çã‚ÇÅ‚ÇÄ)
      (p‚Çã‚Çã‚ÇÅ : Square p‚ÇÄ‚Çã‚ÇÅ p‚ÇÅ‚Çã‚ÇÅ p‚Çã‚ÇÄ‚ÇÅ p‚Çã‚ÇÅ‚ÇÅ)
      where

      Cube : Type
      Cube = PathP (\i ‚Üí Square (p‚Çã‚ÇÄ‚Çã i) (p‚Çã‚ÇÅ‚Çã i) (p‚Çã‚Çã‚ÇÄ i) (p‚Çã‚Çã‚ÇÅ i)) p‚ÇÄ‚Çã‚Çã p‚ÇÅ‚Çã‚Çã
    {-
    module Cube where
      module _
        (p‚ÇÄ‚Çã‚Çã : Square p‚ÇÄ‚ÇÄ‚Çã p‚ÇÄ‚ÇÅ‚Çã p‚ÇÄ‚Çã‚ÇÄ p‚ÇÄ‚Çã‚ÇÅ)
        (p‚ÇÅ‚Çã‚Çã : Square p‚ÇÅ‚ÇÄ‚Çã p‚ÇÅ‚ÇÅ‚Çã p‚ÇÅ‚Çã‚ÇÄ p‚ÇÅ‚Çã‚ÇÅ)
        (p‚Çã‚ÇÄ‚Çã : Square p‚ÇÄ‚ÇÄ‚Çã p‚ÇÅ‚ÇÄ‚Çã p‚Çã‚ÇÄ‚ÇÄ p‚Çã‚ÇÄ‚ÇÅ)
        (p‚Çã‚ÇÅ‚Çã : Square p‚ÇÄ‚ÇÅ‚Çã p‚ÇÅ‚ÇÅ‚Çã p‚Çã‚ÇÅ‚ÇÄ p‚Çã‚ÇÅ‚ÇÅ)
        (p‚Çã‚Çã‚ÇÄ : Square p‚ÇÄ‚Çã‚ÇÄ p‚ÇÅ‚Çã‚ÇÄ p‚Çã‚ÇÄ‚ÇÄ p‚Çã‚ÇÅ‚ÇÄ)
        where
        missingSide : Square p‚ÇÄ‚Çã‚ÇÅ p‚ÇÅ‚Çã‚ÇÅ p‚Çã‚ÇÄ‚ÇÅ p‚Çã‚ÇÅ‚ÇÅ
        missingSide ix iy = Interval.hComp diagram (p‚Çã‚Çã‚ÇÄ ix iy) where -- (Square.max {!!} ix iy)
          diagram : Interval ‚Üí Interval.Partial {!!} A
          {-diagram : (i : Interval) ‚Üí Interval.Partial (Interval.max (Interval.max ix (Interval.flip ix)) (Interval.max iy (Interval.flip iy))) _
          diagram iz (ix = Interval.ùüé) = Square.max p‚ÇÄ‚Çã‚ÇÅ ix iy
          diagram iz (ix = Interval.ùüè) = Square.min p‚ÇÅ‚Çã‚ÇÅ ix iy
          diagram iz (iy = Interval.ùüé) = Square.max p‚Çã‚ÇÄ‚ÇÅ ix iy
          diagram iz (iy = Interval.ùüè) = Square.min p‚Çã‚ÇÅ‚ÇÅ ix iy-}
    -}

  -- Concatenates (joins the ends of) two paths.
  concat : Path x y ‚Üí Path y z ‚Üí Path x z
  concat xy yz = Square.missingSide point yz xy

module _ where
  private variable X : Type{‚Ñì}
  private variable Y : X ‚Üí Type{‚Ñì}

  -- Maps a path into another space.
  mapP : (f : (x : X) ‚Üí Y(x)) ‚Üí ‚àÄ{x y} ‚Üí (path : Path x y) ‚Üí PathP(\i ‚Üí Y(path(i))) (f(x)) (f(y))
  mapP(f) p(i) = f(p(i))

  -- When there is a path between two space mappings.
  mapping : ‚àÄ{f g : (x : X) ‚Üí Y(x)} ‚Üí (‚àÄ{x} ‚Üí Path(f(x)) (g(x))) ‚Üí Path f g
  mapping ppt i x = ppt{x} i

  mappingPoint : ‚àÄ{f g : (x : X) ‚Üí Y(x)} ‚Üí Path f g ‚Üí (‚àÄ{x} ‚Üí Path(f(x)) (g(x)))
  mappingPoint pfg {x} i = pfg i x

{-
module _ where
  private variable X : Type{‚Ñì}
  private variable Y : X ‚Üí Type{‚Ñì}
  private variable Z : (x : X) ‚Üí Y(x) ‚Üí Type{‚Ñì}

  mapP‚ÇÇ : (f : (x : X) ‚Üí (y : Y(x)) ‚Üí Z(x)(y)) ‚Üí ‚àÄ{x‚ÇÅ x‚ÇÇ} ‚Üí (path : Path x‚ÇÅ x‚ÇÇ) ‚Üí PathP(\i ‚Üí Y(path(i))) (f(x)) (f(y))
  mapP‚ÇÇ(f) = ?
-}

module _ where
  private variable X X‚ÇÅ X‚ÇÇ Y Y‚ÇÅ Y‚ÇÇ : Type{‚Ñì}

  map : (f : X ‚Üí Y) ‚Üí ‚àÄ{a b} ‚Üí Path a b ‚Üí Path (f(a)) (f(b))
  map = mapP

  map‚ÇÇ : (f : X‚ÇÅ ‚Üí X‚ÇÇ ‚Üí Y) ‚Üí ‚àÄ{a‚ÇÅ b‚ÇÅ} ‚Üí Path a‚ÇÅ b‚ÇÅ ‚Üí ‚àÄ{a‚ÇÇ b‚ÇÇ} ‚Üí Path a‚ÇÇ b‚ÇÇ ‚Üí Path (f a‚ÇÅ a‚ÇÇ) (f b‚ÇÅ b‚ÇÇ)
  map‚ÇÇ f ab1 ab2 i = map (map f ab1 i) ab2 i

  liftedSpaceMap : (S : X ‚Üí Type{‚Ñì}) ‚Üí ‚àÄ{a b} ‚Üí Path a b ‚Üí S(a) ‚Üí S(b)
  liftedSpaceMap S p = spaceMap(map S p)

  liftedSpaceMap‚ÇÇ : (S : X ‚Üí Y ‚Üí Type{‚Ñì}) ‚Üí ‚àÄ{a‚ÇÅ b‚ÇÅ}{a‚ÇÇ b‚ÇÇ} ‚Üí Path a‚ÇÅ b‚ÇÅ ‚Üí Path a‚ÇÇ b‚ÇÇ ‚Üí S a‚ÇÅ a‚ÇÇ ‚Üí S b‚ÇÅ b‚ÇÇ
  liftedSpaceMap‚ÇÇ S p q = spaceMap(map‚ÇÇ S p q)

-- TODO: Move
data Loop{‚Ñì} : Type{‚Ñì} where
  base : Loop
  loop : Path base base
