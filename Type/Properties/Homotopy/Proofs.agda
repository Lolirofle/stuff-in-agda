module Type.Properties.Homotopy.Proofs where

import      Data.Tuple as Tuple
open import Logic
open import Logic.Classical
open import Logic.Predicate
open import Logic.Propositional
import      Lvl
open import Type
open import Type.Properties.Homotopy
open import Type.Properties.MereProposition
open import Type.Properties.Singleton
open import Structure.Function.Domain
open import Structure.Relator.Equivalence
open import Structure.Relator.Properties
open import Structure.Setoid.WithLvl
open import Structure.Type.Identity
open import Syntax.Function
open import Syntax.Transitivity

private variable ‚Ñì ‚Ñì‚Çë ‚Ñì‚Çë‚Çë ‚Ñì‚Çö : Lvl.Level
private variable T : Type{‚Ñì}

module _ ‚¶É equiv : ‚àÄ{‚Ñì}{T : Type{‚Ñì}} ‚Üí Equiv{‚Ñì}(T) ‚¶Ñ where
  private open module EquivEquiv{‚Ñì}{T} = Equiv(equiv{‚Ñì}{T}) using () renaming (_‚â°_ to _‚â°‚Çë_)

  module _ ‚¶É identElim : ‚àÄ{‚Ñì}{T : Type{‚Ñì}} ‚Üí IdentityEliminator(_‚â°‚Çë_ {T = T}) ‚¶Ñ where
    constant-endofunction-existence-on-equivalence-is-hset : ‚àÄ{x y : T} ‚Üí ‚àÉ{Obj = (x ‚â° y) ‚Üí (x ‚â° y)}(Constant) ‚Üí HomotopyLevel(2)(T)
    constant-endofunction-existence-on-equivalence-is-hset ([‚àÉ]-intro const) {x = x} {y} {xy‚ÇÅ} {xy‚ÇÇ} = {!!} where
      equivalence-endofunction-invertible‚Çó : ‚àÄ{f : ‚àÄ{x y : T} ‚Üí (x ‚â° y) ‚Üí (x ‚â° y)} ‚Üí (‚àÄ{x y : T} ‚Üí Invertible‚Çó(f{x}{y}))
      ‚àÉ.witness (equivalence-endofunction-invertible‚Çó {T = T}{f = f} {x}{y}) xy =
        xy üùñ symmetry(_‚â°‚Çë_) (f(reflexivity _))
      Tuple.left (‚àÉ.proof equivalence-endofunction-invertible‚Çó) = {!!}
      Inverse‚Çó.proof (Tuple.right (‚àÉ.proof (equivalence-endofunction-invertible‚Çó {T = T}{f = f} {x}{y}))) {xy} = idElim(_‚â°‚Çë_) ‚¶É inst = identElim{T = T} ‚¶Ñ (xy ‚Ü¶ (f(xy) üùñ symmetry(_‚â°‚Çë_) (f(reflexivity(_‚â°‚Çë_))) ‚â°‚Çë xy)) {!!} xy

{-
module _ ‚¶É equiv : Equiv{‚Ñì‚Çë}(T) ‚¶Ñ ‚¶É equiv-equiv : Equiv{‚Ñì‚Çë}(Equiv._‚â°_ equiv) ‚¶Ñ where
    -- TODO: ComputablyDecidable ‚Üí UIP (https://homotopytypetheory.org/2012/03/30/a-direct-proof-of-hedbergs-theorem/)
    -- TODO: http://www.cse.chalmers.se/~nad/listings/equality/Equality.Decidable-UIP.html
  classical-to-uip : (‚àÄ{x y : T} ‚Üí ((x ‚â° y) ‚à® (x ‚â¢ y))) ‚Üí UniqueIdentityProofs(T)
  MereProposition.uniqueness (classical-to-uip {T = T} dec {x} {y}) {xy‚ÇÅ} {xy‚ÇÇ} = {!p xy‚ÇÅ!} where
    {-
    p : ‚àÄ{x y : T} ‚Üí (x ‚â° y) ‚Üí Stmt
    p {x}{y} eq with dec{x}{x} | dec{x}{y}
    ... | [‚à®]-intro‚Çó xx  | [‚à®]-intro‚Çó xy  = eq ‚â° transitivity(_‚â°_) xx xy
    ... | [‚à®]-intro‚Çó xx  | [‚à®]-intro·µ£ nxy with () ‚Üê nxy eq
    ... | [‚à®]-intro·µ£ nxx | [‚à®]-intro‚Çó _   with () ‚Üê nxx [‚â°]-intro
    -}

    dec-eq : ‚àÄ{x y} ‚Üí (x ‚â° y) ‚Üí (x ‚â° y)
    dec-eq {x}{y} eq with dec{x}{y}
    ... | [‚à®]-intro‚Çó xy  = xy
    ... | [‚à®]-intro·µ£ nxy with () ‚Üê nxy eq

    dec-eq-unique : ‚àÄ{x y}{xy‚ÇÅ xy‚ÇÇ : x ‚â° y} ‚Üí (dec-eq xy‚ÇÅ ‚â° dec-eq xy‚ÇÇ)
    dec-eq-unique {x}{y} {xy‚ÇÅ} with dec{x}{y}
    ... | [‚à®]-intro‚Çó _   = ?
    ... | [‚à®]-intro·µ£ nxy with () ‚Üê nxy xy‚ÇÅ

    dec-eq-unit : ‚àÄ{x y}{eq : x ‚â° y} ‚Üí (eq ‚â° dec-eq eq)
    dec-eq-unit  {x}{y}{eq} with dec{y}{y} | dec{x}{y}
    ... | [‚à®]-intro‚Çó yy | [‚à®]-intro‚Çó xy = {!!}
    ... | [‚à®]-intro‚Çó yy | [‚à®]-intro·µ£ x‚ÇÇ = {!!}
    ... | [‚à®]-intro·µ£ x‚ÇÅ | [‚à®]-intro‚Çó x‚ÇÇ = {!!}
    ... | [‚à®]-intro·µ£ x‚ÇÅ | [‚à®]-intro·µ£ x‚ÇÇ = {!!}

{-    p : ‚àÄ{x y : T} ‚Üí (xy : x ‚â° y) ‚Üí (xy ‚â° dec-eq(xy))
    p {x}{y} [‚â°]-intro with dec{x}{x} | dec{x}{y}
    ... | [‚à®]-intro‚Çó a | [‚à®]-intro‚Çó x‚ÇÅ = {![‚â°]-intro!}
    ... | [‚à®]-intro‚Çó a | [‚à®]-intro·µ£ x‚ÇÅ = {!!}
    ... | [‚à®]-intro·µ£ a | [‚à®]-intro‚Çó x‚ÇÅ = {!!}
    ... | [‚à®]-intro·µ£ a | [‚à®]-intro·µ£ x‚ÇÅ = {!!}
-}
-}
