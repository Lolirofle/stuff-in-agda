module Sets.Setoid where

import Lvl
open import Functional
open import Lang.Instance
open import Logic.Propositional
open import Structure.Relator.Equivalence
open import Structure.Relator.Properties using (Reflexivity ; Symmetry ; Transitivity)

module _ {โโ} where
  -- An instance of `Equiv(T)` is that the type `T` has an equivalence relation which may be treated as a default one.
  -- Helps finding an instance of an equivalence relation for a type.
  record Equiv (T : Set(โโ)) : Set(Lvl.๐(โโ)) where
    constructor intro

    infixl 15 _โก_ _โข_
    field
      _โก_ : T โ T โ Set(โโ)

    field
      instance โฆ [โก]-equivalence โฆ : Equivalence(_โก_)

    _โข_ : T โ T โ Set(โโ)
    a โข b = ยฌ(a โก b)

    -- open Equivalence([โก]-equivalence) using () renaming (transitivity to [โก]-transitivity ; symmetry to [โก]-symmetry ; reflexivity to [โก]-reflexivity) public

  open Equiv โฆ ... โฆ public
  {-# STATIC _โก_ #-} -- TODO: Not sure if these are doing anything, but it would be nice if (_โก_) would be replaced by the corresponding equivalence relation before everything (specifically before projection elimination so that when the relation is a record so that the following would work: record _โซ_ A B where field a : _ ; b : _ ; [โซ]-reflexivity : Names.reflexivity(_โซ_) ; a([โซ]-reflexivity) = _ ; b([โซ]-reflexivity) = _)
  {-# INLINE _โก_ #-}
  {-# DISPLAY Equiv._โก_ a b = a โก b #-}

  -- A set and an equivalence relation on it
  record Setoid : Set(Lvl.๐(โโ)) where
    constructor intro
    field
      Type : Set(โโ)
      instance โฆ Eq โฆ : Equiv(Type)

-- TODO: Maybe these should be moved and renamed to function like all other properties in Structure.Operator and Structure.Function

-- The function `f` "(behaves like)/is a function" in the context of `_โก_` from the Equiv instance.
module _ {โโโ}{โโโ} {Tโ : Set(โโโ)} โฆ _ : Equiv(Tโ) โฆ {Tโ : Set(โโโ)} โฆ _ : Equiv(Tโ) โฆ where
  record Function (f : Tโ โ Tโ) : Set(โโโ Lvl.โ โโโ) where
    constructor intro

    field
      congruence : โ{x y : Tโ} โ (x โก y) โ (f(x) โก f(y))

  [โก]-with : (f : Tโ โ Tโ) โ โฆ _ : Function(f) โฆ โ โ{x y} โ (x โก y) โ (f(x) โก f(y))
  [โก]-with f โฆ inst โฆ = Function.congruence{f} (inst)

module _ {โโโ}{โโโ}{โโโ} where
  open Structure.Relator.Properties

  -- The operator `_โซ_` "(behaves like)/is a function" in the context of `_โก_` from the Equiv instance.
  record BinaryOperator {Tโ : Set(โโโ)} โฆ _ : Equiv(Tโ) โฆ {Tโ : Set(โโโ)} โฆ _ : Equiv(Tโ) โฆ {Tโ : Set(โโโ)} โฆ _ : Equiv(Tโ) โฆ (_โซ_ : Tโ โ Tโ โ Tโ) : Set(โโโ Lvl.โ โโโ Lvl.โ โโโ) where
    constructor intro

    field
      congruence : โ{xโ yโ : Tโ} โ (xโ โก yโ) โ โ{xโ yโ : Tโ} โ (xโ โก yโ) โ (xโ โซ xโ โก yโ โซ yโ)

    instance
      left : โ{x} โ Function(_โซ x)
      left = intro(proof โฆ congruence proof (reflexivity(_โก_)))

    instance
      right : โ{x} โ Function(x โซ_)
      right = intro(proof โฆ congruence (reflexivity(_โก_)) proof)

  module _ {Tโ : Set(โโโ)} โฆ _ : Equiv(Tโ) โฆ {Tโ : Set(โโโ)} โฆ _ : Equiv(Tโ) โฆ {Tโ : Set(โโโ)} โฆ _ : Equiv(Tโ) โฆ (_โซ_ : Tโ โ Tโ โ Tโ) โฆ inst : BinaryOperator(_โซ_) โฆ  where
    [โก]-congruence2-left : (x : _) โ Function(_โซ x)
    [โก]-congruence2-left _ = BinaryOperator.left {_}{_}{_} {_โซ_} (inst)

    [โก]-congruence2-right : (x : _) โ Function(x โซ_)
    [โก]-congruence2-right _ = BinaryOperator.right {_}{_}{_} {_โซ_} (inst)

    [โก]-with2 : โ{xโ yโ : Tโ} โ (xโ โก yโ) โ โ{xโ yโ : Tโ} โ (xโ โก yโ) โ (xโ โซ xโ โก yโ โซ yโ)
    [โก]-with2 = BinaryOperator.congruence{_โซ_ = _โซ_} (inst)

    [โก]-with2โ : (a : Tโ) โ โ{x y : Tโ} โ (x โก y) โ (x โซ a โก y โซ a)
    [โก]-with2โ a = Function.congruence{f = _โซ a} ([โก]-congruence2-left(a))

    [โก]-with2แตฃ : (a : Tโ) โ โ{x y : Tโ} โ (x โก y) โ (a โซ x โก a โซ y)
    [โก]-with2แตฃ a = Function.congruence{f = a โซ_} ([โก]-congruence2-right(a))

-- The unary relator `P` "(behaves like)/is a relator" in the context of `_โก_` from the Equiv instance.
module _ {โโโ}{โโโ} {T : Set(โโโ)} โฆ _ : Equiv(T) โฆ where
  record UnaryRelator (P : T โ Set(โโโ)) : Set(โโโ Lvl.โ โโโ) where
    constructor intro

    field
      substitution : โ{x y : T} โ (x โก y) โ P(x) โ P(y)

-- The binary relator `_โซ_` "(behaves like)/is a relator" in the context of `_โก_` from the Equiv instance.
module _ {โโโ}{โโโ}{โโโ} {Tโ : Set(โโโ)} โฆ _ : Equiv(Tโ) โฆ {Tโ : Set(โโโ)} โฆ _ : Equiv(Tโ) โฆ where
  record BinaryRelator (_โซ_ : Tโ โ Tโ โ Set(โโโ)) : Set(โโโ Lvl.โ โโโ Lvl.โ โโโ) where
    constructor intro

    field
      substitution : โ{xโ yโ : Tโ}{xโ yโ : Tโ} โ (xโ โก yโ) โ (xโ โก yโ) โ (xโ โซ xโ) โ (yโ โซ yโ)
