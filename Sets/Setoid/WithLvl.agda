module Sets.Setoid.WithLvl where

import Lvl
open import Functional.Dependent
open import Lang.Instance
open import Logic.Propositional
open import Logic.Predicate
open import Structure.Relator.Equivalence
open import Structure.Relator.Properties using (Reflexivity ; Symmetry ; Transitivity)
open import Syntax.Function
import      Type

private variable ‚Ñì‚Çí ‚Ñì‚Çí‚ÇÅ ‚Ñì‚Çí‚ÇÇ ‚Ñì‚Çí‚ÇÉ ‚Ñì‚Çó ‚Ñì‚Çó‚ÇÅ ‚Ñì‚Çó‚ÇÇ ‚Ñì‚Çó‚ÇÉ : Lvl.Level

module EquivInnerModule {‚Ñì‚Çó ‚Ñì‚Çí} where
  module _ where
    open Type

    -- An instance of `Equiv(T)` is that the type `T` has an equivalence relation which may be treated as a default one.
    -- Helps finding an instance of an equivalence relation for a type.
    record Equiv (T : Type{‚Ñì‚Çí}) : Type{Lvl.ùêí(‚Ñì‚Çó) ‚äî ‚Ñì‚Çí} where
      constructor intro

      infixl 15 _‚â°_ _‚â¢_
      field
        _‚â°_ : T ‚Üí T ‚Üí Type{‚Ñì‚Çó}

      field
        instance ‚¶É [‚â°]-equivalence ‚¶Ñ : Equivalence(_‚â°_)

      _‚â¢_ : T ‚Üí T ‚Üí Type{‚Ñì‚Çó}
      a ‚â¢ b = ¬¨(a ‚â° b)

      open Equivalence([‚â°]-equivalence) public

    open Equiv ‚¶É ... ‚¶Ñ using (_‚â°_ ; _‚â¢_ ; [‚â°]-equivalence) public
    {-# INLINE _‚â°_ #-}
    {-# DISPLAY Equiv._‚â°_ a b = a ‚â° b #-}

  -- A set and an equivalence relation on it
  Setoid : Type.Type
  Setoid = ‚àÉ(Equiv)
  module Setoid(setoid : Setoid) where
    Type : Type.Type
    Type = [‚àÉ]-witness setoid
    open Equiv([‚àÉ]-proof setoid) public

open EquivInnerModule hiding (intro) public
