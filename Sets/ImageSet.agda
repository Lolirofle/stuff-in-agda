module Sets.ImageSet where

open import Data
open import Functional
open import Logic
open import Logic.Propositional
open import Logic.Predicate
import      Lvl
open import Structure.Function
open import Structure.Setoid renaming (_‚â°_ to _‚â°‚Çõ_)
open import Type
open import Type.Dependent.Sigma

private variable ‚Ñì ‚Ñì‚Çë ‚Ñì·µ¢ ‚Ñì·µ¢‚ÇÅ ‚Ñì·µ¢‚ÇÇ ‚Ñì·µ¢‚ÇÉ ‚Ñì·µ¢‚Çë ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ : Lvl.Level
private variable T X Y Z : Type{‚Ñì}

record ImageSet {‚Ñì·µ¢ ‚Ñì} (T : Type{‚Ñì}) : Type{Lvl.ùêí(‚Ñì·µ¢) Lvl.‚äî ‚Ñì} where
  constructor intro
  field
    {Index} : Type{‚Ñì·µ¢}
    elem : Index ‚Üí T
open ImageSet using (Index ; elem) public

module _ ‚¶É equiv : Equiv{‚Ñì‚Çë}(T) ‚¶Ñ where
  _‚àà_ : T ‚Üí ImageSet{‚Ñì·µ¢}(T) ‚Üí Stmt
  a ‚àà A = ‚àÉ(i ‚Ü¶ a ‚â°‚Çõ elem A(i))

  open import Data.Proofs
  open import Function.Proofs
  open import Logic.Propositional.Theorems
  open import Structure.Relator
  open import Structure.Relator.Properties
  open import Syntax.Transitivity

  {-
  instance
    ImageSet-equiv : Equiv(ImageSet{‚Ñì·µ¢}(T))
    ImageSet-equiv = intro(_‚â°_) ‚¶É [‚â°]-equivalence ‚¶Ñ
  -}

  instance
    [‚àà]-unaryOperator‚Çó : ‚àÄ{A : ImageSet{‚Ñì·µ¢}(T)} ‚Üí UnaryRelator(_‚àà A)
    [‚àà]-unaryOperator‚Çó = UnaryRelator-intro·µ£ \xy ([‚àÉ]-intro i ‚¶É p ‚¶Ñ) ‚Üí [‚àÉ]-intro i ‚¶É symmetry(_‚â°‚Çõ_) xy üùñ p ‚¶Ñ
