
module _
  {‚Ñì‚Çí‚ÇÅ ‚Ñì‚Çò‚ÇÅ ‚Ñì‚Çí‚ÇÇ ‚Ñì‚Çò‚ÇÇ : Lvl.Level}
  {Obj‚ÇÅ : Set(‚Ñì‚Çí‚ÇÅ)}
  {Obj‚ÇÇ : Set(‚Ñì‚Çí‚ÇÇ)}
  {_‚ü∂‚ÇÅ_ : Obj‚ÇÅ ‚Üí Obj‚ÇÅ ‚Üí Set(‚Ñì‚Çò‚ÇÅ)}
  {_‚ü∂‚ÇÇ_ : Obj‚ÇÇ ‚Üí Obj‚ÇÇ ‚Üí Set(‚Ñì‚Çò‚ÇÇ)}
  where

  open Relator.Equals
  open Relator.Equals.Proofs

  -- A covariant functor.
  -- A homomorphism between categories.
  -- "Preserves structure"
  record Functor
      (Category‚ÇÅ : Category {_}{_} {Obj‚ÇÅ} (_‚ü∂‚ÇÅ_) ‚¶É \{x}{y} ‚Üí [‚â°]-equiv {_}{_} {x ‚ü∂‚ÇÅ y} ‚¶Ñ)
      (Category‚ÇÇ : Category {_}{_} {Obj‚ÇÇ} (_‚ü∂‚ÇÇ_) ‚¶É \{x}{y} ‚Üí [‚â°]-equiv {_}{_} {x ‚ü∂‚ÇÇ y} ‚¶Ñ)
    : Set((‚Ñì‚Çí‚ÇÅ Lvl.‚äî ‚Ñì‚Çò‚ÇÅ) Lvl.‚äî (‚Ñì‚Çí‚ÇÇ Lvl.‚äî ‚Ñì‚Çò‚ÇÇ))
    where

    private
      _‚àò‚ÇÅ_ = Category._‚àò_ (Category‚ÇÅ)
      _‚àò‚ÇÇ_ = Category._‚àò_ (Category‚ÇÇ)

      id‚ÇÅ = Category.id (Category‚ÇÅ)
      id‚ÇÇ = Category.id (Category‚ÇÇ)

    field
      -- Morphs/Transforms objects from category 1 to category 2
      functor : Obj‚ÇÅ ‚Üí Obj‚ÇÇ

      -- Morphs/Transforms morphisms from category 1 to category 2
      map : ‚àÄ{x y} ‚Üí (x ‚ü∂‚ÇÅ y) ‚Üí (functor(x) ‚ü∂‚ÇÇ functor(y))

    field
     ‚¶É .[‚àò]-preserving ‚¶Ñ : ‚àÄ{x y z}{f : y ‚ü∂‚ÇÅ z}{g : x ‚ü∂‚ÇÅ y} ‚Üí (map(f ‚àò‚ÇÅ g) ‚â° map(f) ‚àò‚ÇÇ map(g))
     ‚¶É .id-preserving  ‚¶Ñ : ‚àÄ{x} ‚Üí (map(id‚ÇÅ{x}) ‚â° id‚ÇÇ)

    .isomorphism-preserving : ‚àÄ{x y}{f : x ‚ü∂‚ÇÅ y} ‚Üí Category.Isomorphism(Category‚ÇÅ)(f) ‚Üí Category.Isomorphism(Category‚ÇÇ)(map f)
    isomorphism-preserving {x}{y} {f} ([‚àÉ]-intro g ‚¶É [‚àß]-intro gfid fgid ‚¶Ñ) = [‚àÉ]-intro (map g) ‚¶É [‚àß]-intro proof‚Çó proof·µ£ ‚¶Ñ where
      .proof‚Çó : map(g) ‚àò‚ÇÇ map(f) ‚â° id‚ÇÇ
      proof‚Çó =
        (symmetry [‚àò]-preserving :of: (map(g) ‚àò‚ÇÇ map(f) ‚â° map(g ‚àò‚ÇÅ f)))
        üùñ ([‚â°]-with(map) gfid    :of: (_                ‚â° map(id‚ÇÅ)))
        üùñ (id-preserving         :of: (_                ‚â° id‚ÇÇ))

      .proof·µ£ : map(f) ‚àò‚ÇÇ map(g) ‚â° id‚ÇÇ
      proof·µ£ =
        (symmetry [‚àò]-preserving :of: (map(f) ‚àò‚ÇÇ map(g) ‚â° map(f ‚àò‚ÇÅ g)))
        üùñ ([‚â°]-with(map) fgid    :of: (_                ‚â° map(id‚ÇÅ)))
        üùñ (id-preserving         :of: (_                ‚â° id‚ÇÇ))

  constantFunctor : (obj‚ÇÇ : Obj‚ÇÇ) ‚Üí (cat‚ÇÅ : _) ‚Üí (cat‚ÇÇ : _) ‚Üí Functor(cat‚ÇÅ)(cat‚ÇÇ)
  Functor.functor       (constantFunctor(obj‚ÇÇ) (_)(cat‚ÇÇ)) = const(obj‚ÇÇ)
  Functor.map           (constantFunctor(obj‚ÇÇ) (_)(cat‚ÇÇ)) = const(Category.id(cat‚ÇÇ) {obj‚ÇÇ})
  Functor.[‚àò]-preserving(constantFunctor(obj‚ÇÇ) (_)(cat‚ÇÇ)) = symmetry (Category.identity‚Çó(cat‚ÇÇ))
  Functor.id-preserving (constantFunctor(obj‚ÇÇ) (_)(cat‚ÇÇ)) = [‚â°]-intro

module _ {‚Ñì‚Çí ‚Ñì‚Çò : Lvl.Level} where -- TODO: Level problems. Probably in the proofs {‚Ñì‚Çí‚ÇÅ}{‚Ñì‚Çò‚ÇÅ} {‚Ñì‚Çí‚ÇÇ}{‚Ñì‚Çò‚ÇÇ} {‚Ñì‚Çí‚ÇÉ}{‚Ñì‚Çò‚ÇÉ}
  private
    ‚Ñì‚Çí‚ÇÅ = ‚Ñì‚Çí
    ‚Ñì‚Çò‚ÇÅ = ‚Ñì‚Çò
    ‚Ñì‚Çí‚ÇÇ = ‚Ñì‚Çí
    ‚Ñì‚Çò‚ÇÇ = ‚Ñì‚Çò
    ‚Ñì‚Çí‚ÇÉ = ‚Ñì‚Çí
    ‚Ñì‚Çò‚ÇÉ = ‚Ñì‚Çò

  open Relator.Equals.Proofs{‚Ñì‚Çò‚ÇÇ}

  compositionFunctor : ‚àÄ{Obj‚ÇÅ}{Obj‚ÇÇ}{Obj‚ÇÉ} {M‚ÇÅ}{M‚ÇÇ}{M‚ÇÉ} {cat‚ÇÅ}{cat‚ÇÇ}{cat‚ÇÉ}
                     ‚Üí Functor{‚Ñì‚Çí‚ÇÇ}{‚Ñì‚Çò‚ÇÇ} {‚Ñì‚Çí‚ÇÉ}{‚Ñì‚Çò‚ÇÉ} {Obj‚ÇÇ}{Obj‚ÇÉ}{M‚ÇÇ}{M‚ÇÉ} (cat‚ÇÇ)(cat‚ÇÉ)
                     ‚Üí Functor{‚Ñì‚Çí‚ÇÅ}{‚Ñì‚Çò‚ÇÅ} {‚Ñì‚Çí‚ÇÇ}{‚Ñì‚Çò‚ÇÇ} {Obj‚ÇÅ}{Obj‚ÇÇ}{M‚ÇÅ}{M‚ÇÇ} (cat‚ÇÅ)(cat‚ÇÇ)
                     ‚Üí Functor{‚Ñì‚Çí‚ÇÅ}{‚Ñì‚Çò‚ÇÅ} {‚Ñì‚Çí‚ÇÉ}{‚Ñì‚Çò‚ÇÉ} {Obj‚ÇÅ}{Obj‚ÇÉ}{M‚ÇÅ}{M‚ÇÉ} (cat‚ÇÅ)(cat‚ÇÉ)
  Functor.functor       (compositionFunctor (functor‚ÇÇ‚ÇÉ)(functor‚ÇÅ‚ÇÇ)) = Functor.functor(functor‚ÇÇ‚ÇÉ) ‚àòf Functor.functor(functor‚ÇÅ‚ÇÇ)
  Functor.map           (compositionFunctor (functor‚ÇÇ‚ÇÉ)(functor‚ÇÅ‚ÇÇ)){x}{y} = (Functor.map(functor‚ÇÇ‚ÇÉ){Functor.functor(functor‚ÇÅ‚ÇÇ)(x)}{Functor.functor(functor‚ÇÅ‚ÇÇ)(y)}) ‚àòf (Functor.map(functor‚ÇÅ‚ÇÇ){x}{y})
  Functor.[‚àò]-preserving(compositionFunctor (functor‚ÇÇ‚ÇÉ)(functor‚ÇÅ‚ÇÇ)) =
    ([‚â°]-with(Functor.map(functor‚ÇÇ‚ÇÉ))
      (Functor.[‚àò]-preserving(functor‚ÇÅ‚ÇÇ))
    )
    üùñ (Functor.[‚àò]-preserving(functor‚ÇÇ‚ÇÉ))
  Functor.id-preserving (compositionFunctor (functor‚ÇÇ‚ÇÉ)(functor‚ÇÅ‚ÇÇ)) =
    ([‚â°]-with(expr ‚Ü¶ Functor.map(functor‚ÇÇ‚ÇÉ)(expr))
      (Functor.id-preserving(functor‚ÇÅ‚ÇÇ))
    )
    üùñ (Functor.id-preserving(functor‚ÇÇ‚ÇÉ))
  -- ‚Ä¢ {
  --     map‚ÇÅ‚ÇÇ(f ‚àò‚ÇÅ g) ‚â° map‚ÇÅ‚ÇÇ(f) ‚àò‚ÇÇ map‚ÇÅ‚ÇÇ(g)
  --     map‚ÇÇ‚ÇÉ(map‚ÇÅ‚ÇÇ(f ‚àò‚ÇÅ g)) ‚â° map‚ÇÇ‚ÇÉ(map‚ÇÅ‚ÇÇ(f) ‚àò‚ÇÇ map‚ÇÅ‚ÇÇ(g))
  -- }
  -- ‚Ä¢ map‚ÇÇ‚ÇÉ(f ‚àò‚ÇÇ g) ‚â° map‚ÇÇ‚ÇÉ(f) ‚àò‚ÇÉ map‚ÇÇ‚ÇÉ(g)
  -- ‚áí map‚ÇÇ‚ÇÉ(map‚ÇÅ‚ÇÇ(f ‚àò‚ÇÅ g)) ‚â° map‚ÇÇ‚ÇÉ(map‚ÇÅ‚ÇÇ(f)) ‚àò‚ÇÇ map‚ÇÇ‚ÇÉ(map‚ÇÅ‚ÇÇ(g))


module _ {‚Ñì‚Çí ‚Ñì‚Çò} where
  open Relator.Equals

  -- A covariant functor from a category to itself
  EndoFunctor : ‚àÄ{Obj : Set(‚Ñì‚Çí)} {_‚ü∂_ : Obj ‚Üí Obj ‚Üí Set(‚Ñì‚Çò)} ‚Üí Category{_}{_} {Obj}(_‚ü∂_) ‚Üí Set(‚Ñì‚Çí Lvl.‚äî ‚Ñì‚Çò)
  EndoFunctor {Obj}{_‚ü∂_} (Category) = Functor {‚Ñì‚Çí}{‚Ñì‚Çò}{‚Ñì‚Çí}{‚Ñì‚Çò} {Obj}{Obj} {_‚ü∂_}{_‚ü∂_} (Category)(Category)

  identityFunctor : ‚àÄ{Obj}{_‚ü∂_} ‚Üí (cat : _) ‚Üí EndoFunctor{Obj}{_‚ü∂_} (cat)
  Functor.functor       (identityFunctor(_)) = Functional.id
  Functor.map           (identityFunctor(_)) = Functional.id
  Functor.[‚àò]-preserving(identityFunctor(_)) = [‚â°]-intro
  Functor.id-preserving (identityFunctor(_)) = [‚â°]-intro
