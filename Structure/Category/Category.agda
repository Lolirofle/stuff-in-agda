module Structure.Category.Category where

open import Functional           using () renaming (id to id·∂†‚Åø)
open import Functional.Dependent using () renaming (_‚àò_ to _‚àò·∂†‚Åø_)
open import Function.Equals
import      Function.Equals.Proofs as Function
import      Lvl
open import Logic
open import Logic.Predicate
open import Sets.Setoid
open import Structure.Category
import      Structure.Category.Names as Names
open import Structure.Category.Properties as Properties
import      Structure.Operator.Names as Names
import      Structure.Operator.Properties as Properties
import      Structure.Relator.Names as Names
open import Structure.Relator.Equivalence
open import Structure.Relator.Properties
open import Structure.Category.Functor
import      Structure.Category.Functor.Functors as Functors
open import Structure.Category.NaturalTransformation
open import Syntax.Transitivity
open import Type

module _
  {‚Ñì‚Çí ‚Ñì‚Çò : Lvl.Level}
  {Obj : Type{‚Ñì‚Çí}}
  ‚¶É obj-equiv : Equiv(Obj) ‚¶Ñ
  (Morphism : Obj ‚Üí Obj ‚Üí Type{‚Ñì‚Çò})
  ‚¶É morphism-equiv : ‚àÄ{x y : Obj} ‚Üí Equiv(Morphism x y) ‚¶Ñ
  where

  open Names.ArrowNotation(Morphism)
  open Functors.Wrapped

  instance
    functor-equiv : ‚àÄ{cat‚Çó cat·µ£ : Category(Morphism)} ‚Üí Equiv(cat‚Çó ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ cat·µ£)
    Equiv._‚â°_ functor-equiv ([‚àÉ]-intro F‚ÇÅ) ([‚àÉ]-intro F‚ÇÇ) = Lvl.Up{‚Ñì‚ÇÇ = ‚Ñì‚Çò}(F‚ÇÅ ‚äú F‚ÇÇ)
    Dependent._‚äú_.proof (Lvl.Up.obj (Reflexivity.proof (Equivalence.reflexivity (Equiv.[‚â°]-equivalence functor-equiv)))) = reflexivity(_‚â°_)
    Dependent._‚äú_.proof (Lvl.Up.obj (Symmetry.proof (Equivalence.symmetry (Equiv.[‚â°]-equivalence functor-equiv)) (Lvl.up (Dependent.intro proof)))) = symmetry(_‚â°_) proof
    Dependent._‚äú_.proof (Lvl.Up.obj (Transitivity.proof (Equivalence.transitivity (Equiv.[‚â°]-equivalence functor-equiv)) (Lvl.up (Dependent.intro p)) (Lvl.up (Dependent.intro q)))) = transitivity(_‚â°_) p q

  categoryCategory : Category{Obj = Category(_‚ü∂_)} (_‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥_)
  Category._‚àò_ categoryCategory = _‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥_
  Category.id  categoryCategory = id·∂†·µò‚Åø·∂ú·µó·µí ≥
  Dependent._‚äú_.proof (Lvl.Up.obj (BinaryOperator.congruence (Category.binaryOperator categoryCategory) {[‚àÉ]-intro F‚ÇÅ} {[‚àÉ]-intro F‚ÇÇ} (Lvl.up (Dependent.intro proof-F)) {[‚àÉ]-intro G‚ÇÅ} {[‚àÉ]-intro G‚ÇÇ} (Lvl.up (Dependent.intro proof-G)))) {obj} =
    F‚ÇÅ(G‚ÇÅ(obj)) üùñ-[ _‚äú_.proof (Function.[‚äú][‚àò]-binaryOperator-raw ‚¶É _ ‚¶Ñ ‚¶É _ ‚¶Ñ ‚¶É test ‚¶Ñ (intro proof-F) (intro(proof-G {x = obj}))){x = obj} ]
    F‚ÇÇ(G‚ÇÇ(obj)) üùñ-end
    where postulate test : Function(F‚ÇÇ)
  Category.associativity categoryCategory = {!!}
  Category.identity categoryCategory = {!!}
