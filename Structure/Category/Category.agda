module Structure.Category.Category where

open import Data.Tuple as Tuple using ()
open import Functional           using () renaming (id to id·∂†‚Åø)
open import Functional.Dependent using () renaming (_‚àò_ to _‚àò·∂†‚Åø_)
open import Function.Equals
import      Function.Equals.Proofs as Function
import      Function.Proofs as Function
import      Lvl
open import Logic
open import Logic.Predicate
open import Structure.Setoid
open import Structure.Category
open import Structure.Category.Functor.Equiv
import      Structure.Category.Names as Names
open import Structure.Category.Properties as Properties
import      Structure.Operator.Names as Names
import      Structure.Operator.Properties as Properties
open import Structure.Operator
import      Structure.Relator.Names as Names
open import Structure.Relator.Equivalence
open import Structure.Relator.Properties
open import Structure.Category.Functor
import      Structure.Category.Functor.Functors as Functors
open import Structure.Category.NaturalTransformation
open import Syntax.Transitivity
open import Type

module _
  {‚Ñì‚Çí ‚Ñì‚Çò : Lvl.Level}
  {Obj : Type{‚Ñì‚Çí}}
  ‚¶É obj-equiv : Equiv(Obj) ‚¶Ñ
  (Morphism : Obj ‚Üí Obj ‚Üí Type{‚Ñì‚Çò})
  ‚¶É morphism-equiv : ‚àÄ{x y : Obj} ‚Üí Equiv(Morphism x y) ‚¶Ñ
  ‚¶É functor-equiv : ‚àÄ{x y} ‚Üí Equiv(x ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ y) ‚¶Ñ
  where

  open Names.ArrowNotation(Morphism)
  open Functors.Wrapped

  categoryCategory : Category{Obj = Category(_‚ü∂_)} (_‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥_)
  Category._‚àò_ categoryCategory = _‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥_
  Category.id categoryCategory = id·∂†·µò‚Åø·∂ú·µó·µí ≥
  BinaryOperator.congruence (Category.binaryOperator categoryCategory) p‚ÇÅ p‚ÇÇ = {!!}
  Morphism.Associativity.proof (Category.associativity categoryCategory) = {!reflexivity(_‚â°_)!}
  Category.identity categoryCategory = {!!}

  {- TODO: Resolve the problem in Category.Functor.Equiv if possible
  categoryCategory : Category{Obj = Category(_‚ü∂_)} (_‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥_)
  Category._‚àò_ categoryCategory = _‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥_
  Category.id  categoryCategory = id·∂†·µò‚Åø·∂ú·µó·µí ≥
  Dependent._‚äú_.proof (Lvl.Up.obj (BinaryOperator.congruence (Category.binaryOperator categoryCategory) {[‚àÉ]-intro F‚ÇÅ} {[‚àÉ]-intro F‚ÇÇ} (Lvl.up (Dependent.intro proof-F)) {[‚àÉ]-intro G‚ÇÅ} {[‚àÉ]-intro G‚ÇÇ} (Lvl.up (Dependent.intro proof-G)))) {obj} =
    F‚ÇÅ(G‚ÇÅ(obj)) üùñ-[ _‚äú_.proof (Function.[‚äú][‚àò]-binaryOperator-raw (intro proof-F) (intro(proof-G {x = obj}))){x = obj} ]
    F‚ÇÇ(G‚ÇÇ(obj)) üùñ-end
  Morphism.Associativity.proof (Category.associativity categoryCategory) {x = _}{_}{_}{_} {[‚àÉ]-intro F} {[‚àÉ]-intro G} {[‚àÉ]-intro H} = Lvl.up(Function.[‚àò]-associativity {f = F}{g = G}{h = H})
  Morphism.Identity‚Çó.proof (Tuple.left  (Category.identity categoryCategory)) = Lvl.up(Function.[‚àò]-identity‚Çó)
  Morphism.Identity·µ£.proof (Tuple.right (Category.identity categoryCategory)) = Lvl.up(Function.[‚àò]-identity·µ£)
  -}
