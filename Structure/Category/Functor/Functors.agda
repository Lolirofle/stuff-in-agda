module Structure.Category.Functor.Functors where

import      Functional as Fn
open import Function.Proofs
open import Logic.Predicate
import      Lvl
open import Structure.Setoid
open import Structure.Category
open import Structure.Category.Functor
open import Structure.Category.Properties
open import Structure.Function
open import Structure.Relator.Equivalence
open import Structure.Relator.Properties
open import Syntax.Transitivity
open import Type

private variable ‚Ñì : Lvl.Level
private variable Obj Obj‚ÇÅ Obj‚ÇÇ Obj‚ÇÉ : Type{‚Ñì}
private variable Morphism Morphism‚ÇÅ Morphism‚ÇÇ Morphism‚ÇÉ : Obj ‚Üí Obj ‚Üí Type{‚Ñì}

module Raw where
  const·∂†·µò‚Åø·∂ú·µó·µí ≥ : Obj‚ÇÇ ‚Üí (Obj‚ÇÅ ‚Üí Obj‚ÇÇ)
  const·∂†·µò‚Åø·∂ú·µó·µí ≥ = Fn.const

  id·∂†·µò‚Åø·∂ú·µó·µí ≥ : Obj ‚Üí Obj
  id·∂†·µò‚Åø·∂ú·µó·µí ≥ = Fn.id

  _‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥_ : (Obj‚ÇÇ ‚Üí Obj‚ÇÉ) ‚Üí (Obj‚ÇÅ ‚Üí Obj‚ÇÇ) ‚Üí (Obj‚ÇÅ ‚Üí Obj‚ÇÉ)
  _‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥_ = Fn._‚àò_

  infixl 10000 _‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥_

module _
  ‚¶É morphism-equiv‚Çó : ‚àÄ{x y : Obj‚ÇÅ} ‚Üí Equiv(Morphism‚ÇÅ x y) ‚¶Ñ
  ‚¶É morphism-equiv·µ£ : ‚àÄ{x y : Obj‚ÇÇ} ‚Üí Equiv(Morphism‚ÇÇ x y) ‚¶Ñ
  {Category‚ÇÅ : Category(Morphism‚ÇÅ)}
  {Category‚ÇÇ : Category(Morphism‚ÇÇ)}
  where

  module _ where
    private open module Equiv‚Çó {x}{y} = Equivalence ([‚â°]-equivalence ‚¶É morphism-equiv‚Çó{x}{y} ‚¶Ñ) using ()
    private open module Equiv·µ£ {x}{y} = Equivalence ([‚â°]-equivalence ‚¶É morphism-equiv·µ£{x}{y} ‚¶Ñ) using ()
    open Category ‚¶É ‚Ä¶ ‚¶Ñ
    open Functor
    open Raw

    private instance _ = Category‚ÇÅ
    private instance _ = Category‚ÇÇ

    -- A constant functor maps every object and morphism in a category to a single specified object and the identity morphism.
    constant : (obj·µ£ : Obj‚ÇÇ) ‚Üí Functor(Category‚ÇÅ)(Category‚ÇÇ)(const·∂†·µò‚Åø·∂ú·µó·µí ≥(obj·µ£))
    map           (constant(obj·µ£)) = Fn.const(id)
    op-preserving (constant(obj·µ£)) = symmetry(_‚â°_) (Morphism.identity‚Çó(_‚àò_)(id))
    id-preserving (constant(obj·µ£)) = reflexivity(_‚â°_)

module _
  ‚¶É morphism-equiv : ‚àÄ{x y : Obj} ‚Üí Equiv(Morphism x y) ‚¶Ñ
  {Category : Category(Morphism)}
  where

  private open module [‚â°]-Equivalence {x}{y} = Equivalence ([‚â°]-equivalence ‚¶É morphism-equiv{x}{y} ‚¶Ñ) using ()
  open Functor
  open Raw

  private instance _ = Category

  identity : Endofunctor(Category)(id·∂†·µò‚Åø·∂ú·µó·µí ≥)
  map           (identity) = Fn.id
  op-preserving (identity) = reflexivity(_‚â°_)
  id-preserving (identity) = reflexivity(_‚â°_)

module _
  ‚¶É morphism-equiv‚ÇÅ : ‚àÄ{x y : Obj‚ÇÅ} ‚Üí Equiv(Morphism‚ÇÅ x y) ‚¶Ñ
  ‚¶É morphism-equiv‚ÇÇ : ‚àÄ{x y : Obj‚ÇÇ} ‚Üí Equiv(Morphism‚ÇÇ x y) ‚¶Ñ
  ‚¶É morphism-equiv‚ÇÉ : ‚àÄ{x y : Obj‚ÇÉ} ‚Üí Equiv(Morphism‚ÇÉ x y) ‚¶Ñ
  {Category‚ÇÅ : Category(Morphism‚ÇÅ)}
  {Category‚ÇÇ : Category(Morphism‚ÇÇ)}
  {Category‚ÇÉ : Category(Morphism‚ÇÉ)}
  where

  private open module Equiv‚ÇÉ {x}{y} = Equivalence ([‚â°]-equivalence ‚¶É morphism-equiv‚ÇÉ{x}{y} ‚¶Ñ) using ()
  open Category ‚¶É ‚Ä¶ ‚¶Ñ
  open Functor
  open Raw

  private instance _ = Category‚ÇÅ
  private instance _ = Category‚ÇÇ
  private instance _ = Category‚ÇÉ

  composition :
    ‚àÄ{F‚ÇÇ‚ÇÉ}{F‚ÇÅ‚ÇÇ}
    ‚Üí (functor‚ÇÇ‚ÇÉ : Functor(Category‚ÇÇ)(Category‚ÇÉ)(F‚ÇÇ‚ÇÉ))
    ‚Üí (functor‚ÇÅ‚ÇÇ : Functor(Category‚ÇÅ)(Category‚ÇÇ)(F‚ÇÅ‚ÇÇ))
    ‚Üí Functor(Category‚ÇÅ)(Category‚ÇÉ)(F‚ÇÇ‚ÇÉ ‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥ F‚ÇÅ‚ÇÇ)

  map              (composition{F‚ÇÇ‚ÇÉ}{F‚ÇÅ‚ÇÇ}(functor‚ÇÇ‚ÇÉ)(functor‚ÇÅ‚ÇÇ)){x}{y} = (map(functor‚ÇÇ‚ÇÉ){F‚ÇÅ‚ÇÇ(x)}{F‚ÇÅ‚ÇÇ(y)}) Fn.‚àò (map(functor‚ÇÅ‚ÇÇ){x}{y})
  map-function     (composition{F‚ÇÇ‚ÇÉ}{F‚ÇÅ‚ÇÇ}(functor‚ÇÇ‚ÇÉ)(functor‚ÇÅ‚ÇÇ)) = [‚àò]-function ‚¶É func-f = map-function(functor‚ÇÇ‚ÇÉ) ‚¶Ñ ‚¶É func-g = map-function(functor‚ÇÅ‚ÇÇ) ‚¶Ñ
  op-preserving    (composition{F‚ÇÇ‚ÇÉ}{F‚ÇÅ‚ÇÇ}(functor‚ÇÇ‚ÇÉ)(functor‚ÇÅ‚ÇÇ)){x}{y}{z} {f}{g} =
    map(functor‚ÇÇ‚ÇÉ) (map(functor‚ÇÅ‚ÇÇ) (f ‚àò g))                               üùñ-[ [‚â°]-with(map(functor‚ÇÇ‚ÇÉ)) (op-preserving(functor‚ÇÅ‚ÇÇ)) ]
    map(functor‚ÇÇ‚ÇÉ) (map(functor‚ÇÅ‚ÇÇ) f ‚àò map functor‚ÇÅ‚ÇÇ g)                   üùñ-[ op-preserving(functor‚ÇÇ‚ÇÉ)]
    map(functor‚ÇÇ‚ÇÉ) (map(functor‚ÇÅ‚ÇÇ) f) ‚àò map(functor‚ÇÇ‚ÇÉ) (map(functor‚ÇÅ‚ÇÇ) g) üùñ-end
  id-preserving    (composition{F‚ÇÇ‚ÇÉ}{F‚ÇÅ‚ÇÇ}(functor‚ÇÇ‚ÇÉ)(functor‚ÇÅ‚ÇÇ)) {x} =
    map(functor‚ÇÇ‚ÇÉ) (map(functor‚ÇÅ‚ÇÇ) id) üùñ-[ [‚â°]-with(_) (id-preserving(functor‚ÇÅ‚ÇÇ)) ]
    map(functor‚ÇÇ‚ÇÉ) id                  üùñ-[ id-preserving(functor‚ÇÇ‚ÇÉ) ]
    id                                 üùñ-end

module Wrapped where
  module _
    ‚¶É morphism-equiv‚Çó : ‚àÄ{x y : Obj‚ÇÅ} ‚Üí Equiv(Morphism‚ÇÅ x y) ‚¶Ñ
    ‚¶É morphism-equiv·µ£ : ‚àÄ{x y : Obj‚ÇÇ} ‚Üí Equiv(Morphism‚ÇÇ x y) ‚¶Ñ
    {A : Category(Morphism‚ÇÅ)}
    {B : Category(Morphism‚ÇÇ)}
    (c : Obj‚ÇÇ)
    where

    const·∂†·µò‚Åø·∂ú·µó·µí ≥ : (A ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ B)
    ‚àÉ.witness const·∂†·µò‚Åø·∂ú·µó·µí ≥ = Raw.const·∂†·µò‚Åø·∂ú·µó·µí ≥ c
    ‚àÉ.proof   const·∂†·µò‚Åø·∂ú·µó·µí ≥ = constant c

  module _
    ‚¶É morphism-equiv : ‚àÄ{x y : Obj} ‚Üí Equiv(Morphism x y) ‚¶Ñ
    {A : Category(Morphism)}
    where

    id·∂†·µò‚Åø·∂ú·µó·µí ≥ : A ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ A
    ‚àÉ.witness id·∂†·µò‚Åø·∂ú·µó·µí ≥ = Raw.id·∂†·µò‚Åø·∂ú·µó·µí ≥
    ‚àÉ.proof   id·∂†·µò‚Åø·∂ú·µó·µí ≥ = identity

  module _
    ‚¶É morphism-equiv‚ÇÅ : ‚àÄ{x y : Obj‚ÇÅ} ‚Üí Equiv(Morphism‚ÇÅ x y) ‚¶Ñ
    ‚¶É morphism-equiv‚ÇÇ : ‚àÄ{x y : Obj‚ÇÇ} ‚Üí Equiv(Morphism‚ÇÇ x y) ‚¶Ñ
    ‚¶É morphism-equiv‚ÇÉ : ‚àÄ{x y : Obj‚ÇÉ} ‚Üí Equiv(Morphism‚ÇÉ x y) ‚¶Ñ
    {A : Category(Morphism‚ÇÅ)}
    {B : Category(Morphism‚ÇÇ)}
    {C : Category(Morphism‚ÇÉ)}
    where

    _‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥_ : (B ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ C) ‚Üí (A ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ B) ‚Üí (A ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ C)
    ‚àÉ.witness (_‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥_ ([‚àÉ]-intro F)               ([‚àÉ]-intro G))               = Raw._‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥_ F G
    ‚àÉ.proof   (_‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥_ ([‚àÉ]-intro _ ‚¶É F-functor ‚¶Ñ) ([‚àÉ]-intro _ ‚¶É G-functor ‚¶Ñ)) = composition F-functor G-functor
