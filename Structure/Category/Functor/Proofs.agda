module Structure.Category.Functor.Proofs where

import      Lvl
open import Sets.Setoid
open import Structure.Category
open import Structure.Category.Functor
open import Structure.Relator.Equivalence
open import Structure.Relator.Properties
open import Type

module _
  {‚Ñì‚Çí‚Çó ‚Ñì‚Çí·µ£ ‚Ñì‚Çò‚Çó ‚Ñì‚Çò·µ£ : Lvl.Level}
  {Obj‚Çó : Type{‚Ñì‚Çí‚Çó}}
  {Obj·µ£ : Type{‚Ñì‚Çí·µ£}}
  {Morphism‚Çó : Obj‚Çó ‚Üí Obj‚Çó ‚Üí Type{‚Ñì‚Çò‚Çó}}
  {Morphism·µ£ : Obj·µ£ ‚Üí Obj·µ£ ‚Üí Type{‚Ñì‚Çò·µ£}}
  ‚¶É morphism-equiv‚Çó : ‚àÄ{x y} ‚Üí Equiv(Morphism‚Çó x y) ‚¶Ñ
  ‚¶É morphism-equiv·µ£ : ‚àÄ{x y} ‚Üí Equiv(Morphism·µ£ x y) ‚¶Ñ
  {Category‚Çó : Category(Morphism‚Çó)}
  {Category·µ£ : Category(Morphism·µ£)}
  (F : Functor(Category‚Çó)(Category·µ£))
  ‚¶É map-function : ‚àÄ{x y} ‚Üí Function(Functor.map(F) {x}{y}) ‚¶Ñ
  where

  open SideNotation(Category‚Çó)(Category·µ£)
  open Functor(F)
  open module Equiv‚Çó {x}{y} = Equivalence ([‚â°]-equivalence ‚¶É morphism-equiv‚Çó{x}{y} ‚¶Ñ) using () renaming (transitivity to transitivity‚Çó ; symmetry to symmetry‚Çó ; reflexivity to reflexivity‚Çó)
  open module Equiv·µ£ {x}{y} = Equivalence ([‚â°]-equivalence ‚¶É morphism-equiv·µ£{x}{y} ‚¶Ñ) using () renaming (transitivity to transitivity·µ£ ; symmetry to symmetry·µ£ ; reflexivity to reflexivity·µ£)

  isomorphism-preserving : ‚àÄ{x y}{f : x ‚ü∂‚Çó y} ‚Üí Category.Isomorphism(Category‚Çó)(f) ‚Üí Category.Isomorphism(Category·µ£)(map f)
  isomorphism-preserving {x}{y} {f} (Category.Isomorphism.intro g gfid fgid) = Category.Isomorphism.intro (map g) proof‚Çó proof·µ£ where
    proof‚Çó : map(g) ‚àò·µ£ map(f) ‚â° id·µ£
    proof‚Çó =
      (symmetry(_‚â°_) op-preserving  :of: (map(g) ‚àò·µ£ map(f) ‚â° map(g ‚àò‚Çó f)))
      üùñ ([‚â°]-with(map) gfid         :of: (_                ‚â° map(id‚Çó)))
      üùñ (id-preserving              :of: (_                ‚â° id·µ£))

    proof·µ£ : map(f) ‚àò·µ£ map(g) ‚â° id·µ£
    proof·µ£ =
      (symmetry(_‚â°_) op-preserving  :of: (map(f) ‚àò·µ£ map(g) ‚â° map(f ‚àò‚Çó g)))
      üùñ ([‚â°]-with(map) fgid         :of: (_                ‚â° map(id‚Çó)))
      üùñ (id-preserving              :of: (_                ‚â° id·µ£))
