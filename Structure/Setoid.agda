module Structure.Setoid {‚Ñì‚Çë ‚Ñì‚Çí} where

import Lvl
open import Functional.Dependent
open import Functional.Instance
open import Logic.Propositional
open import Logic.Predicate
open import Structure.Relator.Equivalence
open import Syntax.Function
import      Type

module _ where
  open Type

  -- An instance of `Equiv(T)` is that the type `T` has an equivalence relation which may be treated as a default one.
  -- Helps finding an instance of an equivalence relation for a type.
  record Equiv (T : Type{‚Ñì‚Çí}) : Type{Lvl.ùêí(‚Ñì‚Çë) Lvl.‚äî ‚Ñì‚Çí} where
    constructor intro

    infixl 15 _‚â°_ _‚â¢_
    field
      _‚â°_ : T ‚Üí T ‚Üí Type{‚Ñì‚Çë}

    field
      instance ‚¶É equivalence ‚¶Ñ : Equivalence(_‚â°_)

    _‚â¢_ : T ‚Üí T ‚Üí Type{‚Ñì‚Çë}
    a ‚â¢ b = ¬¨(a ‚â° b)

    open Equivalence(equivalence) public

  open Equiv ‚¶É ... ‚¶Ñ using (_‚â°_ ; _‚â¢_) renaming (equivalence to Equiv-equivalence) public
  {-# INLINE _‚â°_ #-} -- TODO: Not sure if this does anything
  {-# DISPLAY Equiv._‚â°_ a b = a ‚â° b #-} -- TODO: Not sure about this either

module _ where
  -- A set and an equivalence relation on it
  Setoid = ‚àÉ(Equiv)
  module Setoid(([‚àÉ]-intro T ‚¶É equiv-T ‚¶Ñ) : Setoid) where
    Type : Type.Type
    Type = T
    open Equiv(equiv-T) public
