module Structure.Signature where

open import Data.Tuple.Raise
open import Data.Tuple.Raise·µ£.Functions
import      Lvl
open import Numeral.Natural
open import Structure.Function
open import Structure.Setoid
open import Structure.Relator
open import Type

private variable ‚Ñì ‚Ñì·µ¢ ‚Ñì·µ¢‚ÇÅ ‚Ñì·µ¢‚ÇÇ ‚Ñì·µ¢‚ÇÉ ‚Ñìd ‚Ñìd‚ÇÅ ‚Ñìd‚ÇÇ ‚Ñì·µ£ ‚Ñì·µ£‚ÇÅ ‚Ñì·µ£‚ÇÇ ‚Ñì‚Çë ‚Ñì‚Çë‚ÇÅ ‚Ñì‚Çë‚ÇÇ : Lvl.Level
private variable n : ‚Ñï

-- A signature consists of a family of sets of function and relation symbols over a set.
-- `functions(n)` and `relations(n)` should be interpreted as the indices for functions/relations of arity `n`.
record Signature : Type{Lvl.ùêí(‚Ñì·µ¢‚ÇÅ Lvl.‚äî ‚Ñì·µ¢‚ÇÇ)} where
  field
    functions : ‚Ñï ‚Üí Type{‚Ñì·µ¢‚ÇÅ}
    relations : ‚Ñï ‚Üí Type{‚Ñì·µ¢‚ÇÇ}

private variable s : Signature{‚Ñì·µ¢‚ÇÅ}{‚Ñì·µ¢‚ÇÇ}

import      Data.Tuple.Equiv as Tuple

-- A structure with a signature `s` consists of a domain and interpretations of the function/relation symbols in `s`.
record Structure (s : Signature{‚Ñì·µ¢‚ÇÅ}{‚Ñì·µ¢‚ÇÇ}) : Type{Lvl.ùêí(‚Ñì‚Çë Lvl.‚äî ‚Ñìd Lvl.‚äî ‚Ñì·µ£) Lvl.‚äî ‚Ñì·µ¢‚ÇÅ Lvl.‚äî ‚Ñì·µ¢‚ÇÇ} where
  open Signature(s)
  field
    domain : Type{‚Ñìd}
    ‚¶É equiv ‚¶Ñ : ‚àÄ{n} ‚Üí Equiv{‚Ñì‚Çë}(domain ^ n)
    ‚¶É ext ‚¶Ñ : ‚àÄ{n} ‚Üí Tuple.Extensionality(equiv{ùêí(ùêí n)})
    function : functions(n) ‚Üí ((domain ^ n) ‚Üí domain)
    ‚¶É function-func ‚¶Ñ : ‚àÄ{fi} ‚Üí Function(function{n} fi)
    relation : relations(n) ‚Üí ((domain ^ n) ‚Üí Type{‚Ñì·µ£})
    ‚¶É relation-func ‚¶Ñ : ‚àÄ{ri} ‚Üí UnaryRelator(relation{n} ri)

open Structure public using() renaming (domain to dom ; function to fn ; relation to rel)

open import Logic.Predicate

module _ {s : Signature{‚Ñì·µ¢‚ÇÅ}{‚Ñì·µ¢‚ÇÇ}} where
  private variable A B C S : Structure{‚Ñìd = ‚Ñìd}{‚Ñì·µ£ = ‚Ñì·µ£}(s)
  private variable fi : Signature.functions s n
  private variable ri : Signature.relations s n
  private variable xs : dom(S) ^ n

  record Homomorphism
    (A : Structure{‚Ñì‚Çë = ‚Ñì‚Çë‚ÇÅ}{‚Ñìd = ‚Ñìd‚ÇÅ}{‚Ñì·µ£ = ‚Ñì·µ£‚ÇÅ}(s))
    (B : Structure{‚Ñì‚Çë = ‚Ñì‚Çë‚ÇÇ}{‚Ñìd = ‚Ñìd‚ÇÇ}{‚Ñì·µ£ = ‚Ñì·µ£‚ÇÇ}(s))
    (f : dom(A) ‚Üí dom(B))
    : Type{‚Ñì‚Çë‚ÇÅ Lvl.‚äî ‚Ñì‚Çë‚ÇÇ Lvl.‚äî ‚Ñìd‚ÇÅ Lvl.‚äî ‚Ñìd‚ÇÇ Lvl.‚äî ‚Ñì·µ£‚ÇÅ Lvl.‚äî ‚Ñì·µ£‚ÇÇ Lvl.‚äî Lvl.ofType(Type.of s)}
    where
  
    field
      ‚¶É function ‚¶Ñ : Function(f)
      preserve-functions : ‚àÄ{xs : dom(A) ^ n} ‚Üí (f(fn(A) fi xs) ‚â° fn(B) fi (map f xs))
      preserve-relations : ‚àÄ{xs : dom(A) ^ n} ‚Üí (rel(A) ri xs) ‚Üí (rel(B) ri (map f xs))

  _‚Üí‚Çõ‚Çú·µ£·µ§_ : Structure{‚Ñì‚Çë = ‚Ñì‚Çë‚ÇÅ}{‚Ñìd = ‚Ñìd‚ÇÅ}{‚Ñì·µ£ = ‚Ñì·µ£‚ÇÅ}(s) ‚Üí Structure{‚Ñì‚Çë = ‚Ñì‚Çë‚ÇÇ}{‚Ñìd = ‚Ñìd‚ÇÇ}{‚Ñì·µ£ = ‚Ñì·µ£‚ÇÇ}(s) ‚Üí Type
  A ‚Üí‚Çõ‚Çú·µ£·µ§ B = ‚àÉ(Homomorphism A B)

  open import Data
  open import Data.Tuple as Tuple using (_,_)
  open import Data.Tuple.Raise·µ£.Proofs
  open import Functional
  open import Function.Proofs
  open import Lang.Instance
  open import Structure.Operator
  open import Structure.Relator.Properties
  open import Syntax.Transitivity

  id‚Çõ‚Çú·µ£·µ§ : A ‚Üí‚Çõ‚Çú·µ£·µ§ A
  ‚àÉ.witness id‚Çõ‚Çú·µ£·µ§ = id
  Homomorphism.preserve-functions (‚àÉ.proof (id‚Çõ‚Çú·µ£·µ§ {A = A})) {n} {fi} {xs} = congruence‚ÇÅ(fn A fi) (symmetry(Equiv._‚â°_ (Structure.equiv A)) ‚¶É Equiv.symmetry infer ‚¶Ñ map-id)
  Homomorphism.preserve-relations (‚àÉ.proof (id‚Çõ‚Çú·µ£·µ§ {A = A})) {n} {ri} {xs} = substitute‚ÇÅ‚Çó(rel A ri) map-id

  _‚àò‚Çõ‚Çú·µ£·µ§_ : let _ = A , B , C in (B ‚Üí‚Çõ‚Çú·µ£·µ§ C) ‚Üí (A ‚Üí‚Çõ‚Çú·µ£·µ§ B) ‚Üí (A ‚Üí‚Çõ‚Çú·µ£·µ§ C)
  ‚àÉ.witness (([‚àÉ]-intro f) ‚àò‚Çõ‚Çú·µ£·µ§ ([‚àÉ]-intro g)) = f ‚àò g
  Homomorphism.function (‚àÉ.proof ([‚àÉ]-intro f ‚àò‚Çõ‚Çú·µ£·µ§ [‚àÉ]-intro g)) = [‚àò]-function {f = f}{g = g}
  Homomorphism.preserve-functions (‚àÉ.proof (_‚àò‚Çõ‚Çú·µ£·µ§_ {A = A} {B = B} {C = C} ([‚àÉ]-intro f ‚¶É hom-f ‚¶Ñ) ([‚àÉ]-intro g ‚¶É hom-g ‚¶Ñ))) {fi = fi} = transitivity(_‚â°_) ‚¶É Equiv.transitivity infer ‚¶Ñ (transitivity(_‚â°_) ‚¶É Equiv.transitivity infer ‚¶Ñ (congruence‚ÇÅ(f) (Homomorphism.preserve-functions hom-g)) (Homomorphism.preserve-functions hom-f)) (congruence‚ÇÅ(fn C fi) (symmetry(Equiv._‚â°_ (Structure.equiv C)) ‚¶É Equiv.symmetry infer ‚¶Ñ (map-[‚àò] {f = f}{g = g})))
  Homomorphism.preserve-relations (‚àÉ.proof (_‚àò‚Çõ‚Çú·µ£·µ§_ {A = A} {B = B} {C = C} ([‚àÉ]-intro f ‚¶É hom-f ‚¶Ñ) ([‚àÉ]-intro g ‚¶É hom-g ‚¶Ñ))) {ri = ri} = substitute‚ÇÅ‚Çó (rel C ri) map-[‚àò] ‚àò Homomorphism.preserve-relations hom-f ‚àò Homomorphism.preserve-relations hom-g

  open import Function.Equals
  open import Function.Equals.Proofs
  open import Logic.Predicate.Equiv
  open import Structure.Category
  open import Structure.Categorical.Properties

  Structure-Homomorphism-category : Category(_‚Üí‚Çõ‚Çú·µ£·µ§_ {‚Ñì‚Çë}{‚Ñìd}{‚Ñì·µ£})
  Category._‚àò_ Structure-Homomorphism-category = _‚àò‚Çõ‚Çú·µ£·µ§_
  Category.id  Structure-Homomorphism-category = id‚Çõ‚Çú·µ£·µ§
  BinaryOperator.congruence (Category.binaryOperator Structure-Homomorphism-category) = [‚äú][‚àò]-binaryOperator-raw
  _‚äú_.proof (Morphism.Associativity.proof (Category.associativity Structure-Homomorphism-category) {_} {_} {_} {_} {[‚àÉ]-intro f} {[‚àÉ]-intro g} {[‚àÉ]-intro h}) {x} = reflexivity(_‚â°_) ‚¶É Equiv.reflexivity infer ‚¶Ñ {f(g(h(x)))}
  _‚äú_.proof (Morphism.Identity‚Çó.proof (Tuple.left (Category.identity Structure-Homomorphism-category)) {f = [‚àÉ]-intro f}) {x} = reflexivity(_‚â°_) ‚¶É Equiv.reflexivity infer ‚¶Ñ {f(x)}
  _‚äú_.proof (Morphism.Identity·µ£.proof (Tuple.right (Category.identity Structure-Homomorphism-category)) {f = [‚àÉ]-intro f}) {x} = reflexivity(_‚â°_) ‚¶É Equiv.reflexivity infer ‚¶Ñ {f(x)}

module _ (s : Signature{‚Ñì·µ¢‚ÇÅ}{‚Ñì·µ¢‚ÇÇ}) where
  data Term : Type{‚Ñì·µ¢‚ÇÅ} where
    var  : ‚Ñï ‚Üí Term
    func : (Signature.functions s n) ‚Üí (Term ^ n) ‚Üí Term
