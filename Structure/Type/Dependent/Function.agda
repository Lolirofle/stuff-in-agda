module Structure.Type.Dependent.Function where

open import BidirectionalFunction using (_‚Üî_ ; _$‚Çó_ ; _$·µ£_ ; intro)
open import Function.Equals
import      Lvl
open import Relator.Equals.Proofs.Equiv
open import Type
open import Structure.Function.Domain
open import Structure.Setoid

private variable ‚Ñì ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ ‚Ñì‚Çë : Lvl.Level
private variable A : Type{‚Ñì}
private variable B : A ‚Üí Type{‚Ñì}

record FunctionType(_‚ü∂_ : (A : Type{‚Ñì‚ÇÅ}) ‚Üí (A ‚Üí Type{‚Ñì‚ÇÇ}) ‚Üí Type{‚Ñì‚ÇÉ}) ‚¶É equiv : ‚àÄ{A : Type{‚Ñì‚ÇÅ}}{B : A ‚Üí Type{‚Ñì‚ÇÇ}} ‚Üí Equiv{‚Ñì‚Çë}(A ‚ü∂ B) ‚¶Ñ : Type{Lvl.ùêí(‚Ñì‚ÇÅ Lvl.‚äî ‚Ñì‚ÇÇ) Lvl.‚äî ‚Ñì‚ÇÉ Lvl.‚äî ‚Ñì‚Çë} where
  field
    convert : ((a : A) ‚Üí B(a)) ‚Üî (A ‚ü∂ B)
    correctness : InversePair ‚¶É Dependent.[‚äú]-equiv ‚¶É [‚â°]-equiv ‚¶Ñ ‚¶Ñ ‚¶É equiv{A}{B} ‚¶Ñ convert

  -- Function application.
  _$_ : (A ‚ü∂ B) ‚Üí (a : A) ‚Üí B(a)
  _$_ = convert $‚Çó_

  -- Function abstraction.
  lift : ((a : A) ‚Üí B(a)) ‚Üí (A ‚ü∂ B)
  lift = convert $·µ£_
open FunctionType ‚¶É ‚Ä¶ ‚¶Ñ hiding (convert ; correctness) public

open import DependentFunction
open import DependentFunctional as Fn
open import Functional using (id)
open import Relator.Equals

instance
  explicit-functionType : FunctionType{‚Ñì‚ÇÅ}{‚Ñì‚ÇÇ}(_‚Üí·∂†_)
  FunctionType.convert explicit-functionType = intro(Fn._$_) id
  Inverse·µ£.proof (InversePair.left  (FunctionType.correctness explicit-functionType)) = [‚â°]-intro
  Inverse·µ£.proof (InversePair.right (FunctionType.correctness explicit-functionType)) = Dependent.intro [‚â°]-intro
