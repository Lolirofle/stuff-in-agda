module Structure.Category where

import      Lvl
open import Data
open import Functional using (const ; [‚Ü¶] ; _‚Üí·∂†_) renaming (id to idf ; _‚àò_ to _‚àòf_)
open import Logic.Propositional
open import Logic.Predicate{Lvl.ùüé}
open import Relator.Equals{Lvl.ùüé}
open import Relator.Equals.Theorems{Lvl.ùüé}
open import Structure.Relator.Properties{Lvl.ùüé}

module _ {‚Ñì‚Çí}{‚Ñì‚Çò} where
  -- The type of collections of morphisms
  -- Could be seen as an generalization of functions.
  Morphism : Set(‚Ñì‚Çí) ‚Üí Set(‚Ñì‚Çí Lvl.‚äî (Lvl.ùêí ‚Ñì‚Çò))
  Morphism(Obj) = (Obj ‚Üí Obj ‚Üí Set(‚Ñì‚Çò))

  -- A type and a binary relation using this type is a category when:
  -- ‚Ä¢ The relator is transitive.
  -- ‚Ä¢ The relator is reflexive.
  -- ‚Ä¢ A proof of transitivty with a proof of reflexivity is unique.
  -- ‚Ä¢ Chains of proofs of transitivty in any direction are the same.
  --
  -- Could be seen as an generalization of a collection of sets and functions between them
  -- because these are the algebraic rules that makes composition of functions useful.
  -- In this special case, the relator describes the existence of a function between two sets.
  --
  -- Obj is the collection of objects.
  -- M   is the collection of morphisms.
  record Category (Obj : Set(‚Ñì‚Çí)) (M : Morphism(Obj)) : Set(‚Ñì‚Çí Lvl.‚äî ‚Ñì‚Çò) where
    field
      -- Existence of morphisms constructed by connecting two morphisms (The composition of two morphisms).
      _‚àò_ : ‚àÄ{x y z : Obj} ‚Üí (M y z) ‚Üí (M x y) ‚Üí (M x z)

      -- Existence of a morphism connected to itself (The identity morphism).
      id  : ‚àÄ{x : Obj} ‚Üí (M x x)

    field
      ‚¶É .identity‚Çó     ‚¶Ñ : ‚àÄ{x y : Obj}{f : M x y} ‚Üí (id ‚àò f ‚â° f)
      ‚¶É .identity·µ£     ‚¶Ñ : ‚àÄ{x y : Obj}{f : M x y} ‚Üí (f ‚àò id ‚â° f)
      ‚¶É .associativity ‚¶Ñ : ‚àÄ{x y z W : Obj}{f : M y x}{g : M z y}{h : M W z} ‚Üí (f ‚àò (g ‚àò h) ‚â° (f ‚àò g) ‚àò h)

    -- A morphism is a isomorphism when there is an inverse of the morphism.
    Isomorphism : ‚àÄ{x y} ‚Üí (M x y) ‚Üí Stmt
    Isomorphism(f) = ‚àÉ(g ‚Ü¶ (g ‚àò f ‚â° id)‚àß(f ‚àò g ‚â° id))

    -- The inverse of a morphism.
    inv : ‚àÄ{x y} (f : M x y) ‚Üí ‚¶É _ : Isomorphism(f) ‚¶Ñ ‚Üí (M y x)
    inv (_) ‚¶É proof ‚¶Ñ = [‚àÉ]-witness(proof)

    -- Proof that the inverse actually is an left inverse.
    inverse‚Çó : ‚àÄ{x y}{f : M x y} ‚Üí ‚¶É _ : Isomorphism(f) ‚¶Ñ ‚Üí ((inv f) ‚àò f ‚â° id)
    inverse‚Çó ‚¶É proof ‚¶Ñ = [‚àß]-elim‚Çó([‚àÉ]-proof(proof))

    -- Proof that the inverse actually is an right inverse.
    inverse·µ£ : ‚àÄ{x y}{f : M x y} ‚Üí ‚¶É _ : Isomorphism(f) ‚¶Ñ ‚Üí (f ‚àò (inv f) ‚â° id)
    inverse·µ£ ‚¶É proof ‚¶Ñ = [‚àß]-elim·µ£([‚àÉ]-proof(proof))

    -- Proposition stating that two objects are isomorphic.
    Isomorphic : Obj ‚Üí Obj ‚Üí Stmt
    Isomorphic(x)(y) = ‚àÉ(Isomorphism{x}{y})

  -- The empty category is a category containing nothing.
  -- The objects are empty.
  -- The morphisms are empty.
  emptyCategory : Category(Empty)(empty)
  Category._‚àò_           (emptyCategory) {}
  Category.id            (emptyCategory) {}
  Category.identity‚Çó     (emptyCategory) {}
  Category.identity·µ£     (emptyCategory) {}
  Category.associativity (emptyCategory) {}

  -- The single category is a category containing a single object.
  -- The objects consists of a single thing.
  -- The morphisms consists of a single connection connecting the single thing to itself.
  singleCategory : Category(Unit)(const(const Unit))
  Category._‚àò_           (singleCategory) <> <> = <>
  Category.id            (singleCategory) = <>
  Category.identity‚Çó     (singleCategory) = [‚â°]-intro
  Category.identity·µ£     (singleCategory) = [‚â°]-intro
  Category.associativity (singleCategory) = [‚â°]-intro

-- The set category is a category containing all sets/types of a single level in the language.
-- The objects are all sets/types.
-- The morphisms are all functions where the domain/codomain-pair are from these objects.
setCategory : ‚àÄ{‚Ñì} ‚Üí Category(Set(‚Ñì))(_‚Üí·∂†_)
Category._‚àò_           (setCategory) = _‚àòf_
Category.id            (setCategory) = idf
Category.identity‚Çó     (setCategory) = [‚â°]-intro
Category.identity·µ£     (setCategory) = [‚â°]-intro
Category.associativity (setCategory) = [‚â°]-intro

module _ {‚Ñì‚Çí‚ÇÅ}{‚Ñì‚Çò‚ÇÅ} {‚Ñì‚Çí‚ÇÇ}{‚Ñì‚Çò‚ÇÇ} where
  -- A covariant functor.
  -- A morphism between categories.
  -- "Preserves structure"
  record Functor
      {Obj‚ÇÅ : Set(‚Ñì‚Çí‚ÇÅ)}
      {Obj‚ÇÇ : Set(‚Ñì‚Çí‚ÇÇ)}
      {M‚ÇÅ : Obj‚ÇÅ ‚Üí Obj‚ÇÅ ‚Üí Set(‚Ñì‚Çò‚ÇÅ)}
      {M‚ÇÇ : Obj‚ÇÇ ‚Üí Obj‚ÇÇ ‚Üí Set(‚Ñì‚Çò‚ÇÇ)}
      (F : Obj‚ÇÅ ‚Üí Obj‚ÇÇ)
      (Category‚ÇÅ : Category Obj‚ÇÅ M‚ÇÅ)
      (Category‚ÇÇ : Category Obj‚ÇÇ M‚ÇÇ)
    : Set((‚Ñì‚Çí‚ÇÅ Lvl.‚äî ‚Ñì‚Çò‚ÇÅ) Lvl.‚äî (‚Ñì‚Çí‚ÇÇ Lvl.‚äî ‚Ñì‚Çò‚ÇÇ))
    where
    _‚àò‚ÇÅ_ = Category._‚àò_ (Category‚ÇÅ)
    _‚àò‚ÇÇ_ = Category._‚àò_ (Category‚ÇÇ)

    id‚ÇÅ = Category.id (Category‚ÇÅ)
    id‚ÇÇ = Category.id (Category‚ÇÇ)

    field
      -- Morphs/Transforms morphisms from category 1 to category 2
      map : ‚àÄ{x y} ‚Üí (M‚ÇÅ x y) ‚Üí (M‚ÇÇ(F x)(F y))

    field
      ‚¶É .[‚àò]-preserving ‚¶Ñ : ‚àÄ{x y z}{f : M‚ÇÅ y z}{g : M‚ÇÅ x y} ‚Üí (map(f ‚àò‚ÇÅ g) ‚â° map(f) ‚àò‚ÇÇ map(g))
      ‚¶É .id-preserving  ‚¶Ñ : ‚àÄ{x} ‚Üí (map(id‚ÇÅ{x}) ‚â° id‚ÇÇ)

    -- Morphs/Transforms objects from category 1 to category 2
    functor = F

    morphisms‚ÇÅ = M‚ÇÅ
    morphisms‚ÇÇ = M‚ÇÇ

    category‚ÇÅ = Category‚ÇÅ
    category‚ÇÇ = Category‚ÇÇ

  constantFunctor : ‚àÄ{Obj‚ÇÅ}{Obj‚ÇÇ}{M‚ÇÅ}{M‚ÇÇ} ‚Üí (obj‚ÇÇ : Obj‚ÇÇ) ‚Üí (cat‚ÇÅ : _) ‚Üí (cat‚ÇÇ : _) ‚Üí Functor{Obj‚ÇÅ}{Obj‚ÇÇ}{M‚ÇÅ}{M‚ÇÇ} (const(obj‚ÇÇ))(cat‚ÇÅ)(cat‚ÇÇ)
  Functor.map           (constantFunctor(obj‚ÇÇ) (_)(cat‚ÇÇ)) = const(Category.id(cat‚ÇÇ) {obj‚ÇÇ})
  Functor.[‚àò]-preserving(constantFunctor(obj‚ÇÇ) (_)(cat‚ÇÇ)) = symmetry (Category.identity‚Çó(cat‚ÇÇ))
  Functor.id-preserving (constantFunctor(obj‚ÇÇ) (_)(cat‚ÇÇ)) = [‚â°]-intro

{-module _ {‚Ñì‚Çí‚ÇÅ}{‚Ñì‚Çò‚ÇÅ} {‚Ñì‚Çí‚ÇÇ}{‚Ñì‚Çò‚ÇÇ} {‚Ñì‚Çí‚ÇÉ}{‚Ñì‚Çò‚ÇÉ} where
  compositionFunctor : ‚àÄ{Obj‚ÇÅ}{Obj‚ÇÇ}{Obj‚ÇÉ} {M‚ÇÅ}{M‚ÇÇ}{M‚ÇÉ} {cat‚ÇÅ}{cat‚ÇÇ}{cat‚ÇÉ} {F‚ÇÅ‚ÇÇ}{F‚ÇÇ‚ÇÉ}
                               ‚Üí Functor{‚Ñì‚Çí‚ÇÇ}{‚Ñì‚Çò‚ÇÇ} {‚Ñì‚Çí‚ÇÉ}{‚Ñì‚Çò‚ÇÉ} {Obj‚ÇÇ}{Obj‚ÇÉ}{M‚ÇÇ}{M‚ÇÉ} (F‚ÇÇ‚ÇÉ)(cat‚ÇÇ)(cat‚ÇÉ)
                               ‚Üí Functor{‚Ñì‚Çí‚ÇÅ}{‚Ñì‚Çò‚ÇÅ} {‚Ñì‚Çí‚ÇÇ}{‚Ñì‚Çò‚ÇÇ} {Obj‚ÇÅ}{Obj‚ÇÇ}{M‚ÇÅ}{M‚ÇÇ} (F‚ÇÅ‚ÇÇ)(cat‚ÇÅ)(cat‚ÇÇ)
                               ‚Üí Functor{‚Ñì‚Çí‚ÇÅ}{‚Ñì‚Çò‚ÇÅ} {‚Ñì‚Çí‚ÇÉ}{‚Ñì‚Çò‚ÇÉ} {Obj‚ÇÅ}{Obj‚ÇÉ}{M‚ÇÅ}{M‚ÇÉ} (F‚ÇÇ‚ÇÉ ‚àòf F‚ÇÅ‚ÇÇ)(cat‚ÇÅ)(cat‚ÇÉ)
  Functor.map           (compositionFunctor (functor‚ÇÇ‚ÇÉ)(functor‚ÇÅ‚ÇÇ)){x}{y} = (Functor.map(functor‚ÇÇ‚ÇÉ){Functor.functor(functor‚ÇÅ‚ÇÇ)(x)}{Functor.functor(functor‚ÇÅ‚ÇÇ)(y)}) ‚àòf (Functor.map(functor‚ÇÅ‚ÇÇ){x}{y})
  Functor.[‚àò]-preserving(compositionFunctor (functor‚ÇÇ‚ÇÉ)(functor‚ÇÅ‚ÇÇ)) =
    ([‚â°]-with-[(expr ‚Ü¶ Functor.map(functor‚ÇÇ‚ÇÉ)(expr))]
      (Functor.[‚àò]-preserving(functor‚ÇÅ‚ÇÇ))
    )
    üùñ (Functor.[‚àò]-preserving(functor‚ÇÇ‚ÇÉ))
  Functor.id-preserving (compositionFunctor (functor‚ÇÇ‚ÇÉ)(functor‚ÇÅ‚ÇÇ)) =
    ([‚â°]-with-[(expr ‚Ü¶ Functor.map(functor‚ÇÇ‚ÇÉ)(expr))]
      (Functor.id-preserving(functor‚ÇÅ‚ÇÇ))
    )
    üùñ (Functor.id-preserving(functor‚ÇÇ‚ÇÉ))-}
  -- ‚Ä¢ {
  --     map‚ÇÅ‚ÇÇ(f ‚àò‚ÇÅ g) ‚â° map‚ÇÅ‚ÇÇ(f) ‚àò‚ÇÇ map‚ÇÅ‚ÇÇ(g)
  --     map‚ÇÇ‚ÇÉ(map‚ÇÅ‚ÇÇ(f ‚àò‚ÇÅ g)) ‚â° map‚ÇÇ‚ÇÉ(map‚ÇÅ‚ÇÇ(f) ‚àò‚ÇÇ map‚ÇÅ‚ÇÇ(g))
  -- }
  -- ‚Ä¢ map‚ÇÇ‚ÇÉ(f ‚àò‚ÇÇ g) ‚â° map‚ÇÇ‚ÇÉ(f) ‚àò‚ÇÉ map‚ÇÇ‚ÇÉ(g)
  -- ‚áí map‚ÇÇ‚ÇÉ(map‚ÇÅ‚ÇÇ(f ‚àò‚ÇÅ g)) ‚â° map‚ÇÇ‚ÇÉ(map‚ÇÅ‚ÇÇ(f)) ‚àò‚ÇÇ map‚ÇÇ‚ÇÉ(map‚ÇÅ‚ÇÇ(g))

module _ {‚Ñì‚Çí}{‚Ñì‚Çò} where
  -- A covariant functor from a category to itself
  EndoFunctor : ‚àÄ{Obj : Set(‚Ñì‚Çí)} {M : Obj ‚Üí Obj ‚Üí Set(‚Ñì‚Çò)} ‚Üí (Obj ‚Üí Obj) ‚Üí Category(Obj)(M) ‚Üí Set(‚Ñì‚Çí Lvl.‚äî ‚Ñì‚Çò)
  EndoFunctor {Obj}{M} (F) (Category) = Functor {‚Ñì‚Çí}{‚Ñì‚Çò}{‚Ñì‚Çí}{‚Ñì‚Çò} {Obj}{Obj} {M}{M} (F) (Category)(Category)

  identityFunctor : ‚àÄ{Obj}{M} ‚Üí (cat : _) ‚Üí EndoFunctor{Obj}{M} (Functional.id)(cat)
  Functor.map           (identityFunctor(_)) = Functional.id
  Functor.[‚àò]-preserving(identityFunctor(_)) = [‚â°]-intro
  Functor.id-preserving (identityFunctor(_)) = [‚â°]-intro

{-
categoryCategory : ‚àÄ{‚Ñì} ‚Üí Category(Category(F))(Functor)
Category._‚àò_           (categoryCategory) = compositionFunctor
Category.id            (categoryCategory) = identityFunctor
Category.identity‚Çó     (categoryCategory) = [‚â°]-intro
Category.identity·µ£     (categoryCategory) = [‚â°]-intro
Category.associativity (categoryCategory) = [‚â°]-intro
-}

{-
record Category (Obj : Set) (M : Set) : Set where
  field
    domain   : M ‚Üí Obj
    codomain : M ‚Üí Obj

  field
    composition : ‚àÄ{f g : M} ‚Üí ‚¶É _ : codomain(f) ‚â° domain(g) ‚¶Ñ ‚Üí ‚àÉ(h ‚Ü¶ (domain(h) ‚â° domain(f)) ‚àß (codomain(h) ‚â° codomain(g)))

  _‚àò_ : (g : M) ‚Üí (f : M) ‚Üí ‚¶É _ : codomain(f) ‚â° domain(g) ‚¶Ñ ‚Üí M
  _‚àò_ g f ‚¶É proof ‚¶Ñ = [‚àÉ]-witness(composition ‚¶É proof ‚¶Ñ)

  field
    identity      : ‚àÉ(id ‚Ü¶ (domain(id) ‚â° codomain(id)) ‚àß (‚àÄ{f} ‚Üí ‚¶É _ : codomain(id) ‚â° domain(f) ‚¶Ñ ‚Üí (f ‚àò id ‚â° f)) ‚àß (‚àÄ{f} ‚Üí ‚¶É _ : codomain(f) ‚â° domain(id) ‚¶Ñ ‚Üí (id ‚àò f ‚â° f)))
    associativity : ‚àÄ{f g h} ‚Üí ‚¶É _ : codomain(h) ‚â° domain(g) ‚¶Ñ ‚Üí ‚¶É _ : codomain(g) ‚â° domain(f) ‚¶Ñ ‚Üí (f ‚àò (g ‚àò h) ‚â° (f ‚àò g) ‚àò h)
-}
