import      Lvl

module Structure.Category {‚Ñì‚Çí ‚Ñì‚Çò ‚Ñì‚Çë : Lvl.Level} where

open import Functional using (swap)
open import Logic
open import Logic.Propositional
import      Structure.Categorical.Names as Names
open import Structure.Categorical.Properties
open import Structure.Semicategory{‚Ñì‚Çí}{‚Ñì‚Çò}{‚Ñì‚Çë}
open import Structure.Operator
import      Structure.Relator.Names as Names
open import Structure.Relator.Properties
open import Structure.Setoid.WithLvl
open import Type

-- Obj is the collection of objects.
-- _‚ü∂_ is the collection of morphisms.
module _
  {Obj : Type{‚Ñì‚Çí}}
  (_‚ü∂_ : Obj ‚Üí Obj ‚Üí Type{‚Ñì‚Çò})
  ‚¶É morphism-equiv : ‚àÄ{x y} ‚Üí Equiv{‚Ñì‚Çë}(x ‚ü∂ y) ‚¶Ñ
  where

  -- A category is a structure on a relation called a morphism.
  --
  -- It can be seen as a generalization of the structure in functions between a collection of types/sets.
  -- More specifically, the algebraic properties of functions regarding composition and the identity function.
  -- In this case, sets are objects and functions are morphisms.
  -- See `Type.Category`.
  --
  -- It can also be seen as a generalized algebraic structure, or more specifically a generalization of monoids.
  -- The type of a monoid's operator is usually restricted to a single type, but a category allows it to vary (depending on the rules of morphism instead).
  -- (One can loosely call a category to be a monoid without the "closed" property of algebraic structures).
  -- In this case, the binary operation is (_‚àò_) and the laws are the usual identity and associative laws.
  -- See `Structure.Category.Monoid`.
  --
  -- A category can also be constructed by letting objects be the models of algebraic structures, and morphisms the homomorphisms of the respective algebraic structure.
  --
  -- In the case of categories being the objects in a category, functors are homomorphisms, and therefore also the morphisms.
  -- See `Structure.Category.Category`.
  --
  -- An alternative interpretation of the definition:
  -- A type (Obj) and a binary relation (Morphism) on this type is a category when:
  -- ‚Ä¢ The relator is transitive.
  -- ‚Ä¢ The relator is reflexive.
  -- ‚Ä¢ The reflexivity proof inside the transitivity proof does not result in a new proof.
  -- ‚Ä¢ Chains of the transitivity proofs can be applied in any order and the resulting proof will be the same.
  -- See `Relator.Equals.Category` for an example of this kind of binary relation.
  --
  -- A more concrete interpretation of the binary relation one is that a category describes a graph.
  -- Vertices are objects and morphisms are paths between the vertices.
  -- The operator joins two paths into one, and the identity is a loop (the empty path).
  -- See `Graph.Category`.
  --
  -- A category is the common pattern seen in all the examples above.
  record Category : Stmt{‚Ñì‚Çí Lvl.‚äî ‚Ñì‚Çò Lvl.‚äî ‚Ñì‚Çë} where
    field
      -- Existence of morphisms constructed by connecting two morphisms (The composition of two morphisms).
      -- Existence of a binary operator on morphisms connecting the ends of two morphisms.
      -- Also a proof of transitivity for the binary relator (_‚ü∂_).
      -- Note that this is the operator like the operators in other algebraic structures with binary operators
      -- ‚àÄ{x y z : Obj} ‚Üí (y ‚ü∂ z) ‚Üí (x ‚ü∂ y) ‚Üí (x ‚ü∂ z)
      _‚àò_ : Names.SwappedTransitivity(_‚ü∂_)

      -- Existence of a morphism connected to itself (The identity morphism).
      -- Also a proof of reflexivity for the binary relator (_‚ü∂_).
      -- ‚àÄ{x : Obj} ‚Üí (x ‚ü∂ x)
      id  : Names.Reflexivity(_‚ü∂_)
    infixr 20 _‚àò_

    field
      -- The binary operator respects the equivalence relation.
      ‚¶É binaryOperator ‚¶Ñ : ‚àÄ{x y z} ‚Üí BinaryOperator(_‚àò_ {x}{y}{z})

      -- The binary operator on mophisms is associative.
      -- Or, the order of applying two transitivies on three proofs does not matter. It is the same proof.
      -- ‚àÄ{x y z w : Obj}{f : y ‚ü∂ x}{g : z ‚ü∂ y}{h : w ‚ü∂ z} ‚Üí ((f ‚àò g) ‚àò h ‚â° f ‚àò (g ‚àò h))
      ‚¶É associativity ‚¶Ñ : Morphism.Associativity(\{x} ‚Üí _‚àò_ {x})

      -- The morphism `id` behaves like aa identity element with respect to the binary operator.
      -- Or, applying the proof of reflexivity on transitivity is an identity function for proofs.
      ‚¶É identity ‚¶Ñ : Morphism.Identity(_‚àò_)(\{x} ‚Üí id{x})

    instance
      identity‚Çó : Morphism.Identity‚Çó(_‚àò_)(\{x} ‚Üí id{x})
      identity‚Çó = [‚àß]-elim‚Çó identity

    instance
      identity·µ£ : Morphism.Identity·µ£(_‚àò_)(\{x} ‚Üí id{x})
      identity·µ£ = [‚àß]-elim·µ£ identity

    -- As stated in `id`, this can be interpreted as proof of reflexivity when `Morphism` is interpreted as a binary relation.
    morphism-reflexivity : Reflexivity(_‚ü∂_)
    morphism-reflexivity = intro id

    semicategory : Semicategory(_‚ü∂_)
    Semicategory._‚àò_ semicategory = _‚àò_
    Semicategory.binaryOperator semicategory = binaryOperator
    Semicategory.associativity semicategory = associativity

    open Semicategory(semicategory) hiding (_‚àò_ ; binaryOperator ; associativity) public

-- A category object can be used when one refers to a category as an object.
-- Examples of usage are in functors (morphism between categories) or in equivalences of categories.
record CategoryObject : Stmt{Lvl.ùêí(‚Ñì‚Çí Lvl.‚äî ‚Ñì‚Çò Lvl.‚äî ‚Ñì‚Çë)} where
  constructor intro
  field
    {Object}           : Type{‚Ñì‚Çí}
    {Morphism}         : Object ‚Üí Object ‚Üí Type{‚Ñì‚Çò}
    ‚¶É morphism-equiv ‚¶Ñ : ‚àÄ{x y} ‚Üí Equiv{‚Ñì‚Çë}(Morphism x y)
    category           : Category(Morphism)

  instance
    category-instance = category
