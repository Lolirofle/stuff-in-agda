module Structure.Function.Domain.Proofs where

import      Lvl
open import Functional
open import Function.Domains
open import Function.Equals
import      Function.Names as Names
open import Lang.Instance
open import Logic
open import Logic.Propositional
open import Logic.Predicate
open import Structure.Setoid.WithLvl
open import Structure.Setoid.Uniqueness
open import Structure.Function.Domain
open import Structure.Relator.Properties
open import Structure.Relator
open import Syntax.Transitivity
open import Type

private variable ‚Ñì‚Çí‚ÇÅ ‚Ñì‚Çí‚ÇÇ ‚Ñì‚Çë‚ÇÅ ‚Ñì‚Çë‚ÇÇ : Lvl.Level

module _ {A : Type{‚Ñì‚Çí‚ÇÅ}} ‚¶É _ : Equiv{‚Ñì‚Çë‚ÇÅ}(A) ‚¶Ñ {B : Type{‚Ñì‚Çí‚ÇÇ}} ‚¶É _ : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ (f : A ‚Üí B) where
  injective-to-unique : Injective(f) ‚Üí ‚àÄ{y} ‚Üí Unique(x ‚Ü¶ f(x) ‚â° y)
  injective-to-unique (intro(inj)) {y} {x‚ÇÅ}{x‚ÇÇ} fx‚ÇÅy fx‚ÇÇy =
    inj{x‚ÇÅ}{x‚ÇÇ} (fx‚ÇÅy üùñ symmetry(_‚â°_) fx‚ÇÇy)

  instance
    bijective-to-injective : ‚¶É bij : Bijective(f) ‚¶Ñ ‚Üí Injective(f)
    Injective.proof(bijective-to-injective ‚¶É intro(bij) ‚¶Ñ) {x‚ÇÅ}{x‚ÇÇ} (fx‚ÇÅfx‚ÇÇ) =
      ([‚àÉ!]-existence-eq (bij {f(x‚ÇÇ)}) {x‚ÇÅ} (fx‚ÇÅfx‚ÇÇ))
      üùñ symmetry(_‚â°_) ([‚àÉ!]-existence-eq (bij {f(x‚ÇÇ)}) {x‚ÇÇ} (reflexivity(_‚â°_)))
    -- ‚àÄ{y : B} ‚Üí ‚àÉ!(x ‚Ü¶ f(x) ‚â° y)
    -- ‚àÉ!(x ‚Ü¶ f(x) ‚â° f(x‚ÇÇ))
    -- ‚àÄ{x} ‚Üí (f(x) ‚â° f(x‚ÇÇ)) ‚Üí (x ‚â° [‚àÉ!]-witness e)
    -- (f(x‚ÇÅ) ‚â° f(x‚ÇÇ)) ‚Üí (x‚ÇÅ ‚â° [‚àÉ!]-witness e)
    --
    -- ‚àÄ{y : B} ‚Üí ‚àÉ!(x ‚Ü¶ f(x) ‚â° y)
    -- ‚àÉ!(x ‚Ü¶ f(x) ‚â° f(x‚ÇÇ))
    -- ‚àÄ{x} ‚Üí (f(x) ‚â° f(x‚ÇÇ)) ‚Üí (x ‚â° [‚àÉ!]-witness e)
    -- (f(x‚ÇÇ) ‚â° f(x‚ÇÇ)) ‚Üí (x‚ÇÇ ‚â° [‚àÉ!]-witness e)

  instance
    bijective-to-surjective : ‚¶É bij : Bijective(f) ‚¶Ñ ‚Üí Surjective(f)
    Surjective.proof(bijective-to-surjective ‚¶É intro(bij) ‚¶Ñ) {y} =
      [‚àÉ!]-existence (bij {y})

  instance
    injective-surjective-to-bijective : ‚¶É inj : Injective(f) ‚¶Ñ ‚Üí ‚¶É surj : Surjective(f) ‚¶Ñ ‚Üí Bijective(f)
    Bijective.proof(injective-surjective-to-bijective ‚¶É inj ‚¶Ñ ‚¶É intro(surj) ‚¶Ñ) {y} =
      [‚àÉ!]-intro surj (injective-to-unique inj)

  injective-surjective-bijective-equivalence : (Injective(f) ‚àß Surjective(f)) ‚Üî Bijective(f)
  injective-surjective-bijective-equivalence =
    [‚Üî]-intro
      (\bij ‚Üí [‚àß]-intro (bijective-to-injective ‚¶É bij = bij ‚¶Ñ) (bijective-to-surjective ‚¶É bij = bij ‚¶Ñ))
      (\{([‚àß]-intro inj surj) ‚Üí injective-surjective-to-bijective ‚¶É inj = inj ‚¶Ñ ‚¶É surj = surj ‚¶Ñ})

module _ {A : Type{‚Ñì‚Çí‚ÇÅ}} ‚¶É equiv-A : Equiv{‚Ñì‚Çë‚ÇÅ}(A) ‚¶Ñ {B : Type{‚Ñì‚Çí‚ÇÇ}} ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ where
  instance
    injective-relator : UnaryRelator(Injective{A = A}{B = B})
    Injective.proof (UnaryRelator.substitution injective-relator {f‚ÇÅ}{f‚ÇÇ} (intro f‚ÇÅf‚ÇÇ) (intro inj-f‚ÇÅ)) f‚ÇÇxf‚ÇÇy = inj-f‚ÇÅ (f‚ÇÅf‚ÇÇ üùñ f‚ÇÇxf‚ÇÇy üùñ symmetry(_‚â°_) f‚ÇÅf‚ÇÇ)

module _ {A : Type{‚Ñì‚Çí‚ÇÅ}} {B : Type{‚Ñì‚Çí‚ÇÇ}} ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ where
  instance
    surjective-relator : UnaryRelator(Surjective{A = A}{B = B})
    Surjective.proof (UnaryRelator.substitution surjective-relator {f‚ÇÅ}{f‚ÇÇ} (intro f‚ÇÅf‚ÇÇ) (intro surj-f‚ÇÅ)) {y} = [‚àÉ]-map-proof (\{x} f‚ÇÅxf‚ÇÅy ‚Üí symmetry(_‚â°_) (f‚ÇÅf‚ÇÇ{x}) üùñ f‚ÇÅxf‚ÇÅy) (surj-f‚ÇÅ{y})
