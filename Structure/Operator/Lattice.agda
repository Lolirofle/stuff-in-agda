open import Type
open import Sets.Setoid

module Structure.Operator.Lattice {โ} (L : Type{โ}) โฆ equiv-L : Equiv(L) โฆ where

import      Lvl
open import Functional
open import Logic
open import Logic.Propositional
open import Structure.Operator.Properties
open import Structure.Relator.Ordering
open import Structure.Relator.Properties
open import Syntax.Transitivity

record Semilattice (_โซ_ : L โ L โ L) : Stmt{โ} where
  constructor intro
  field
    โฆ operator โฆ     : BinaryOperator(_โซ_)
    โฆ commutative โฆ  : Commutativity(_โซ_)
    โฆ associative โฆ  : Associativity(_โซ_)
    โฆ idempotent โฆ   : Idempotence(_โซ_)

  partialOrder : Weak.PartialOrder(x โฆ y โฆ x โซ y โก y)(_โก_)
  Antisymmetry.proof (Weak.PartialOrder.antisymmetry partialOrder) {x}{y} xy yx =
    x     ๐-[ symmetry(_โก_) yx ]
    y โซ x ๐-[ commutativity(_โซ_) ]
    x โซ y ๐-[ xy ]
    y     ๐-end
  Transitivity.proof (Weak.PartialOrder.transitivity partialOrder) {x}{y}{z} xy yz =
    x โซ z       ๐-[ [โก]-with2แตฃ(_โซ_)(_) (symmetry(_โก_) yz) ]
    x โซ (y โซ z) ๐-[ symmetry(_โก_) (associativity(_โซ_)) ]
    (x โซ y) โซ z ๐-[ [โก]-with2โ(_โซ_)(_) xy ]
    y โซ z       ๐-[ yz ]
    z           ๐-end
  Reflexivity.proof  (Weak.PartialOrder.reflexivity  partialOrder) = idempotence(_โซ_)

record Lattice (_โจ_ : L โ L โ L) (_โง_ : L โ L โ L) : Stmt{โ} where
  constructor intro
  field
    โฆ [โจ]-operator โฆ : BinaryOperator(_โจ_)
    โฆ [โง]-operator โฆ : BinaryOperator(_โง_)

    โฆ [โจ]-commutativity โฆ : Commutativity(_โจ_)
    โฆ [โง]-commutativity โฆ : Commutativity(_โง_)

    โฆ [โจ]-associativity โฆ : Associativity(_โจ_)
    โฆ [โง]-associativity โฆ : Associativity(_โง_)

    โฆ [โจ][โง]-absorptionโ โฆ : Absorptionโ(_โจ_)(_โง_)
    โฆ [โง][โจ]-absorptionโ โฆ : Absorptionโ(_โง_)(_โจ_)

  instance
    [โจ][โง]-absorptionแตฃ : Absorptionแตฃ(_โจ_)(_โง_)
    Absorptionแตฃ.proof [โจ][โง]-absorptionแตฃ {x}{y} =
      (x โง y) โจ y ๐-[ commutativity(_โจ_) ]
      y โจ (x โง y) ๐-[ [โก]-with2แตฃ(_โจ_)(_) (commutativity(_โง_)) ]
      y โจ (y โง x) ๐-[ absorptionโ(_โจ_)(_โง_) {y}{x} ]
      y           ๐-end

  instance
    [โจ]-idempotence : Idempotence(_โจ_)
    Idempotence.proof [โจ]-idempotence {x} =
      x โจ x             ๐-[ [โก]-with2แตฃ(_โจ_)(_) (symmetry(_โก_) (absorptionโ(_โง_)(_โจ_))) ]
      x โจ (x โง (x โจ x)) ๐-[ absorptionโ(_โจ_)(_โง_) ]
      x                 ๐-end

  instance
    [โง][โจ]-absorptionแตฃ : Absorptionแตฃ(_โง_)(_โจ_)
    Absorptionแตฃ.proof [โง][โจ]-absorptionแตฃ {x}{y} =
      (x โจ y) โง y ๐-[ commutativity(_โง_) ]
      y โง (x โจ y) ๐-[ [โก]-with2แตฃ(_โง_)(_) (commutativity(_โจ_)) ]
      y โง (y โจ x) ๐-[ absorptionโ(_โง_)(_โจ_) {y}{x} ]
      y           ๐-end

  instance
    [โง]-idempotence : Idempotence(_โง_)
    Idempotence.proof [โง]-idempotence {x} =
      x โง x             ๐-[ [โก]-with2แตฃ(_โง_)(_) (symmetry(_โก_) (absorptionโ(_โจ_)(_โง_))) ]
      x โง (x โจ (x โง x)) ๐-[ absorptionโ(_โง_)(_โจ_) ]
      x                 ๐-end

  record Bounded (๐ : L) (๐ : L) : Stmt{โ} where
    constructor intro
    field
      โฆ [โจ]-identityโ โฆ : Identityโ(_โจ_)(๐)
      โฆ [โง]-identityโ โฆ : Identityโ(_โง_)(๐)

    record Complemented (ยฌ_ : L โ L) : Stmt{โ} where
      constructor intro
      field
        excluded-middle   : โ{x} โ (x โจ (ยฌ x) โก ๐)
        non-contradiction : โ{x} โ (x โง (ยฌ x) โก ๐)

  record Distributive : Stmt{โ} where
    constructor intro
    field
      โฆ [โจ][โง]-distributivityโ โฆ : Distributivityโ(_โจ_)(_โง_)
      โฆ [โง][โจ]-distributivityโ โฆ : Distributivityโ(_โง_)(_โจ_)

  record Negatable (ยฌ_ : L โ L) : Stmt{โ} where
    constructor intro
    field
      โฆ [ยฌ]-function โฆ : Function(ยฌ_)
      [ยฌ]-involution : โ{x} โ (ยฌ(ยฌ x) โก x)
      [ยฌ][โง][โจ]-distributivity : โ{x y} โ (ยฌ(x โง y) โก (ยฌ x) โจ (ยฌ y))

    [ยฌ][โจ][โง]-distributivity : โ{x y} โ (ยฌ(x โจ y) โก (ยฌ x) โง (ยฌ y))
    [ยฌ][โจ][โง]-distributivity {x}{y} =
      ยฌ(x โจ y)               ๐-[ [โก]-with(ยฌ_) ([โก]-with2(_โจ_) (symmetry(_โก_) [ยฌ]-involution) (symmetry(_โก_) [ยฌ]-involution)) ]
      ยฌ((ยฌ(ยฌ x)) โจ (ยฌ(ยฌ y))) ๐-[ [โก]-with(ยฌ_) (symmetry(_โก_) [ยฌ][โง][โจ]-distributivity) ]
      ยฌ(ยฌ((ยฌ x) โง (ยฌ y)))    ๐-[ [ยฌ]-involution ]
      (ยฌ x) โง (ยฌ y)          ๐-end

-- Also called: De Morgan algebra
record MorganicAlgebra (_โจ_ : L โ L โ L) (_โง_ : L โ L โ L) (ยฌ_ : L โ L) (โฅ : L) (โค : L) : Stmt{โ} where
  constructor intro
  field
    โฆ lattice โฆ             : Lattice(_โจ_)(_โง_)
    โฆ boundedLattice โฆ      : Lattice.Bounded(lattice)(โฅ)(โค)
    โฆ distributiveLattice โฆ : Lattice.Distributive(lattice)
    โฆ negatableLattice โฆ    : Lattice.Negatable(lattice)(ยฌ_)

record BooleanAlgebra (_โจ_ : L โ L โ L) (_โง_ : L โ L โ L) (ยฌ_ : L โ L) (โฅ : L) (โค : L) : Stmt{โ} where
  constructor intro
  field
    โฆ lattice โฆ             : Lattice(_โจ_)(_โง_)
    โฆ boundedLattice โฆ      : Lattice.Bounded(lattice)(โฅ)(โค)
    โฆ complementedLattice โฆ : Lattice.Bounded.Complemented(boundedLattice)(ยฌ_)
    โฆ distributiveLattice โฆ : Lattice.Distributive(lattice)

-- TODO: Import some proofs from SetAlgebra
