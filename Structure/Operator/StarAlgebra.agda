module Structure.Operator.StarAlgebra where

open import Logic.Predicate
import      Lvl
open import Structure.Operator
open import Structure.Operator.Algebra
open import Structure.Operator.Monoid
open import Structure.Operator.Properties
open import Structure.Operator.Ring
open import Structure.Operator.Vector
open import Structure.Operator.Vector.BilinearOperator
open import Structure.Operator.Vector.LinearMap
open import Structure.Setoid
open import Type

open import Structure.Function.Domain
open import Structure.Operator.Ring.Homomorphism

module _
  {โแตฅ โโ โแตฅโ โโโ}
  {V : Type{โแตฅ}} โฆ equiv-V : Equiv{โแตฅโ}(V) โฆ
  {S : Type{โโ}} โฆ equiv-S : Equiv{โโโ}(S) โฆ
  (_+แตฅ_ : V โ V โ V)
  (_โแตฅ_ : V โ V โ V)
  (_โแตฅ : V โ V)
  (_โโแตฅ_ : S โ V โ V)
  (_+โ_ : S โ S โ S)
  (_โโ_ : S โ S โ S)
  (_โโ : S โ S)
  {โแตฅโโ โโโโ}
  where

  record โ-algebra : Type{โโโ Lvl.โ โโ Lvl.โ โแตฅโ Lvl.โ โแตฅ Lvl.โ Lvl.๐(โแตฅโโ Lvl.โ โโโโ)} where
    constructor intro
    field
      โฆ algebra โฆ : Algebra(_+แตฅ_)(_โแตฅ_)(_โโแตฅ_)(_+โ_)(_โโ_) {โแตฅโโ}{โโโโ}
    open Algebra(algebra) public

    field
      โฆ [โแตฅ]-binaryOperator โฆ   : BinaryOperator(_โแตฅ_)
      -- TODO: Do not require assoc and ident
      โฆ [โแตฅ]-associativity โฆ    : Associativity(_โแตฅ_)
      โฆ [โแตฅ]-identity โฆ         : โ(Identity(_โแตฅ_))

      โฆ [โโ]-involution โฆ       : Involution(_โโ)
      โฆ [โโ]-antihomomorphism โฆ : Antihomomorphism scalarRing scalarRing (_โโ)

      โฆ [โแตฅ]-involution โฆ       : Involution(_โแตฅ)
      โฆ [โแตฅ]-antihomomorphism โฆ : Antihomomorphism vectorRing vectorRing (_โแตฅ)

      [โ]-preserves-[โโแตฅ] : โ{s}{v} โ ((s โโแตฅ v)โแตฅ โก (s โโ) โโแตฅ (v โแตฅ))

    instance
      [โแตฅ]-monoid : Monoid(_โแตฅ_)
      [โแตฅ]-monoid = record{}
    open Monoid([โแตฅ]-monoid)
      using()
      renaming(
        id to ๐แตฅ ;
        identityโ to [โแตฅ]-identityโ ;
        identityแตฃ to [โแตฅ]-identityแตฃ
      ) public

open import Data.Tuple
open import Data.Tuple.Equivalence
open import Structure.Function
-- open import Structure.Operator.Ring.Proofs
open import Syntax.Transitivity

private variable โแตฅ โโ โแตฅโ โโโ โแตฅโโ โโโโ : Lvl.Level
private variable V : Type{โแตฅ}
private variable S : Type{โโ}
private variable _+แตฅ_ _โแตฅ_ : V โ V โ V
private variable _โแตฅ : V โ V
private variable _โโแตฅ_ : S โ V โ V
private variable _+โ_ _โโ_ : S โ S โ S
private variable _โโ : S โ S

-- Also called: General CayleyโDickson construction.
-- Source: https://en.wikipedia.org/wiki/Cayley%E2%80%93Dickson_construction#General_Cayley%E2%80%93Dickson_construction (20210610)
module ComplexConstruction
  โฆ equiv-V : Equiv{โแตฅโ}(V) โฆ
  โฆ equiv-S : Equiv{โโโ}(S) โฆ
  โฆ starAlgebra : โ-algebra โฆ equiv-V โฆ โฆ equiv-S โฆ (_+แตฅ_)(_โแตฅ_)(_โแตฅ)(_โโแตฅ_)(_+โ_)(_โโ_)(_โโ) {โแตฅโโ}{โโโโ} โฆ
  where

  open โ-algebra(starAlgebra)

  Vector = V โจฏ V

  _+_ : Vector โ Vector โ Vector
  (xโ , xโ) + (yโ , yโ) = ((xโ +แตฅ yโ) , (xโ +แตฅ yโ))
  
  _โ_ : Vector โ Vector โ Vector
  (xโ , xโ) โ (yโ , yโ) = (((xโ โแตฅ yโ) โแตฅ ((yโ โแตฅ) โแตฅ xโ)) , ((yโ โแตฅ xโ) +แตฅ (xโ โแตฅ (yโ โแตฅ))))
  
  _โ : Vector โ Vector
  (xโ , xโ)โ = ((xโ โแตฅ) , (โแตฅ xโ))

  ๐ : Vector
  ๐ = (๐แตฅ , ๐แตฅ)

  [โ]-identityโ : Identityโ(_โ_)(๐)
  left (Identityโ.proof [โ]-identityโ {xโ , xโ}) =
    (๐แตฅ โแตฅ xโ) โแตฅ ((xโ โแตฅ) โแตฅ ๐แตฅ) ๐[ _โก_ ]-[ congruenceโ(_โแตฅ_) โฆ {!!} โฆ (identityโ(_โแตฅ_)(๐แตฅ)) (absorberแตฃ(_โแตฅ_)(๐แตฅ) โฆ {!!} โฆ) ]
    xโ โแตฅ ๐แตฅ                      ๐[ _โก_ ]-[ identityแตฃ(_โแตฅ_)(๐แตฅ) โฆ {!!} โฆ ]
    xโ                            ๐-end
  right (Identityโ.proof [โ]-identityโ {xโ , xโ}) =
    (xโ โแตฅ ๐แตฅ) +แตฅ (๐แตฅ โแตฅ (xโ โแตฅ)) ๐[ _โก_ ]-[ congruenceโ(_+แตฅ_) (identityแตฃ(_โแตฅ_)(๐แตฅ)) (absorberโ(_โแตฅ_)(๐แตฅ) โฆ {!!} โฆ) ]
    xโ +แตฅ ๐แตฅ                      ๐[ _โก_ ]-[ identityแตฃ(_+แตฅ_)(๐แตฅ) ]
    xโ                            ๐-end

  [โ]-identityแตฃ : Identityแตฃ(_โ_)(๐)
  left (Identityแตฃ.proof [โ]-identityแตฃ {xโ , xโ}) = {!!}
  right (Identityแตฃ.proof [โ]-identityแตฃ {xโ , xโ}) = {!!}

  [โแตฅ][โแตฅ]โ-move : โ{x y} โ ((x โแตฅ) โแตฅ y โก ((y โแตฅ) โแตฅ x)โแตฅ)
  [โแตฅ][โแตฅ]โ-move {x}{y} =
    (x โแตฅ) โแตฅ y          ๐[ _โก_ ]-[ congruenceโแตฃ(_โแตฅ_)(x โแตฅ) (involution(_โแตฅ)) ]-sym
    (x โแตฅ) โแตฅ ((y โแตฅ)โแตฅ) ๐[ _โก_ ]-[ Antihomomorphism.antipreserve-[โ] [โแตฅ]-antihomomorphism ]-sym
    ((y โแตฅ) โแตฅ x)โแตฅ      ๐-end

  [โแตฅ][โแตฅ]แตฃ-move : โ{x y} โ (x โแตฅ (y โแตฅ) โก (y โแตฅ (x โแตฅ))โแตฅ)
  [โแตฅ][โแตฅ]แตฃ-move {x}{y} =
    x โแตฅ (y โแตฅ)          ๐[ _โก_ ]-[ congruenceโโ(_โแตฅ_)(y โแตฅ) (involution(_โแตฅ)) ]-sym
    ((x โแตฅ)โแตฅ) โแตฅ (y โแตฅ) ๐[ _โก_ ]-[ Antihomomorphism.antipreserve-[โ] [โแตฅ]-antihomomorphism ]-sym
    (y โแตฅ (x โแตฅ))โแตฅ      ๐-end

  [โ]-commutativity : (โ{x} โ ((x โแตฅ) โก x)) โ โฆ commแตฅ : Commutativity(_โแตฅ_) โฆ โ Commutativity(_โ_)
  left (Commutativity.proof ([โ]-commutativity [โแตฅ]-is-id) {xโ , xโ} {yโ , yโ}) =
    (xโ โแตฅ yโ) โแตฅ ((yโ โแตฅ) โแตฅ xโ) ๐[ _โก_ ]-[ congruenceโแตฃ(_โแตฅ_) โฆ {!!} โฆ (xโ โแตฅ yโ) (congruenceโโ(_โแตฅ_)(xโ) [โแตฅ]-is-id) ]
    (xโ โแตฅ yโ) โแตฅ (yโ โแตฅ xโ)      ๐[ _โก_ ]-[ congruenceโ(_โแตฅ_) โฆ {!!} โฆ (commutativity(_โแตฅ_)) (commutativity(_โแตฅ_)) ]
    (yโ โแตฅ xโ) โแตฅ (xโ โแตฅ yโ)      ๐[ _โก_ ]-[ congruenceโแตฃ(_โแตฅ_) โฆ {!!} โฆ (yโ โแตฅ xโ) (congruenceโโ(_โแตฅ_)(yโ) [โแตฅ]-is-id) ]-sym
    (yโ โแตฅ xโ) โแตฅ ((xโ โแตฅ) โแตฅ yโ) ๐-end
  right (Commutativity.proof ([โ]-commutativity [โแตฅ]-is-id) {xโ , xโ} {yโ , yโ}) =
    (yโ โแตฅ xโ) +แตฅ (xโ โแตฅ (yโ โแตฅ)) ๐[ _โก_ ]-[ congruenceโแตฃ(_+แตฅ_)(yโ โแตฅ xโ) (congruenceโแตฃ(_โแตฅ_)(xโ) [โแตฅ]-is-id) ]
    (yโ โแตฅ xโ) +แตฅ (xโ โแตฅ yโ)      ๐[ _โก_ ]-[ commutativity(_+แตฅ_) ]
    (xโ โแตฅ yโ) +แตฅ (yโ โแตฅ xโ)      ๐[ _โก_ ]-[ congruenceโแตฃ(_+แตฅ_)(xโ โแตฅ yโ) (congruenceโแตฃ(_โแตฅ_)(yโ) [โแตฅ]-is-id) ]-sym
    (xโ โแตฅ yโ) +แตฅ (yโ โแตฅ (xโ โแตฅ)) ๐-end

  [โ]-associativity : โฆ commแตฅ : Commutativity(_โแตฅ_) โฆ {- โฆ assocแตฅ : Associativity(_โแตฅ_) โฆ -} โ Associativity(_โ_)
  left (Associativity.proof [โ]-associativity {xโ , xโ}{yโ , yโ}{zโ , zโ}) =
    (((xโ โแตฅ yโ) โแตฅ ((yโ โแตฅ) โแตฅ xโ)) โแตฅ zโ) โแตฅ ((zโ โแตฅ) โแตฅ ((yโ โแตฅ xโ) +แตฅ (xโ โแตฅ (yโ โแตฅ)))) ๐[ _โก_ ]-[ congruenceโ(_โแตฅ_) โฆ {!!} โฆ (distributivityแตฃ(_โแตฅ_)(_โแตฅ_) โฆ {!!} โฆ) (distributivityโ(_โแตฅ_)(_+แตฅ_)) ]
    (((xโ โแตฅ yโ) โแตฅ zโ) โแตฅ (((yโ โแตฅ) โแตฅ xโ) โแตฅ zโ)) โแตฅ (((zโ โแตฅ) โแตฅ (yโ โแตฅ xโ)) +แตฅ ((zโ โแตฅ) โแตฅ (xโ โแตฅ (yโ โแตฅ))))  ๐[ _โก_ ]-[ {!!} ]

    (xโ โแตฅ ((yโ โแตฅ zโ) โแตฅ ((zโ โแตฅ) โแตฅ yโ))) โแตฅ ((((zโ โแตฅ yโ) +แตฅ (yโ โแตฅ (zโ โแตฅ)))โแตฅ) โแตฅ xโ) ๐-end
  right (Associativity.proof [โ]-associativity) = {!!}


{-
(((xโ โแตฅ yโ) โแตฅ ((yโ โแตฅ) โแตฅ xโ)) โแตฅ zโ) โแตฅ ((zโ โแตฅ) โแตฅ ((yโ โแตฅ xโ) +แตฅ (xโ โแตฅ (yโ โแตฅ))))
(((xโ โแตฅ yโ) โแตฅ zโ) โแตฅ (((yโ โแตฅ) โแตฅ xโ) โแตฅ zโ)) โแตฅ (((zโ โแตฅ) โแตฅ (yโ โแตฅ xโ)) +แตฅ ((zโ โแตฅ) โแตฅ (xโ โแตฅ (yโ โแตฅ))))

((xโ โแตฅ (yโ โแตฅ zโ)) โแตฅ (xโ โแตฅ ((zโ โแตฅ) โแตฅ yโ))) โแตฅ ((((yโ โแตฅ) โแตฅ (zโ โแตฅ)) โแตฅ xโ) +แตฅ ((zโ โแตฅ (yโ โแตฅ)) โแตฅ xโ))
((xโ โแตฅ (yโ โแตฅ zโ)) โแตฅ (xโ โแตฅ ((zโ โแตฅ) โแตฅ yโ))) โแตฅ ((((yโ โแตฅ) โแตฅ (zโ โแตฅ)) +แตฅ (zโ โแตฅ (yโ โแตฅ))) โแตฅ xโ)
((xโ โแตฅ (yโ โแตฅ zโ)) โแตฅ (xโ โแตฅ ((zโ โแตฅ) โแตฅ yโ))) โแตฅ ((((zโ โแตฅ yโ)โแตฅ) +แตฅ ((yโ โแตฅ (zโ โแตฅ))โแตฅ)) โแตฅ xโ)
(xโ โแตฅ ((yโ โแตฅ zโ) โแตฅ ((zโ โแตฅ) โแตฅ yโ))) โแตฅ ((((zโ โแตฅ yโ) +แตฅ (yโ โแตฅ (zโ โแตฅ)))โแตฅ) โแตฅ xโ)
-}
