module Structure.Operator.Vector where

import      Lvl
open import Logic
open import Logic.Propositional
open import Sets.Setoid
open import Structure.Operator.Field
open import Structure.Operator.Group
open import Structure.Operator.Monoid
open import Structure.Operator.Properties
open import Type

record VectorSpace {โแตฅ โโ}
                   {V : Type{โแตฅ}} โฆ _ : Equiv(V) โฆ
                   {S : Type{โโ}} โฆ _ : Equiv(S) โฆ
                   (_+แตฅ_ : V โ V โ V)
                   (_โโแตฅ_ : S โ V โ V)
                   (_+โ_ : S โ S โ S)
                   (_โโ_ : S โ S โ S)
                   : Stmt where
  constructor intro
  field
    โฆ scalarField โฆ            : Field(_+โ_)(_โโ_)
    โฆ vectorCommutativeGroup โฆ : CommutativeGroup(_+แตฅ_)

  {-
  open Field โฆ ... โฆ
  open Group โฆ ... โฆ

  -- Scalar zero
  ๐โ : S
  ๐โ = id โฆ _ โฆ โฆ Field.[โ]-monoid โฆ

  -- Scalar one
  ๐โ : S
  ๐โ = id โฆ _ โฆ โฆ Field.[โ]-monoid โฆ

  [โโแตฅ]-id = ๐โ

  -- Scalar negation
  โโโ_ : S โ S
  โโโ_ = Group.inv ([+]-group โฆ _ โฆ โฆ scalarField โฆ)

  -- Scalar subtraction
  _โโ_ : S โ S โ S
  _โโ_ (a)(b) = a +โ (โโโ_ b)

  -- Scalar reciprocal
  โโ_ : (x : S) โ โฆ _ : (x โข ๐โ) โฆ โ S
  โโ_ = MultGroup.inv ([โ]-group โฆ _ โฆ โฆ scalarField โฆ)

  -- Scalar division
  _/โ_ : S โ (b : S) โ โฆ _ : (b โข ๐โ) โฆ โ S
  _/โ_ (a)(b) โฆ nonzero โฆ = a โโ (โโ_ b โฆ nonzero โฆ)

  -- Vector zero
  ๐แตฅ : V
  ๐แตฅ = id โฆ _ โฆ โฆ Group.monoid(group โฆ _ โฆ โฆ vectorCommutativeGroup โฆ) โฆ

  -- Vector negation
  โโแตฅ_ : V โ V
  โโแตฅ_ = Group.inv(group โฆ _ โฆ โฆ vectorCommutativeGroup โฆ)

  -- Vector subtraction
  _โแตฅ_ : V โ V โ V
  _โแตฅ_ (a)(b) = a +แตฅ (โโแตฅ_ b)
  -}

  field
    [โโ][โโแตฅ]-compatibility      : Compatibility(_โโ_)(_โโแตฅ_)
    [โโแตฅ]-identity               : Identityโ(_โโแตฅ_)([โโแตฅ]-id)
    [โโแตฅ][+แตฅ]-distributivity     : Distributivityโ(_โโแตฅ_)(_+แตฅ_)
    [โโแตฅ][+โ][+แตฅ]-distributivity : DistributivityPatternแตฃ(_โโแตฅ_)(_+โ_)(_+แตฅ_) -- TODO: This is โ? โ Preservingโ
  {-
  module Theorems where
    postulate [โโแตฅ]-absorberโ : โ{v} โ (๐โ โโแตฅ v โก ๐แตฅ)
    postulate [โโแตฅ]-absorberแตฃ : โ{s} โ (s โโแตฅ ๐แตฅ โก ๐แตฅ)
    postulate [โโแตฅ]-negation : โ{v} โ ((โโโ ๐โ) โโแตฅ v โก โโแตฅ v)
  -}
