module Structure.Operator.Vector {โโ} {โโ} where

import      Lvl
open import Logic.Propositional{โโ Lvl.โ โโ}
open import Relator.Equals{โโ Lvl.โ โโ}{โโ}
open import Relator.Equals.Theorems{โโ}{โโ}
open import Structure.Operator.Field{โโ}{โโ}
open import Structure.Operator.Group{โโ}{โโ}
open import Structure.Operator.Monoid{โโ}{โโ}
open import Structure.Operator.Properties{โโ}{โโ}
open import Type{โโ}

record Language (V S : Type) : Stmt where
  field
    _+แตฅ_ : V โ V โ V
    _โโแตฅ_ : S โ V โ V
    _+โ_ : S โ S โ S
    _โโ_ : S โ S โ S

record VectorSpace (V S : Type) โฆ lang : Language(V)(S) โฆ : Stmt where
  open Language(lang)

  field
   โฆ scalarField โฆ       : Field(_+โ_)(_โโ_)
   โฆ vectorAbelianGroup โฆ : AbelianGroup(_+แตฅ_)

  open AbelianGroup โฆ ... โฆ 
  open Field โฆ ... โฆ 
  open Group โฆ ... โฆ 
  open Monoid โฆ ... โฆ 
  open MultGroup โฆ ... โฆ 

  -- Scalar zero
  ๐โ : S
  ๐โ = id โฆ Group.monoid ([+]-group โฆ scalarField โฆ) โฆ

  -- Scalar one
  ๐โ : S
  ๐โ = id โฆ MultGroup.monoid ([โ]-group โฆ scalarField โฆ) โฆ

  [โโแตฅ]-id = ๐โ

  -- Scalar negation
  โโโ_ : S โ S
  โโโ_ = Group.inv ([+]-group โฆ scalarField โฆ)

  -- Scalar subtraction
  _โโ_ : S โ S โ S
  _โโ_ (a)(b) = a +โ (โโโ_ b)

  -- Scalar reciprocal
  โโ_ : (x : S) โ โฆ _ : (x โข ๐โ) โฆ โ S
  โโ_ = MultGroup.inv ([โ]-group โฆ scalarField โฆ)

  -- Scalar division
  _/โ_ : S โ (b : S) โ โฆ _ : (b โข ๐โ) โฆ โ S
  _/โ_ (a)(b) โฆ nonzero โฆ = a โโ (โโ_ b โฆ nonzero โฆ)

  -- Vector zero
  ๐แตฅ : V
  ๐แตฅ = id โฆ Group.monoid(group โฆ vectorAbelianGroup โฆ) โฆ

  -- Vector negation
  โโแตฅ_ : V โ V
  โโแตฅ_ = Group.inv(group โฆ vectorAbelianGroup โฆ)

  -- Vector subtraction
  _โแตฅ_ : V โ V โ V
  _โแตฅ_ (a)(b) = a +แตฅ (โโแตฅ_ b)

  field
    [โโ][โโแตฅ]-compatibility      : Compatibility(_โโ_)(_โโแตฅ_)
    [โโแตฅ]-identity               : Identityโ(_โโแตฅ_)([โโแตฅ]-id)
    [โโแตฅ][+แตฅ]-distributivity     : Distributivityโ(_โโแตฅ_)(_+แตฅ_)
    [โโแตฅ][+โ][+แตฅ]-distributivity : DistributivityPatternแตฃ(_โโแตฅ_)(_+โ_)(_+แตฅ_)

  module Theorems where
    postulate [โโแตฅ]-absorberโ : โ{v} โ (๐โ โโแตฅ v โก ๐แตฅ)
    postulate [โโแตฅ]-absorberแตฃ : โ{s} โ (s โโแตฅ ๐แตฅ โก ๐แตฅ)
    postulate [โโแตฅ]-negation : โ{v} โ ((โโโ ๐โ) โโแตฅ v โก โโแตฅ v)
