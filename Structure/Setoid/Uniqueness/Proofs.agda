module Structure.Setoid.Uniqueness.Proofs where

import      Lvl
open import Functional
open import Function.Names
open import Logic.Propositional
open import Logic.Predicate
open import Relator.Equals
open import Structure.Setoid.Uniqueness
open import Relator.Equals.Proofs
-- TODO: open import Structure.Function.Domain
open import Structure.Relator.Properties
open import Syntax.Transitivity
open import Type

module _ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {A : Type{‚Ñì‚ÇÅ}} {B : Type{‚Ñì‚ÇÇ}} {f : A ‚Üí B} where
  -- TODO: This proof should work more generally for setoids when `Injective` is working for setoids
  Uniqueness-Injectivity : (‚àÄ{y : B} ‚Üí Unique(x ‚Ü¶ y ‚â° f(x))) ‚Üî Injective(f)
  Uniqueness-Injectivity = [‚Üî]-intro l r where
    l : (‚àÄ{y : B} ‚Üí Unique(x ‚Ü¶ y ‚â° f(x))) ‚Üê Injective(f)
    l (injective) {y} {x‚ÇÅ}{x‚ÇÇ} (y‚â°fx‚ÇÅ) (y‚â°fx‚ÇÇ) = injective {x‚ÇÅ}{x‚ÇÇ} (symmetry(_‚â°_) (y‚â°fx‚ÇÅ) üùñ (y‚â°fx‚ÇÇ))

    r : (‚àÄ{y : B} ‚Üí Unique(x ‚Ü¶ y ‚â° f(x))) ‚Üí Injective(f)
    r (unique) {x‚ÇÅ}{x‚ÇÇ} (fx‚ÇÅ‚â°fx‚ÇÇ) = unique {f(x‚ÇÅ)}{x‚ÇÅ}{x‚ÇÇ} ([‚â°]-intro) (fx‚ÇÅ‚â°fx‚ÇÇ)
