module Structure.Setoid.Size.Proofs where

open import Data
open import Data.Proofs
import      Data.Either        as Either
import      Data.Either.Proofs as Either
import      Lvl
open import Functional
open import Function.Proofs
open import Function.Inverse‚Çó
open import Function.Inverse
open import Function.Iteration
open import Lang.Instance
open import Logic
open import Logic.Classical
open import Logic.Propositional
open import Logic.Predicate
open import Structure.Setoid
open import Structure.Setoid.Size
open import Structure.Function.Domain
open import Structure.Function.Domain.Proofs
open import Structure.Function
open import Structure.Relator.Equivalence
open import Structure.Relator.Ordering
open import Structure.Relator.Properties
open import Syntax.Transitivity
open import Type.Properties.Empty
open import Type.Properties.Inhabited
open import Type

private variable ‚Ñì ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ : Lvl.Level
private variable A B C : Setoid{‚Ñì}

module _ where
  instance
    [‚âç]-to-[‚âº] : (_‚âç_ {‚Ñì}) ‚äÜ‚ÇÇ (_‚âº_)
    _‚äÜ‚ÇÇ_.proof [‚âç]-to-[‚âº] ([‚àÉ]-intro(f) ‚¶É [‚àß]-intro f-function f-bijective ‚¶Ñ) =
      ([‚àÉ]-intro(f) ‚¶É [‚àß]-intro f-function (bijective-to-injective(f) ‚¶É f-bijective ‚¶Ñ) ‚¶Ñ)

  instance
    [‚âç]-to-[‚âΩ] : (_‚âç_ {‚Ñì}) ‚äÜ‚ÇÇ (_‚âΩ_)
    _‚äÜ‚ÇÇ_.proof [‚âç]-to-[‚âΩ] ([‚àÉ]-intro(f) ‚¶É [‚àß]-intro f-function f-bijective ‚¶Ñ) =
      ([‚àÉ]-intro(f) ‚¶É [‚àß]-intro f-function (bijective-to-surjective(f) ‚¶É f-bijective ‚¶Ñ) ‚¶Ñ)

  [‚âº]-empty-is-minimal : (([‚àÉ]-intro(Empty{‚Ñì})) ‚âº A)
  [‚âº]-empty-is-minimal = [‚àÉ]-intro empty ‚¶É [‚àß]-intro empty-function empty-injective ‚¶Ñ

  [‚âΩ]-empty-is-not-minimal : ¬¨(‚àÄ{A : Setoid{‚Ñì}} ‚Üí (A ‚âΩ ([‚àÉ]-intro(Empty{‚Ñì}))))
  [‚âΩ]-empty-is-not-minimal proof with () ‚Üê [‚àÉ]-witness(proof {[‚àÉ]-intro Unit}) <>

  [‚âº]-to-[‚âΩ]-not-all : ¬¨((_‚âº_ {‚Ñì}) ‚äÜ‚ÇÇ swap(_‚âΩ_))
  [‚âº]-to-[‚âΩ]-not-all (intro proof) = [‚âΩ]-empty-is-not-minimal(proof [‚âº]-empty-is-minimal)

  [‚âº]-to-[‚âΩ]-for-inhabited : ‚¶É _ : ‚àÄ{‚Ñì}{P : Stmt{‚Ñì}} ‚Üí Classical(P) ‚¶Ñ ‚¶É inh-A : (‚óä([‚àÉ]-witness A)) ‚¶Ñ ‚Üí ((A ‚âº B) ‚Üí (B ‚âΩ A))
  [‚âº]-to-[‚âΩ]-for-inhabited {A = [‚àÉ]-intro a} {B = [‚àÉ]-intro b} ([‚àÉ]-intro f ‚¶É [‚àß]-intro f-func f-inj ‚¶Ñ) = [‚àÉ]-intro (inv‚Çó-construction(const [‚óä]-existence) f) ‚¶É [‚àß]-intro (inv‚Çó-construction-function ‚¶É inj = f-inj ‚¶Ñ) (inverse‚Çó-surjective ‚¶É inver‚Çó = inv‚Çó-construction-inverse‚Çó ‚¶É inj = f-inj ‚¶Ñ ‚¶Ñ) ‚¶Ñ

  -- [‚âº][‚âΩ][‚âç]-antisymmetry : (A ‚âº B) ‚Üí (A ‚âΩ B) ‚Üí (A ‚âç B)
  -- [‚âº][‚âΩ][‚âç]-antisymmetry ([‚àÉ]-intro f ‚¶É f-inj ‚¶Ñ) ([‚àÉ]-intro g ‚¶É g-surj ‚¶Ñ) = {!!}

-- TODO: This is variant of the "extensional axiom of choice" and it is unprovable in Agda. Though it is a possible axiom
-- instance
--   [‚âΩ]-to-[‚âº] : (A ‚âΩ B) ‚Üí (B ‚âº A)
--   [‚âΩ]-to-[‚âº] ([‚àÉ]-intro(f) ‚¶É [‚àß]-intro f-function f-surjective ‚¶Ñ) =
--     ([‚àÉ]-intro(inv·µ£ f) ‚¶É [‚àß]-intro (TODO: f-function) (inv·µ£-injective ‚¶É f-surjective ‚¶Ñ) ‚¶Ñ)

  [‚âº][‚âç]-almost-antisymmetry : ‚¶É _ : ‚àÄ{‚Ñì}{P : Stmt{‚Ñì}} ‚Üí Classical(P) ‚¶Ñ ‚Üí (A ‚âº B) ‚Üí (B ‚âº A) ‚Üí (A ‚âΩ B)
  [‚âº][‚âç]-almost-antisymmetry {A = A}{B = B} ([‚àÉ]-intro f ‚¶É [‚àß]-intro func-f inj-f ‚¶Ñ) ([‚àÉ]-intro g ‚¶É [‚àß]-intro func-g inj-g ‚¶Ñ) = [‚àÉ]-intro h ‚¶É [‚àß]-intro func-h surj-h ‚¶Ñ where
    h : [‚àÉ]-witness A ‚Üí [‚àÉ]-witness B
    h(a) = Either.map1 [‚àÉ]-witness (const(f(a))) (excluded-middle(‚àÉ(b ‚Ü¶ g(b) ‚â° a)))

    func-h : Function(h)
    Function.congruence func-h {a‚ÇÅ} {a‚ÇÇ} a‚ÇÅa‚ÇÇ with excluded-middle(‚àÉ(b ‚Ü¶ g(b) ‚â° a‚ÇÅ)) | excluded-middle(‚àÉ(b ‚Ü¶ g(b) ‚â° a‚ÇÇ)) | a‚ÇÅa‚ÇÇ -- TODO: Not sure why the last a‚ÇÅa‚ÇÇ is neccessary for the result to normalize from the cases, if this is a bug in Agda or if it is intended. An alternative is to just use two-layered Either.map1-values
    ... | [‚à®]-intro‚Çó ([‚àÉ]-intro b‚ÇÅ ‚¶É gba1 ‚¶Ñ) | [‚à®]-intro‚Çó ([‚àÉ]-intro b‚ÇÇ ‚¶É gba2 ‚¶Ñ) | _ = injective(g) ‚¶É inj-g ‚¶Ñ (gba1 üùñ a‚ÇÅa‚ÇÇ üùñ symmetry(_‚â°_) gba2)
    ... | [‚à®]-intro‚Çó ([‚àÉ]-intro b‚ÇÅ ‚¶É gba1 ‚¶Ñ) | [‚à®]-intro·µ£ ngba2                   | _ = [‚ä•]-elim(ngba2([‚àÉ]-intro b‚ÇÅ ‚¶É gba1 üùñ a‚ÇÅa‚ÇÇ ‚¶Ñ))
    ... | [‚à®]-intro·µ£ ngba1                   | [‚à®]-intro‚Çó ([‚àÉ]-intro b‚ÇÇ ‚¶É gba2 ‚¶Ñ) | _ = [‚ä•]-elim(ngba1([‚àÉ]-intro b‚ÇÇ ‚¶É gba2 üùñ symmetry(_‚â°_) a‚ÇÅa‚ÇÇ ‚¶Ñ))
    ... | [‚à®]-intro·µ£ _                       | [‚à®]-intro·µ£ _                       | _ = congruence‚ÇÅ(f) ‚¶É func-f ‚¶Ñ a‚ÇÅa‚ÇÇ

      {- TODO: This choice of h probably does not work for proving antisymmetry because nothing states that f and g are inverses, which seems to be neccessary in the proof
      inj-h : Injective(h)
      Injective.proof inj-h {a‚ÇÅ} {a‚ÇÇ} ha‚ÇÅha‚ÇÇ with excluded-middle(‚àÉ(b ‚Ü¶ g(b) ‚â° a‚ÇÅ)) | excluded-middle(‚àÉ(b ‚Ü¶ g(b) ‚â° a‚ÇÇ)) | ha‚ÇÅha‚ÇÇ
      ... | [‚à®]-intro‚Çó ([‚àÉ]-intro b‚ÇÅ ‚¶É gba1 ‚¶Ñ) | [‚à®]-intro‚Çó ([‚àÉ]-intro b‚ÇÇ ‚¶É gba2 ‚¶Ñ) | b‚ÇÅb‚ÇÇ =
        a‚ÇÅ    üùñ-[ gba1 ]-sym
        g(b‚ÇÅ) üùñ-[ congruence‚ÇÅ(g) ‚¶É func-g ‚¶Ñ b‚ÇÅb‚ÇÇ ]
        g(b‚ÇÇ) üùñ-[ gba2 ]
        a‚ÇÇ    üùñ-end 
      ... | [‚à®]-intro‚Çó ([‚àÉ]-intro b‚ÇÅ ‚¶É gba1 ‚¶Ñ) | [‚à®]-intro·µ£ nega‚ÇÇ                   | b‚ÇÅfa‚ÇÇ = [‚ä•]-elim(nega‚ÇÇ ([‚àÉ]-intro (f(a‚ÇÇ)) ‚¶É p ‚¶Ñ)) where
        p =
          g(f(a‚ÇÇ)) üùñ-[ congruence‚ÇÅ(g) ‚¶É func-g ‚¶Ñ b‚ÇÅfa‚ÇÇ ]-sym
          g(b‚ÇÅ)    üùñ-[ gba1 ]
          a‚ÇÅ       üùñ-[ {!gba1!} ]
          a‚ÇÇ       üùñ-end
        q =
          f(a‚ÇÅ)    üùñ-[ congruence‚ÇÅ(f) ‚¶É func-f ‚¶Ñ gba1 ]-sym
          f(g(b‚ÇÅ)) üùñ-[ {!!} ]
          b‚ÇÅ       üùñ-[ b‚ÇÅfa‚ÇÇ ]
          f(a‚ÇÇ)    üùñ-end
      ... | [‚à®]-intro·µ£ nega‚ÇÅ                   | [‚à®]-intro‚Çó ([‚àÉ]-intro b‚ÇÇ ‚¶É gba2 ‚¶Ñ) | fa‚ÇÅb‚ÇÇ = {!!}
      ... | [‚à®]-intro·µ£ nega‚ÇÅ                   | [‚à®]-intro·µ£ nega‚ÇÇ                   | fa‚ÇÅfa‚ÇÇ = injective(f) ‚¶É inj-f ‚¶Ñ fa‚ÇÅfa‚ÇÇ
      -}

    surj-h : Surjective(h)
    Surjective.proof surj-h {b} with Either.map1-values{f = [‚àÉ]-witness}{g = const(f(g(b)))}{e = excluded-middle(‚àÉ(x ‚Ü¶ g(x) ‚â° g(b)))}
    ... | [‚à®]-intro‚Çó ([‚àÉ]-intro ([‚àÉ]-intro b‚ÇÇ ‚¶É gb‚ÇÇgb ‚¶Ñ) ‚¶É fgbb‚ÇÇ ‚¶Ñ) = [‚àÉ]-intro (g(b)) ‚¶É fgbb‚ÇÇ üùñ injective(g) ‚¶É inj-g ‚¶Ñ gb‚ÇÇgb ‚¶Ñ
    ... | [‚à®]-intro·µ£([‚àÉ]-intro neggb ‚¶É p ‚¶Ñ) = [‚ä•]-elim(neggb ([‚àÉ]-intro b ‚¶É reflexivity(_‚â°_) ‚¶Ñ))

  instance
    -- TODO: Another attempt at antisymmetry from https://artofproblemsolving.com/wiki/index.php/Schroeder-Bernstein_Theorem
    postulate [‚âº][‚âç]-antisymmetry : ‚¶É _ : ‚àÄ{‚Ñì}{P : Stmt{‚Ñì}} ‚Üí Classical(P) ‚¶Ñ ‚Üí Antisymmetry(_‚âº_ {‚Ñì})(_‚âç_)
    {-
    [‚âº][‚âç]-antisymmetry {A = A}{B = B} ([‚àÉ]-intro f ‚¶É [‚àß]-intro func-f inj-f ‚¶Ñ) ([‚àÉ]-intro g ‚¶É [‚àß]-intro func-g inj-g ‚¶Ñ) = [‚àÉ]-intro h ‚¶É [‚àß]-intro func-h (injective-surjective-to-bijective(h)) ‚¶Ñ where
      Lone : [‚àÉ]-witness B ‚Üí Stmt
      Lone(b) = ‚àÄ{a} ‚Üí (f(a) ‚â¢ b)

      Desc : [‚àÉ]-witness B ‚Üí [‚àÉ]-witness B ‚Üí Stmt
      Desc(b‚ÇÅ)(b‚ÇÄ) = ‚àÉ(n ‚Ü¶ (b‚ÇÅ ‚â° ((f ‚àò g) ^ n)(b‚ÇÄ)))

      h : [‚àÉ]-witness A ‚Üí [‚àÉ]-witness B
      h(a) = Either.map1 [‚àÉ]-witness (const(f(a))) (excluded-middle(‚àÉ(b ‚Ü¶ Lone(b) ‚àß Desc(f(a))(b))))

      instance
        func-h : Function(h)
        Function.congruence func-h {a‚ÇÅ} {a‚ÇÇ} a‚ÇÅa‚ÇÇ with excluded-middle(‚àÉ(b ‚Ü¶ Lone(b) ‚àß Desc(f(a‚ÇÅ))(b))) | excluded-middle(‚àÉ(b ‚Ü¶ Lone(b) ‚àß Desc(f(a‚ÇÇ))(b))) | a‚ÇÅa‚ÇÇ
        ... | [‚à®]-intro‚Çó ([‚àÉ]-intro b‚ÇÅ ‚¶É [‚àß]-intro _ ([‚àÉ]-intro n‚ÇÅ ‚¶É gba1 ‚¶Ñ) ‚¶Ñ) | [‚à®]-intro‚Çó ([‚àÉ]-intro b‚ÇÇ ‚¶É [‚àß]-intro _ ([‚àÉ]-intro n‚ÇÇ ‚¶É gba2 ‚¶Ñ) ‚¶Ñ) | _ = {!gba1 üùñ a‚ÇÅa‚ÇÇ üùñ symmetry(_‚â°_) gba2!}
        ... | [‚à®]-intro‚Çó ([‚àÉ]-intro b‚ÇÅ ‚¶É [‚àß]-intro _ ([‚àÉ]-intro n‚ÇÅ ‚¶É gba2 ‚¶Ñ) ‚¶Ñ) | [‚à®]-intro·µ£ ngba2                               | _ = {!!}
        ... | [‚à®]-intro·µ£ ngba1                               | [‚à®]-intro‚Çó ([‚àÉ]-intro b‚ÇÇ ‚¶É [‚àß]-intro _ ([‚àÉ]-intro n‚ÇÇ ‚¶É gba2 ‚¶Ñ) ‚¶Ñ) | _ = {!!}
        ... | [‚à®]-intro·µ£ _                                   | [‚à®]-intro·µ£ _                                   | _ = {!!}

      instance
        surj-h : Surjective(h)
        Surjective.proof surj-h {y} with excluded-middle(‚àÉ(b ‚Ü¶ Lone(b) ‚àß Desc(y)(b)))
        ... | [‚à®]-intro‚Çó x = {!!}
        ... | [‚à®]-intro·µ£ x = {!!}

      instance
        inj-h : Injective(h)
        Injective.proof inj-h = {!!}
  -}

  instance
    [‚âç]-reflexivity : Reflexivity(_‚âç_ {‚Ñì})
    Reflexivity.proof([‚âç]-reflexivity) = [‚àÉ]-intro(id) ‚¶É [‚àß]-intro id-function id-bijective ‚¶Ñ

  instance
    [‚âç]-symmetry : Symmetry(_‚âç_ {‚Ñì})
    Symmetry.proof [‚âç]-symmetry ([‚àÉ]-intro(f) ‚¶É [‚àß]-intro f-function f-bijective ‚¶Ñ) = ([‚àÉ]-intro(inv f) ‚¶É [‚àß]-intro inv-function (inv-bijective ‚¶É func = f-function ‚¶Ñ) ‚¶Ñ) where
      instance
        f-invertible : Invertible(f)
        f-invertible = bijective-to-invertible ‚¶É bij = f-bijective ‚¶Ñ

      instance
        invf-invertible : Invertible(inv f)
        ‚àÉ.witness invf-invertible = f
        ‚àÉ.proof invf-invertible = [‚àß]-intro f-function (Inverse-symmetry ([‚àß]-elim·µ£([‚àÉ]-proof f-invertible)))

  instance
    [‚âç]-transitivity : Transitivity(_‚âç_ {‚Ñì})
    Transitivity.proof([‚âç]-transitivity) ([‚àÉ]-intro(f) ‚¶É [‚àß]-intro f-function f-bijective ‚¶Ñ) ([‚àÉ]-intro(g) ‚¶É [‚àß]-intro g-function g-bijective ‚¶Ñ)
      = [‚àÉ]-intro(g ‚àò f) ‚¶É [‚àß]-intro
          ([‚àò]-function  {f = g}{g = f} ‚¶É g-function ‚¶Ñ ‚¶É f-function ‚¶Ñ)
          ([‚àò]-bijective {f = g} ‚¶É g-function ‚¶Ñ {g = f} ‚¶É g-bijective ‚¶Ñ ‚¶É f-bijective ‚¶Ñ)
        ‚¶Ñ

  instance
    [‚âç]-equivalence : Equivalence(_‚âç_ {‚Ñì})
    [‚âç]-equivalence = intro

  instance
    [‚âº]-reflexivity : Reflexivity(_‚âº_ {‚Ñì})
    Reflexivity.proof([‚âº]-reflexivity) = [‚àÉ]-intro(id) ‚¶É [‚àß]-intro id-function id-injective ‚¶Ñ

  instance
    [‚âº]-transitivity : Transitivity(_‚âº_ {‚Ñì})
    Transitivity.proof([‚âº]-transitivity) ([‚àÉ]-intro(f) ‚¶É [‚àß]-intro f-function f-injective ‚¶Ñ) ([‚àÉ]-intro(g) ‚¶É [‚àß]-intro g-function g-injective ‚¶Ñ)
      = [‚àÉ]-intro(g ‚àò f) ‚¶É [‚àß]-intro
          ([‚àò]-function  {f = g}{g = f} ‚¶É g-function ‚¶Ñ ‚¶É f-function ‚¶Ñ)
          ([‚àò]-injective {f = g}{g = f} ‚¶É g-injective ‚¶Ñ ‚¶É f-injective ‚¶Ñ)
        ‚¶Ñ

  instance
    [‚âΩ]-reflexivity : Reflexivity(_‚âΩ_ {‚Ñì})
    Reflexivity.proof([‚âΩ]-reflexivity) = [‚àÉ]-intro(id) ‚¶É [‚àß]-intro id-function id-surjective ‚¶Ñ

  instance
    [‚âΩ]-transitivity : Transitivity(_‚âΩ_ {‚Ñì})
    Transitivity.proof([‚âΩ]-transitivity) ([‚àÉ]-intro(f) ‚¶É [‚àß]-intro f-function f-surjective ‚¶Ñ) ([‚àÉ]-intro(g) ‚¶É [‚àß]-intro g-function g-surjective ‚¶Ñ)
      = [‚àÉ]-intro(g ‚àò f) ‚¶É [‚àß]-intro
          ([‚àò]-function  {f = g}{g = f} ‚¶É g-function ‚¶Ñ ‚¶É f-function ‚¶Ñ)
          ([‚àò]-surjective {f = g} ‚¶É g-function ‚¶Ñ {g = f} ‚¶É g-surjective ‚¶Ñ ‚¶É f-surjective ‚¶Ñ)
        ‚¶Ñ

  module _ (A : Setoid{‚Ñì‚ÇÅ}) (B : Setoid{‚Ñì‚ÇÇ}) where
    record SurjectionChoice : Stmt{‚Ñì‚ÇÅ Lvl.‚äî ‚Ñì‚ÇÇ} where
      constructor intro
      field proof : (A ‚âΩ B) ‚Üí (B ‚âº A)
    [‚âΩ]-to-[‚âº] = inst-fn SurjectionChoice.proof

  module _ ‚¶É surjChoice : SurjectionChoice A B ‚¶Ñ where
    --(A ‚âº B) ‚Üí (B ‚âº A) ‚Üí (A ‚âç B)
