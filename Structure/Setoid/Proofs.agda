module Structure.Setoid.Proofs where

import      Lvl
open import Structure.Setoid
open import Structure.Relator.Properties
open import Syntax.Transitivity
open import Type

module _ {‚Ñì ‚Ñì‚Çë} {T : Type{‚Ñì}} ‚¶É equiv : Equiv{‚Ñì‚Çë}(T) ‚¶Ñ where
  instance
    [‚â°][‚â¢]-subtransitivity‚Çó : Subtransitivity‚Çó(_‚â¢_)(_‚â°_)
    [‚â°][‚â¢]-subtransitivity‚Çó = intro(\ab nbc ac ‚Üí nbc(symmetry(_‚â°_) ab üùñ ac))

  instance
    [‚â°][‚â¢]-subtransitivity·µ£ : Subtransitivity·µ£(_‚â¢_)(_‚â°_)
    [‚â°][‚â¢]-subtransitivity·µ£ = intro(\nab bc ac ‚Üí nab(ac üùñ symmetry(_‚â°_) bc))
