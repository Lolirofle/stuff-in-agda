module Formalization.ClassicalPropositionalLogic.Syntax.Proofs where

import      Lvl
open import Formalization.ClassicalPropositionalLogic.Syntax
open import Relator.Equals.Proofs.Equiv
open import Type.Size.Countable
open import Type

private variable ‚Ñì‚Çö ‚Ñì : Lvl.Level
private variable P : Type{‚Ñì‚Çö}

-- TODO: How would a proof of this look like?
instance
  postulate Formula-is-countably-infinite : ‚¶É _ : CountablyInfinite(P) ‚¶Ñ ‚Üí CountablyInfinite(Formula(P))

{-
open import Type.W
Formula-W-bijectivity : Bijective(W{A = ùïü(8)}())
Formula-W-bijectivity = {!!
-}
