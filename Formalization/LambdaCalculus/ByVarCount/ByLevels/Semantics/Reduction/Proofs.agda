module Formalization.LambdaCalculus.ByVarCount.ByLevels.Semantics.Reduction.Proofs where

import      Lvl
open import Formalization.LambdaCalculus.ByVarCount
open import Formalization.LambdaCalculus.ByVarCount.ByLevels.Semantics.Reduction
open import Graph.Walk
open import Numeral.Natural
open import Relator.ReflexiveTransitiveClosure
import      Structure.Function.Names as Names
open import Structure.Function

private variable d d‚ÇÅ d‚ÇÇ : ‚Ñï
private variable f g x y : Term(d)

open import Graph.Walk.Proofs using (Walk-super ; Walk-sub ; Walk-transitivity ; Walk-reflexivity ; Walk-subtransitivity‚Çó) public

[‚á¥*]-super-function : ‚àÄ{F : Term(d‚ÇÅ) ‚Üí Term(d‚ÇÇ)} ‚Üí ‚¶É Compatible‚ÇÅ(_‚á¥_)(_‚á¥_)(F) ‚¶Ñ ‚Üí Compatible‚ÇÅ(_‚á¥*_)(_‚á¥*_)(F)
[‚á¥*]-super-function {F = F} = intro proof where
  proof : Names.Compatible‚ÇÅ(_‚á¥*_)(_‚á¥*_)(F)
  proof at = at
  proof (prepend p q) = prepend (compatible‚ÇÅ(_‚á¥_)(_‚á¥_)(F) p) (proof q)

instance
  [‚á¥]-Apply‚Çó-function : Compatible‚ÇÅ(_‚á¥_)(_‚á¥_)(\f ‚Üí Apply f x)
  [‚á¥]-Apply‚Çó-function = intro cong-apply‚Çó

instance
  [‚á¥]-Apply·µ£-function : Compatible‚ÇÅ(_‚á¥_)(_‚á¥_)(\x ‚Üí Apply f x)
  [‚á¥]-Apply·µ£-function = intro cong-apply·µ£

instance
  [‚á¥]-Abstract-function : Compatible‚ÇÅ(_‚á¥_)(_‚á¥_)(Abstract{d})
  [‚á¥]-Abstract-function = intro cong-abstract

instance
  [‚á¥*]-Apply‚Çó-function : Compatible‚ÇÅ(_‚á¥*_)(_‚á¥*_)(\f ‚Üí Apply f x)
  [‚á¥*]-Apply‚Çó-function = [‚á¥*]-super-function

instance
  [‚á¥*]-Apply·µ£-function : Compatible‚ÇÅ(_‚á¥*_)(_‚á¥*_)(\x ‚Üí Apply f x)
  [‚á¥*]-Apply·µ£-function = [‚á¥*]-super-function

instance
  [‚á¥*]-Abstract-function : Compatible‚ÇÅ(_‚á¥*_)(_‚á¥*_)(Abstract{d})
  [‚á¥*]-Abstract-function = [‚á¥*]-super-function

{-
[‚á¥]-lift : ‚¶É IsOutermostLevelFree x ‚¶Ñ ‚Üí (x ‚á¥ y) ‚Üí ((x ‚Üë) ‚á¥ (y ‚Üë))
[‚á¥]-lift (Œ≤ {f = f}{x = x}) rewrite var-ùêí-substituteVar0 {x = f}{y = x} ‚¶É {!!} ‚¶Ñ = Œ≤
[‚á¥]-lift Œ∑ = Œ∑
[‚á¥]-lift (cong-apply‚Çó xy) = cong-apply‚Çó ([‚á¥]-lift ‚¶É {!!} ‚¶Ñ xy)
[‚á¥]-lift (cong-apply·µ£ xy) = cong-apply·µ£ ([‚á¥]-lift ‚¶É {!!} ‚¶Ñ xy)
[‚á¥]-lift (cong-abstract xy) = cong-abstract ([‚á¥]-lift xy)
-}

[Œ≤‚á¥*]-super-function : ‚àÄ{F : Term(d‚ÇÅ) ‚Üí Term(d‚ÇÇ)} ‚Üí ‚¶É Compatible‚ÇÅ(_Œ≤‚á¥_)(_Œ≤‚á¥_)(F) ‚¶Ñ ‚Üí Compatible‚ÇÅ(_Œ≤‚á¥*_)(_Œ≤‚á¥*_)(F)
[Œ≤‚á¥*]-super-function {F = F} = intro proof where
  proof : Names.Compatible‚ÇÅ(_Œ≤‚á¥*_)(_Œ≤‚á¥*_)(F)
  proof at = at
  proof (prepend p q) = prepend (compatible‚ÇÅ(_Œ≤‚á¥_)(_Œ≤‚á¥_)(F) p) (proof q)

instance
  [Œ≤‚á¥]-Apply‚Çó-function : Compatible‚ÇÅ(_Œ≤‚á¥_)(_Œ≤‚á¥_)(\f ‚Üí Apply f x)
  [Œ≤‚á¥]-Apply‚Çó-function = intro cong-apply‚Çó

instance
  [Œ≤‚á¥]-Apply·µ£-function : Compatible‚ÇÅ(_Œ≤‚á¥_)(_Œ≤‚á¥_)(\x ‚Üí Apply f x)
  [Œ≤‚á¥]-Apply·µ£-function = intro cong-apply·µ£

instance
  [Œ≤‚á¥*]-Apply‚Çó-function : Compatible‚ÇÅ(_Œ≤‚á¥*_)(_Œ≤‚á¥*_)(\f ‚Üí Apply f x)
  [Œ≤‚á¥*]-Apply‚Çó-function = [Œ≤‚á¥*]-super-function

instance
  [Œ≤‚á¥*]-Apply·µ£-function : Compatible‚ÇÅ(_Œ≤‚á¥*_)(_Œ≤‚á¥*_)(\x ‚Üí Apply f x)
  [Œ≤‚á¥*]-Apply·µ£-function = [Œ≤‚á¥*]-super-function
