module Logic.Constructive.NaturalDeduction where

open import Functional
import      Lvl
open import Type

module Propositional {โ} (Stmt : Type{โ}) where
  record Proposition : Type{Lvl.๐(โ)} where
    infixl 10000 โข_

    field
      โข_ : Stmt โ Type{โ}

  record Bottom โฆ _ : Proposition โฆ : Type{Lvl.๐(โ)} where
    open Proposition โฆ ... โฆ public

    field
      โฅ    : Stmt

    field
      intro : โ{X} โ โข(X) โ (โข(X) โ โข(โฅ)) โ โข(โฅ)
      elim  : โ{X} โ โข(โฅ) โ โข(X)

  record Top โฆ _ : Proposition โฆ : Type{Lvl.๐(โ)} where
    open Proposition โฆ ... โฆ public

    field
      โค    : Stmt

    field
      intro : โข(โค)

  record Conjunction โฆ _ : Proposition โฆ : Type{Lvl.๐(โ)} where
    open Proposition โฆ ... โฆ public

    infixl 1005 _โง_

    field
      _โง_  : Stmt โ Stmt โ Stmt

    field
      intro : โ{X Y} โ โข(X) โ โข(Y) โ โข(X โง Y)
      elimโ  : โ{X Y} โ โข(X โง Y) โ โข(X)
      elimแตฃ  : โ{X Y} โ โข(X โง Y) โ โข(Y)

  record Implication โฆ _ : Proposition โฆ : Type{Lvl.๐(โ)} where
    open Proposition โฆ ... โฆ public

    infixl 1000 _โถ_

    field
      _โถ_ : Stmt โ Stmt โ Stmt

    field
      intro : โ{X Y} โ โข(Y) โ โข(X โถ Y)
      elim  : โ{X Y} โ โข(X โถ Y) โ โข(X) โ โข(Y)

  record ReversedImplication โฆ _ : Proposition โฆ : Type{Lvl.๐(โ)} where
    open Proposition โฆ ... โฆ public

    infixl 1000 _โต_

    field
      _โต_ : Stmt โ Stmt โ Stmt

    field
      intro : โ{X Y} โ โข(Y) โ โข(Y โต X)
      elim  : โ{X Y} โ โข(Y โต X) โ โข(X) โ โข(Y)

  record Equivalence โฆ _ : Proposition โฆ : Type{Lvl.๐(โ)} where
    open Proposition โฆ ... โฆ public

    infixl 1000 _โท_

    field
      _โท_ : Stmt โ Stmt โ Stmt

    field
      intro : โ{X Y} โ (โข(X) โ โข(Y)) โ (โข(X) โ โข(Y)) โ โข(X โท Y)
      elimโ  : โ{X Y} โ โข(X โท Y) โ โข(Y) โ โข(X)
      elimแตฃ  : โ{X Y} โ โข(X โท Y) โ โข(X) โ โข(Y)

  record Disjunction โฆ _ : Proposition โฆ : Type{Lvl.๐(โ)} where
    open Proposition โฆ ... โฆ public

    infixl 1004 _โจ_

    field
      _โจ_  : Stmt โ Stmt โ Stmt

    field
      introโ : โ{X Y} โ โข(X) โ โข(X โจ Y)
      introแตฃ : โ{X Y} โ โข(Y) โ โข(X โจ Y)
      elim  : โ{X Y Z} โ โข(X โจ Y) โ (โข(X) โ โข(Z)) โ (โข(Y) โ โข(Z)) โ โข(Z)

  record Negation โฆ _ : Proposition โฆ โฆ _ : Bottom โฆ : Type{Lvl.๐(โ)} where
    open Proposition โฆ ... โฆ public
    open Bottom      โฆ ... โฆ hiding (โข_) public

    infixl 1010 ยฌ_

    field
      ยฌ_   : Stmt โ Stmt

    field
      intro : โ{X} โ (โข(X) โ โข(โฅ)) โ โข(ยฌ X)
      elim  : โ{X} โ โข(ยฌ X) โ โข(X) โ โข(โฅ)

  -- A theory of constructive propositional logic expressed using natural deduction rules
  record Theory : Type{Lvl.๐(โ)} where
    open Proposition โฆ ... โฆ public
    open Conjunction โฆ ... โฆ hiding (โข_) renaming (intro to [โง]-intro ; elimโ to [โง]-elimโ ; elimแตฃ to [โง]-elimแตฃ) public
    open Disjunction โฆ ... โฆ hiding (โข_) renaming (introโ to [โจ]-introโ ; introแตฃ to [โจ]-introแตฃ ; elim to [โจ]-elim) public
    open Implication โฆ ... โฆ hiding (โข_) renaming (intro to [โ]-intro ; elim to [โ]-elim) public
    open Equivalence โฆ ... โฆ hiding (โข_) renaming (intro to [โ]-intro ; elimโ to [โ]-elimโ ; elimแตฃ to [โ]-elimแตฃ) public
    open Negation    โฆ ... โฆ hiding (โข_) renaming (intro to [ยฌ]-intro ; elim to [ยฌ]-elim) public
    open Bottom      โฆ ... โฆ hiding (โข_) renaming (intro to [โฅ]-intro ; elim to [โฅ]-elim) public
    open Top         โฆ ... โฆ hiding (โข_) renaming (intro to [โค]-intro) public

    field
      โฆ proposition โฆ : Proposition
      โฆ bottom โฆ      : Bottom
      โฆ top โฆ         : Top
      โฆ conjunction โฆ : Conjunction
      โฆ disjunction โฆ : Disjunction
      โฆ implication โฆ : Implication
      โฆ equivalence โฆ : Equivalence
      โฆ negation โฆ    : Negation

module Predicate {โโ โโ} (Obj : Type{โโ}) (Stmt : Type{โโ Lvl.โ โโ}) โฆ _ : Propositional.Proposition(Stmt) โฆ where
  open Propositional(Stmt) renaming (Theory to PropositionalTheory)
  open Proposition โฆ ... โฆ

  record Object : Type{Lvl.๐(โโ)} where
    field
      obj : Obj โ Type{โโ}

  record UniversalQuantification : Type{Lvl.๐(โโ Lvl.โ โโ)} where
    field
      โโ : (Obj โ Stmt) โ Stmt

    field
      intro : โ{P : Obj โ Stmt} โ (โ{x : Obj} โ โข(P(x))) โ โข(โโ P)
      elim  : โ{P : Obj โ Stmt} โ โข(โโ P) โ (โ{x : Obj} โ โข(P(x)))

  record ExistentialQuantification : Type{Lvl.๐(โโ Lvl.โ โโ)} where
    field
      โโ : (Obj โ Stmt) โ Stmt

    field
      intro : โ{P : Obj โ Stmt}{a} โ โข(P(a)) โ โข(โโ P)
      elim  : โ{P : Obj โ Stmt}{Z : Stmt} โ (โ{x : Obj} โ โข(P(x)) โ โข(Z)) โ โข(โโ P) โ โข(Z)

  -- A theory of constructive predicate/(first-order) logic expressed using natural deduction rules
  record Theory  : Type{Lvl.๐(โโ Lvl.โ โโ)} where
    open Propositional.Theory      โฆ ... โฆ public
    open UniversalQuantification   โฆ ... โฆ renaming (intro to [โ]-intro ; elim to [โ]-elim) public
    open ExistentialQuantification โฆ ... โฆ renaming (intro to [โ]-intro ; elim to [โ]-elim) public

    field
      โฆ propositional โฆ             : PropositionalTheory
      โฆ universalQuantification โฆ   : UniversalQuantification
      โฆ existentialQuantification โฆ : ExistentialQuantification
