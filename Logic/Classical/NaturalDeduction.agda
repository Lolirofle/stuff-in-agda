module Logic.Classical.NaturalDeduction where

open import Functional hiding (Domain)
import      Lvl
open import Type

-- TODO: Maybe it is worth to try and take a more minimal approach? (Less axioms? Is this more practical/impractical?)

-- Theory of classical propositional logic expressed using natural deduction rules
record Propositional {โ} : Type{Lvl.๐(โ)} where
  infixl 1010 ยฌ_
  infixl 1005 _โง_
  infixl 1004 _โจ_
  infixl 1000 _โต_ _โท_ _โถ_

  Stmt : Type{Lvl.๐(โ)}
  Stmt = Type{โ}

  field
    Proof : Stmt โ Stmt
    _โง_   : Stmt โ Stmt โ Stmt
    _โถ_  : Stmt โ Stmt โ Stmt
    _โต_  : Stmt โ Stmt โ Stmt
    _โท_  : Stmt โ Stmt โ Stmt
    _โจ_   : Stmt โ Stmt โ Stmt
    ยฌ_    : Stmt โ Stmt
    โฅ     : Stmt
    โค     : Stmt

  field
    [โง]-intro : โ{X Y} โ Proof(X) โ Proof(Y) โ Proof(X โง Y)
    [โง]-elimโ  : โ{X Y} โ Proof(X โง Y) โ Proof(X)
    [โง]-elimแตฃ  : โ{X Y} โ Proof(X โง Y) โ Proof(Y)

    [โ]-intro : โ{X Y} โ Proof(Y) โ Proof(X โถ Y)
    [โ]-elim  : โ{X Y} โ Proof(X) โ Proof(X โถ Y) โ Proof(Y)

    [โ]-intro : โ{X Y} โ Proof(Y) โ Proof(Y โต X)
    [โ]-elim  : โ{X Y} โ Proof(X) โ Proof(Y โต X) โ Proof(Y)

    [โ]-intro : โ{X Y} โ Proof(X โ Y) โ Proof(X โ Y) โ Proof(X โท Y)
    [โ]-elimโ  : โ{X Y} โ Proof(X โท Y) โ Proof(X โต Y)
    [โ]-elimแตฃ  : โ{X Y} โ Proof(X โท Y) โ Proof(X โถ Y)

    [โจ]-introโ : โ{X Y} โ Proof(X) โ Proof(X โจ Y)
    [โจ]-introแตฃ : โ{X Y} โ Proof(Y) โ Proof(X โจ Y)
    [โจ]-elim  : โ{X Y Z : Stmt} โ Proof(X โ Z) โ Proof(Y โ Z) โ Proof(X โจ Y) โ Proof(Z)

    [ยฌ]-intro : โ{X} โ Proof(X โ โฅ) โ Proof(ยฌ X)
    [ยฌ]-elim  : โ{X} โ (Proof(ยฌ X) โ Proof(โฅ)) โ Proof(X)

    [โฅ]-intro : โ{X : Stmt} โ Proof(X) โ Proof(X โ โฅ) โ Proof(โฅ)
    [โฅ]-elim  : โ{X : Stmt} โ Proof(โฅ) โ Proof(X)

    [โค]-intro : Proof(โค)

{-
Propositional-from-[โง][โจ][โฅ] : โ{โ} โ (_โง_ _โจ_ : Stmt โ Stmt โ Stmt) โ (โฅ : Stmt) โ
  ([โง]-intro : โ{X Y} โ X โ Y โ (X โง Y)) โ
  ([โง]-elimโ  : โ{X Y} โ (X โง Y) โ X) โ
  ([โง]-elimแตฃ  : โ{X Y} โ (X โง Y) โ Y) โ
  ([โจ]-introโ : โ{X Y} โ X โ (X โจ Y)) โ
  ([โจ]-introแตฃ : โ{X Y} โ Y โ (X โจ Y)) โ
  ([โจ]-elim  : โ{X Y Z : Stmt} โ (X โ Z) โ (Y โ Z) โ (X โจ Y) โ Z) โ
  ([โฅ]-intro : โ{X : Stmt} โ X โ (X โ โฅ) โ โฅ) โ
  ([โฅ]-elim  : โ{X : Stmt} โ โฅ โ X) โ
  Propositional{โ}
Propositional-from-[โง][โจ][โฅ]
  (_โง_) (_โจ_) (โฅ)
  ([โง]-intro)
  ([โง]-elimโ)
  ([โง]-elimแตฃ)
  ([โจ]-introโ)
  ([โจ]-introแตฃ)
  ([โจ]-elim)
  ([โฅ]-intro)
  ([โฅ]-elim)
  = record{
    _โง_  = _โง_ ;
    _โจ_  = _โจ_ ;
    _โถ_ = (x โฆ y โฆ (x โจ (ยฌ y))) ;
    _โต_ = swap _โถ_ ;
    _โท_ = (x โฆ y โฆ ((x โต y)โง(x โถ y))) ;
    ยฌ_   = (x โฆ (x โถ โฅ)) ;
    โฅ    = โฅ ;
    โค    = ยฌ โฅ
  }
-}
open Propositional โฆ ... โฆ public

-- Theory of classical predicate/(first-order) logic expressed using natural deduction rules
record Predicate {โโ โโ} : Type{Lvl.๐(โโ Lvl.โ โโ)} where
  field
    โฆ propositional โฆ : Propositional{โโ Lvl.โ โโ}
    Metadomain : Type{โโ}
    Domain     : Type{โโ}
    obj : Metadomain โ Domain

  field
    โโ : (Domain โ Stmt) โ Stmt
    โโ : (Domain โ Stmt) โ Stmt

  field
    [โ]-intro : โ{P : Domain โ Stmt}{a} โ P(a) โ (โโ P)
    [โ]-elim  : โ{P : Domain โ Stmt}{Z : Stmt} โ (โ{x : Metadomain} โ P(obj(x)) โ Z) โ (โโ P) โ Z

    -- TODO: These are convenient, but it may not actually be possible to construct it constructively? Maybe wrap it inside something?
    {-[โ]-elem  : โ{P : Domain โ Stmt} โ (โโ P) โ Domain
    [โ]-proof : โ{P : Domain โ Stmt} โ (e : โโ P) โ P([โ]-elem(e))-}

    -- TODO: Are these really correct?
    [โ]-intro : โ{P : Domain โ Stmt} โ (โ{x : Metadomain} โ P(obj(x))) โ (โโ P)
    [โ]-elim  : โ{P : Domain โ Stmt} โ (โโ P) โ (โ{x : Metadomain} โ P(obj(x)))
open Predicate โฆ ... โฆ public

record PredicateEq {โโ โโ} : Type{Lvl.๐(โโ Lvl.โ โโ)} where
  field
    โฆ predicate โฆ : Predicate{โโ}{โโ}

  field
    _โก_ : Domain โ Domain โ Stmt

  field
    [โก]-intro : โ{x} โ (x โก x)
    [โก]-elim  : โ{P : Domain โ Stmt}{a b} โ (a โก b) โ P(a) โ P(b)

  -- Definition of uniqueness of a property.
  -- This means that there is at most one element that satisfies this property.
  -- This is similiar to "Injective" for functions, but this is for statements.
  Unique : (Domain โ Stmt) โ Stmt
  Unique(P) = โโ(x โฆ โโ(y โฆ (P(x) โง P(y)) โถ (x โก y)))

  -- Definition of existence of an unique element satisfying a property.
  -- This means that there is one and only one element that satisfies this property.
  โโ! : (Domain โ Stmt) โ Stmt
  โโ!(P) = ((โโ P) โง Unique(P))

open PredicateEq โฆ ... โฆ public
