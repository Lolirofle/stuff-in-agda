import      Lvl
open import Structure.Set
open import Structure.Setoid
open import Type

module Automaton
  {‚Ñì‚Çê ‚Ñì‚Çë‚Çê} (Alphabet : Type{‚Ñì‚Çê}) ‚¶É equiv-alphabet : Equiv{‚Ñì‚Çë‚Çê}(Alphabet) ‚¶Ñ
  {‚Ñì·µ¢ ‚Ñì‚Çë·µ¢} (Input : Type{‚Ñì·µ¢}) ‚¶É equiv-Input : Equiv{‚Ñì‚Çë·µ¢}(Input) ‚¶Ñ
  {‚Ñì‚Çí ‚Ñì‚Çë‚Çí} (Output : Type{‚Ñì‚Çí}) ‚¶É equiv-Output : Equiv{‚Ñì‚Çë‚Çí}(Output) ‚¶Ñ
  where

open import Structure.Function
open import Structure.Function.Domain
open import Structure.Operator
open import Structure.Relator

-- TODO: Some kind of useful generalisation on different automata? Is it possible to express any useful rules?
record Automaton{‚Ñìc ‚Ñì‚Çëc} : Type{‚Ñì‚Çê Lvl.‚äî ‚Ñì‚Çë‚Çê Lvl.‚äî ‚Ñì·µ¢ Lvl.‚äî ‚Ñì‚Çë·µ¢ Lvl.‚äî ‚Ñì‚Çí Lvl.‚äî ‚Ñì‚Çë‚Çí Lvl.‚äî Lvl.ùêí(‚Ñìc Lvl.‚äî ‚Ñì‚Çëc)} where
  field
    Configuration : Type{‚Ñìc}
  field
    initial : Input ‚Üí Configuration
    transition : Alphabet ‚Üí Configuration ‚Üí Configuration
    input : Configuration ‚Üí Input
    output : Configuration ‚Üí Output
  field
    ‚¶É equiv-configuration ‚¶Ñ : Equiv{‚Ñì‚Çëc}(Configuration)
    ‚¶É transition-function ‚¶Ñ : BinaryOperator(transition)
    ‚¶É initial-function ‚¶Ñ : Function(initial)
    ‚¶É input-function ‚¶Ñ : Function(input)
    ‚¶É output-function ‚¶Ñ : Function(output)
    ‚¶É initial-input-inverse ‚¶Ñ : Inverse(initial)(input)
