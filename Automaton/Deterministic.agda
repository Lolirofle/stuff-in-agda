import      Lvl
open import Structure.Setoid.WithLvl
open import Type

module Automaton.Deterministic where

open import Data.List renaming (‚àÖ to Œµ ; _‚ä∞_ to _¬∑_)
open import Data.List.Equiv
open import Data.List.Functions using (postpend ; _++_)
open import Data.List.Proofs
open import Functional
open import Logic
open import Sets.ExtensionalPredicateSet using (PredSet ; intro ; _‚àà_ ; _‚àã_ ; ‚ä∂ ; [‚àã]-binaryRelator)
import      Structure.Function.Names as Names
open import Structure.Operator
open import Structure.Relator.Properties

-- According to http://www.cse.chalmers.se/edu/course/TMV027/lec5.pdf

private variable ‚Ñì‚Çö ‚Ñì‚Çõ ‚Ñì‚Çë‚ÇÅ ‚Ñì‚Çê ‚Ñì‚Çë‚ÇÇ : Lvl.Level

module _
  {‚Ñì‚Çö}
  (State : Type{‚Ñì‚Çõ}) ‚¶É equiv-state : Equiv{‚Ñì‚Çë‚ÇÅ}(State) ‚¶Ñ
  (Alphabet : Type{‚Ñì‚Çê}) ‚¶É equiv-alphabet : Equiv{‚Ñì‚Çë‚ÇÇ}(Alphabet) ‚¶Ñ
  where

  -- Deterministic Automata
  -- `State`      (Q)  is the set of states.
  -- `Alphabet`   (Œ£)  is the set of symbols/the alphabet.
  -- `transition` (Œ¥)  is the transition function.
  -- `start`      (q‚ÇÄ) is the start state.
  -- `Final`      (F)  is the subset of State which are the final/accepting states.
  record Deterministic : Type{‚Ñì‚Çõ Lvl.‚äî ‚Ñì‚Çë‚ÇÅ Lvl.‚äî ‚Ñì‚Çë‚ÇÇ Lvl.‚äî ‚Ñì‚Çê Lvl.‚äî Lvl.ùêí(‚Ñì‚Çö)} where
    constructor deterministic
    field
      transition : State ‚Üí Alphabet ‚Üí State
      ‚¶É transition-binaryOperator ‚¶Ñ : BinaryOperator(transition)
      start      : State
      Final      : PredSet{‚Ñì‚Çö}(State)

    Word = List(Alphabet)

    -- Chained transition using a word (list of characters).
    wordTransition : State ‚Üí Word ‚Üí State
    wordTransition initialState Œµ       = initialState
    wordTransition initialState (a ¬∑ l) = wordTransition (transition initialState a) l

    module LetterNotation where
      Q  = State
      Œ£  = Alphabet
      Œ¥  = transition
      Œ¥ÃÇ  = wordTransition
      q‚ÇÄ = start
      F  = Final

    -- A word is accepted by the automaton when it can transition from the start state to a final state.
    AcceptsWord : Word ‚Üí Stmt
    AcceptsWord = (_‚àà Final) ‚àò wordTransition start

    transitionedAutomaton : Alphabet ‚Üí Deterministic
    transition (transitionedAutomaton _) = transition
    start      (transitionedAutomaton c) = transition start c
    Final      (transitionedAutomaton _) = Final

    wordTransitionedAutomaton : Word ‚Üí Deterministic
    transition (wordTransitionedAutomaton _) = transition
    start      (wordTransitionedAutomaton w) = wordTransition start w
    Final      (wordTransitionedAutomaton _) = Final

module _
  {State : Type{‚Ñì‚Çõ}} ‚¶É equiv-state : Equiv{‚Ñì‚Çë‚ÇÅ}(State) ‚¶Ñ
  {Alphabet : Type{‚Ñì‚Çê}} ‚¶É equiv-alphabet : Equiv{‚Ñì‚Çë‚ÇÇ}(Alphabet) ‚¶Ñ
  {d : Deterministic{‚Ñì‚Çö = ‚Ñì‚Çö}(State)(Alphabet)}
  where

  open import Data.List.Equiv.Correctness
  open import Structure.Operator.Properties
  open import Syntax.Transitivity

  open Deterministic(d)

  instance
    wordTransition-binaryOperator : BinaryOperator(wordTransition)
    wordTransition-binaryOperator = intro p where
      p : Names.Congruence‚ÇÇ(wordTransition)
      p {x‚ÇÇ = Œµ}       {y‚ÇÇ = Œµ}       xy1 xy2 = xy1
      p {x‚ÇÇ = c‚ÇÅ ¬∑ w‚ÇÅ} {y‚ÇÇ = c‚ÇÇ ¬∑ w‚ÇÇ} xy1 xy2 = p{x‚ÇÇ = w‚ÇÅ}{y‚ÇÇ = w‚ÇÇ} (congruence‚ÇÇ(transition) xy1 ([‚ä∞]-generalized-cancellation·µ£ xy2)) ([‚ä∞]-generalized-cancellation‚Çó xy2)

  wordTransition-postpend : ‚àÄ{s}{w}{a} ‚Üí ((wordTransition s (postpend a w)) ‚â° transition (wordTransition s w) a)
  wordTransition-postpend {s}{Œµ}    {a} = reflexivity(_‚â°_) {x = transition s a}
  wordTransition-postpend {s}{x ¬∑ w}{a} = wordTransition-postpend {transition s x}{w}{a}

  -- Note: ((swap ‚àò wordTransition) d (w‚ÇÅ ++ w‚ÇÇ) ‚äú (swap ‚àò wordTransition) d w‚ÇÇ ‚àò (swap ‚àò wordTransition) d w‚ÇÅ)
  wordTransition-[++] : ‚àÄ{s}{w‚ÇÅ w‚ÇÇ} ‚Üí (wordTransition s (w‚ÇÅ ++ w‚ÇÇ) ‚â° (wordTransition (wordTransition s w‚ÇÅ) w‚ÇÇ))
  wordTransition-[++] {s = s} {w‚ÇÅ = w‚ÇÅ} {w‚ÇÇ = Œµ} =
    wordTransition s (w‚ÇÅ ++ Œµ)             üùñ[ _‚â°_ ]-[ congruence‚ÇÇ·µ£(wordTransition)(s) (identity·µ£(_++_)(Œµ) {w‚ÇÅ}) ]
    wordTransition s w‚ÇÅ                    üùñ[ _‚â°_ ]-[]
    wordTransition (wordTransition s w‚ÇÅ) Œµ üùñ-end
  wordTransition-[++] {s = s} {w‚ÇÅ = w‚ÇÅ} {w‚ÇÇ = c‚ÇÇ ¬∑ w‚ÇÇ} =
    wordTransition s (w‚ÇÅ ++ (c‚ÇÇ ¬∑ w‚ÇÇ))                      üùñ[ _‚â°_ ]-[ congruence‚ÇÇ·µ£(wordTransition)(s) ([++]-middle-prepend-postpend{l‚ÇÅ = w‚ÇÅ}) ]-sym
    wordTransition s (postpend c‚ÇÇ w‚ÇÅ ++ w‚ÇÇ)                 üùñ[ _‚â°_ ]-[ wordTransition-[++] {s = s}{w‚ÇÅ = postpend c‚ÇÇ w‚ÇÅ}{w‚ÇÇ = w‚ÇÇ} ]
    wordTransition (wordTransition s (postpend c‚ÇÇ w‚ÇÅ)) w‚ÇÇ   üùñ[ _‚â°_ ]-[ congruence‚ÇÇ‚Çó(wordTransition)(w‚ÇÇ) (wordTransition-postpend{s = s}{w = w‚ÇÅ}) ]
    wordTransition (transition (wordTransition s w‚ÇÅ) c‚ÇÇ) w‚ÇÇ üùñ-end
