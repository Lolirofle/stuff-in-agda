import      Lvl
open import Structure.Setoid
open import Type

module Automaton.Deterministic.Proofs
  {‚Ñì‚Çê ‚Ñì‚Çë‚Çê} {Alphabet : Type{‚Ñì‚Çê}} ‚¶É equiv-alphabet : Equiv{‚Ñì‚Çë‚Çê}(Alphabet) ‚¶Ñ
  {‚Ñì‚Çõ ‚Ñì‚Çë‚Çõ} {State : Type{‚Ñì‚Çõ}} ‚¶É equiv-state : Equiv{‚Ñì‚Çë‚Çõ}(State) ‚¶Ñ
  where

open import Automaton.Deterministic(Alphabet) ‚¶É equiv-alphabet ‚¶Ñ
open import Data.List.Equiv
open import Data.List.Functions using (postpend ; _++_)
open import Data.List.Proofs
import      Structure.Function.Names as Names
open import Structure.Operator
open import Structure.Operator.Properties
open import Structure.Relator.Properties
open import Syntax.Transitivity

private variable ‚Ñì‚Çë‚Çó ‚Ñì‚Çö : Lvl.Level

module _ {d : Deterministic(State){‚Ñì‚Çö}} where
  open Deterministic d

  module _ ‚¶É equiv-Word : Equiv{‚Ñì‚Çë‚Çó}(Word) ‚¶Ñ ‚¶É ext-Word : Extensionality(equiv-Word) ‚¶Ñ where
    instance
      wordTransition-function : BinaryOperator(wordTransition)
      wordTransition-function = intro p where
        p : Names.Congruence‚ÇÇ(wordTransition)
        p {x‚ÇÇ = Œµ}       {y‚ÇÇ = Œµ}       xy1 xy2 = xy1
        p {x‚ÇÇ = Œµ}       {c‚ÇÇ ¬∑ w‚ÇÇ}      xy1 xy2 with () ‚Üê [‚àÖ][‚ä∞]-unequal xy2
        p {x‚ÇÇ = c‚ÇÅ ¬∑ w‚ÇÅ} {Œµ}            xy1 xy2 with () ‚Üê [‚àÖ][‚ä∞]-unequal (symmetry(_‚â°_) xy2)
        p {x‚ÇÇ = c‚ÇÅ ¬∑ w‚ÇÅ} {y‚ÇÇ = c‚ÇÇ ¬∑ w‚ÇÇ} xy1 xy2 = p{x‚ÇÇ = w‚ÇÅ}{y‚ÇÇ = w‚ÇÇ} (congruence‚ÇÇ(transition) xy1 ([‚ä∞]-generalized-cancellation·µ£ xy2)) ([‚ä∞]-generalized-cancellation‚Çó xy2)

    wordTransition-postpend : ‚àÄ{s}{w}{a} ‚Üí ((wordTransition s (postpend a w)) ‚â° transition (wordTransition s w) a)
    wordTransition-postpend {s}{Œµ}    {a} = reflexivity(_‚â°_) {x = transition s a}
    wordTransition-postpend {s}{x ¬∑ w}{a} = wordTransition-postpend {transition s x}{w}{a}

    -- Note: ((swap ‚àò wordTransition) d (w‚ÇÅ ++ w‚ÇÇ) ‚äú (swap ‚àò wordTransition) d w‚ÇÇ ‚àò (swap ‚àò wordTransition) d w‚ÇÅ)
    wordTransition-[++] : ‚àÄ{s}{w‚ÇÅ w‚ÇÇ} ‚Üí (wordTransition s (w‚ÇÅ ++ w‚ÇÇ) ‚â° (wordTransition (wordTransition s w‚ÇÅ) w‚ÇÇ))
    wordTransition-[++] {s = s} {w‚ÇÅ = w‚ÇÅ} {w‚ÇÇ = Œµ} =
      wordTransition s (w‚ÇÅ ++ Œµ)             üùñ[ _‚â°_ ]-[ congruence‚ÇÇ-‚ÇÇ(wordTransition)(s) (identity·µ£(_++_)(Œµ) {w‚ÇÅ}) ]
      wordTransition s w‚ÇÅ                    üùñ[ _‚â°_ ]-[]
      wordTransition (wordTransition s w‚ÇÅ) Œµ üùñ-end
    wordTransition-[++] {s = s} {w‚ÇÅ = w‚ÇÅ} {w‚ÇÇ = c‚ÇÇ ¬∑ w‚ÇÇ} =
      wordTransition s (w‚ÇÅ ++ (c‚ÇÇ ¬∑ w‚ÇÇ))                      üùñ[ _‚â°_ ]-[ congruence‚ÇÇ-‚ÇÇ(wordTransition)(s) ([++]-middle-prepend-postpend{l‚ÇÅ = w‚ÇÅ}) ]-sym
      wordTransition s (postpend c‚ÇÇ w‚ÇÅ ++ w‚ÇÇ)                 üùñ[ _‚â°_ ]-[ wordTransition-[++] {s = s}{w‚ÇÅ = postpend c‚ÇÇ w‚ÇÅ}{w‚ÇÇ = w‚ÇÇ} ]
      wordTransition (wordTransition s (postpend c‚ÇÇ w‚ÇÅ)) w‚ÇÇ   üùñ[ _‚â°_ ]-[ congruence‚ÇÇ-‚ÇÅ(wordTransition)(w‚ÇÇ) (wordTransition-postpend{s = s}{w = w‚ÇÅ}) ]
      wordTransition (transition (wordTransition s w‚ÇÅ) c‚ÇÇ) w‚ÇÇ üùñ-end
