import      Lvl
open import Structure.Setoid
open import Type

module Automaton.Deterministic.Accessible
  {‚Ñì‚Çê ‚Ñì‚Çë‚Çê} {Alphabet : Type{‚Ñì‚Çê}} ‚¶É equiv-alphabet : Equiv{‚Ñì‚Çë‚Çê}(Alphabet) ‚¶Ñ
  where

open import Automaton.Deterministic(Alphabet) ‚¶É equiv-alphabet ‚¶Ñ
open import Automaton.Deterministic.Proofs ‚¶É equiv-alphabet ‚¶Ñ
open import Data.List.Equiv
open import Data.List.Functions using (postpend ; _++_)
open import Logic.Predicate
open import Logic.Predicate.Equiv
open import Sets.ExtensionalPredicateSet using (PredSet ; intro ; _‚àà_ ; _‚àã_ ; ‚ä∂ ; [‚àã]-binaryRelator)
open import Structure.Operator
open import Structure.Relator
open import Structure.Relator.Properties
open import Syntax.Transitivity

private variable ‚Ñì‚Çõ ‚Ñì‚Çë‚Çõ ‚Ñì‚Çö ‚Ñì‚Çë‚Çó : Lvl.Level

module _ {State : Type{‚Ñì‚Çõ}} ‚¶É equiv-state : Equiv{‚Ñì‚Çë‚Çõ}(State) ‚¶Ñ where
  module _ (d : Deterministic(State){‚Ñì‚Çö}) where
    open Deterministic d

    -- The subset of State which are the accessible states from the start state by chained transitions.
    Accessible : PredSet(State)
    Accessible = ‚ä∂(wordTransition start)

    instance
      accessible-start : (start ‚àà Accessible)
      accessible-start = [‚àÉ]-intro Œµ ‚¶É reflexivity(_‚â°_) {x = start} ‚¶Ñ

    module _ ‚¶É equiv-Word : Equiv{‚Ñì‚Çë‚Çó}(Word) ‚¶Ñ ‚¶É ext-Word : Extensionality(equiv-Word) ‚¶Ñ where
      instance
        accessible-transition : ‚àÄ{s}{a} ‚Üí ‚¶É _ : (s ‚àà Accessible) ‚¶Ñ ‚Üí (transition s a ‚àà Accessible)
        accessible-transition {s} {a = a} ‚¶É [‚àÉ]-intro w ‚¶É p ‚¶Ñ ‚¶Ñ = [‚àÉ]-intro (postpend a w)
          ‚¶É
            wordTransition start (postpend a w)   üùñ-[ wordTransition-postpend {d = d}{s = start}{w = w}{a = a} ]
            transition (wordTransition start w) a üùñ-[ congruence‚ÇÇ-‚ÇÅ(transition) a p ]
            transition s a                        üùñ-end
          ‚¶Ñ

  module _ where
    open Deterministic

    module _ ‚¶É equiv-Word : Equiv{‚Ñì‚Çë‚Çó}(Word) ‚¶Ñ ‚¶É ext-Word : Extensionality(equiv-Word) ‚¶Ñ where
      accessibleAutomaton : (d : Deterministic(State){‚Ñì‚Çö}) ‚Üí Deterministic(‚àÉ(_‚àà Accessible d))
      transition (accessibleAutomaton d) ([‚àÉ]-intro s) a = [‚àÉ]-intro (transition d s a) ‚¶É accessible-transition d ‚¶Ñ
      BinaryOperator.congruence (transition-binaryOperator (accessibleAutomaton d)) = congruence‚ÇÇ(transition d)
      start (accessibleAutomaton d) = [‚àÉ]-intro (start d) ‚¶É accessible-start d ‚¶Ñ
      Final (accessibleAutomaton d) PredSet.‚àã [‚àÉ]-intro s = s ‚àà Final d
      PredSet.preserve-equiv (Final (accessibleAutomaton d)) = UnaryRelator-intro·µ£ \{ {[‚àÉ]-intro x} {[‚àÉ]-intro y} ‚Üí substitute‚ÇÇ-‚ÇÇ·µ£(_‚àã_)(Final d) {x}{y} }
