import      Lvl
open import Structure.Setoid.WithLvl
open import Type

module Automaton.Deterministic.Finite where

open import Automaton.Deterministic
open import Data.Boolean
open import Data.Boolean.Stmt
open import Data.List renaming (‚àÖ to Œµ ; _‚ä∞_ to _¬∑_)
open import Data.List.Setoid
open import Data.List.Functions using (postpend ; _++_)
open import Data.List.Proofs
open import Functional
open import Logic.Propositional
open import Logic
open import Sets.ExtensionalPredicateSet using (PredSet ; intro ; _‚àà_ ; _‚àã_ ; ‚ä∂ ; [‚àã]-binaryRelator)
import      Structure.Function.Names as Names
open import Structure.Operator
open import Structure.Relator.Properties
open import Type.Size.Finite

private variable ‚Ñì‚Çö ‚Ñì‚Çõ ‚Ñì‚Çë‚ÇÅ ‚Ñì‚Çê ‚Ñì‚Çë‚ÇÇ : Lvl.Level

module _
  {‚Ñì‚Çö}
  (State : Type{‚Ñì‚Çõ}) ‚¶É equiv-state : Equiv{‚Ñì‚Çë‚ÇÅ}(State) ‚¶Ñ
  (Alphabet : Type{‚Ñì‚Çê}) ‚¶É equiv-alphabet : Equiv{‚Ñì‚Çë‚ÇÇ}(Alphabet) ‚¶Ñ
  where

  record DFA : Type{‚Ñì‚Çõ Lvl.‚äî ‚Ñì‚Çë‚ÇÅ Lvl.‚äî ‚Ñì‚Çë‚ÇÇ Lvl.‚äî ‚Ñì‚Çê Lvl.‚äî Lvl.ùêí(‚Ñì‚Çö)} where
    field
      ‚¶É State-finite ‚¶Ñ : Finite(State)
      ‚¶É Alphabet-finite ‚¶Ñ : Finite(Alphabet)
      automata : Deterministic{‚Ñì‚Çö = ‚Ñì‚Çö}(State)(Alphabet)
    open Deterministic(automata) hiding (transitionedAutomaton ; wordTransitionedAutomaton) public

    transitionedAutomaton : Alphabet ‚Üí DFA
    transitionedAutomaton c = record{automata = Deterministic.transitionedAutomaton(automata) c}

    wordTransitionedAutomaton : Word ‚Üí DFA
    wordTransitionedAutomaton w = record{automata = Deterministic.wordTransitionedAutomaton(automata) w}

    postulate isFinal : State ‚Üí Bool
    postulate isFinal-correctness : ‚àÄ{s} ‚Üí IsTrue(isFinal s) ‚Üî (s ‚àà Final)

    isWordAccepted : Word ‚Üí Bool
    isWordAccepted(w) = isFinal(wordTransition(start)(w))

  pattern dfa {fin-Q} {fin-Œ£} Œ¥ {Œ¥-op} q‚ÇÄ F = record{State-finite = fin-Q ; Alphabet-finite = fin-Œ£ ; automata = deterministic Œ¥ ‚¶É Œ¥-op ‚¶Ñ q‚ÇÄ F}
