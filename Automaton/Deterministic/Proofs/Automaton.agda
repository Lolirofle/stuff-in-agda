import      Lvl
open import Structure.Set
open import Structure.Setoid
open import Type

module Automaton.Deterministic.Proofs.Automaton
  {‚Ñì‚Çê ‚Ñì‚Çë‚Çê} (Alphabet : Type{‚Ñì‚Çê}) ‚¶É equiv-alphabet : Equiv{‚Ñì‚Çë‚Çê}(Alphabet) ‚¶Ñ
  {‚Ñì‚Çõ ‚Ñì‚Çë‚Çõ} (State : Type{‚Ñì‚Çõ}) ‚¶É equiv-state : Equiv{‚Ñì‚Çë‚Çõ}(State) ‚¶Ñ
  {‚Ñì‚Çõ‚Çõ ‚Ñì‚Çë‚Çõ‚Çõ ‚Ñì‚Çõ‚Çõ‚Çõ} (StateSet : Type{‚Ñì‚Çõ‚Çõ}) ‚¶É equiv-state-set : Equiv{‚Ñì‚Çë‚Çõ‚Çõ}(StateSet) ‚¶Ñ
  {_‚àà_ : State ‚Üí StateSet ‚Üí Type{‚Ñì‚Çõ‚Çõ‚Çõ}} ‚¶É state-set-ext : SetExtensionality(_‚àà_) ‚¶Ñ
  where

open import Data.List using (List)
open import Structure.Operator

  {-
  open import Automaton
  open import Data
  open import Functional
  open import Data.Boolean
  open import Structure.Function
  open import Type.Identity.Proofs
  automaton : Automaton Alphabet (Unit{Lvl.ùüé}) ‚¶É Id-equiv ‚¶Ñ Bool ‚¶É Id-equiv ‚¶Ñ
  Automaton.Configuration         automaton = State
  Automaton.initial               automaton = const start
  Automaton.transition            automaton = transition
  Automaton.input                 automaton = const <>
  Automaton.output                automaton = isFinal
  Automaton.initial-function      automaton = {!const-function!}
  Automaton.input-function        automaton = {!const-function!}
  Automaton.initial-input-inverse automaton = {!!}
  -}
