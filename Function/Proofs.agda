module Function.Proofs where

import      Lvl
open import Logic
open import Logic.Classical
open import Logic.Computability
open import Logic.Propositional
open import Logic.Predicate
open import Functional
open import Function.Inverse·µ£
open import Function.Names using (_‚äú_)
open import Structure.Setoid using (Equiv) renaming (_‚â°_ to _‚â°‚Çõ_)
open import Structure.Setoid.Uniqueness
open import Structure.Relator.Properties
open import Structure.Relator
open import Structure.Function.Domain
open import Structure.Function.Domain.Proofs
open import Structure.Function
open import Structure.Operator
open import Syntax.Transitivity
open import Type
open import Type.Properties.Empty

private variable ‚Ñì ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚ÇÉ ‚Ñì‚Çó ‚Ñì‚Çí ‚Ñì‚Çí‚ÇÅ ‚Ñì‚Çí‚ÇÇ ‚Ñì‚Çí‚ÇÉ ‚Ñì‚Çí‚ÇÑ ‚Ñì‚Çí‚ÇÖ ‚Ñì‚Çí‚ÇÜ ‚Ñì‚Çí‚Çá ‚Ñì‚Çë ‚Ñì‚Çë‚ÇÅ ‚Ñì‚Çë‚ÇÇ ‚Ñì‚Çë‚ÇÉ ‚Ñì‚Çë‚ÇÑ ‚Ñì‚Çë‚ÇÖ ‚Ñì‚Çë‚ÇÜ ‚Ñì‚Çë‚Çá : Lvl.Level

module _ {T : Type{‚Ñì‚Çí}} ‚¶É eq : Equiv{‚Ñì‚Çë}(T) ‚¶Ñ where
  instance
    -- Identity function is a function.
    id-function : Function(id)
    Function.congruence(id-function) = id

  instance
    -- Identity function is injective.
    id-injective : Injective(id)
    Injective.proof(id-injective) = id

  instance
    -- Identity function is surjective.
    id-surjective : Surjective(id)
    Surjective.proof(id-surjective) {y} = [‚àÉ]-intro (y) ‚¶É reflexivity(_‚â°‚Çõ_) ‚¶Ñ

  instance
    -- Identity function is bijective.
    id-bijective : Bijective(id)
    id-bijective = injective-surjective-to-bijective(id)

  instance
    id-idempotent : Idempotent(id)
    id-idempotent = intro(reflexivity _)

  instance
    id-involution : Involution(id)
    id-involution = intro(reflexivity _)

  instance
    id-inverse‚Çó : Inverse‚Çó(id)(id)
    id-inverse‚Çó = intro(reflexivity _)

  instance
    id-inverse·µ£ : Inverse·µ£(id)(id)
    id-inverse·µ£ = intro(reflexivity _)

  instance
    id-inverse : Inverse(id)(id)
    id-inverse = [‚àß]-intro id-inverse‚Çó id-inverse·µ£

module _ {A : Type{‚Ñì‚Çí‚ÇÅ}} ‚¶É eq-a : Equiv{‚Ñì‚Çë‚ÇÅ}(A) ‚¶Ñ {B : Type{‚Ñì‚Çí‚ÇÇ}} ‚¶É eq-b : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ where
  instance
    -- Constant functions are functions.
    const-function : ‚àÄ{c : B} ‚Üí Function {A = A}{B = B} (const(c))
    Function.congruence(const-function) _ = reflexivity(_‚â°‚Çõ_)

  instance
    -- Constant functions are constant.
    const-constant : ‚àÄ{c : B} ‚Üí Constant {A = A}{B = B} (const(c))
    Constant.proof const-constant = reflexivity(_‚â°‚Çõ_)

module _ {A : Type{‚Ñì‚Çí‚ÇÅ}} ‚¶É eq-a : Equiv{‚Ñì‚Çë‚ÇÅ}(A) ‚¶Ñ {B : Type{‚Ñì‚Çí‚ÇÇ}} ‚¶É eq-b : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ where
  open import Function.Equals
  open import Function.Equals.Proofs

  -- The constant function is extensionally a function.
  instance
    const-function-function : ‚àÄ{c : B} ‚Üí Function {A = B}{B = A ‚Üí B} const
    Function.congruence const-function-function = [‚äú]-abstract

module _ {a : Type{‚Ñì‚Çí‚ÇÅ}}{b : Type{‚Ñì‚Çí‚ÇÇ}}{c : Type{‚Ñì‚Çí‚ÇÉ}}{d : Type{‚Ñì‚Çí‚ÇÑ}} ‚¶É _ : Equiv{‚Ñì‚Çë}(a ‚Üí d) ‚¶Ñ where
  -- Function composition is associative.
  [‚àò]-associativity : ‚àÄ{f : c ‚Üí d}{g : b ‚Üí c}{h : a ‚Üí b} ‚Üí ((f ‚àò (g ‚àò h)) ‚â°‚Çõ ((f ‚àò g) ‚àò h))
  [‚àò]-associativity = reflexivity(_‚â°‚Çõ_)

module _ {a : Type{‚Ñì‚Çí‚ÇÅ}}{b : Type{‚Ñì‚Çí‚ÇÇ}} ‚¶É _ : Equiv{‚Ñì‚Çë}(a ‚Üí b) ‚¶Ñ {f : a ‚Üí b} where
  -- Function composition has left identity element.
  [‚àò]-identity‚Çó : (id ‚àò f ‚â°‚Çõ f)
  [‚àò]-identity‚Çó = reflexivity(_‚â°‚Çõ_)

  -- Function composition has right identity element.
  [‚àò]-identity·µ£ : (f ‚àò id ‚â°‚Çõ f)
  [‚àò]-identity·µ£ = reflexivity(_‚â°‚Çõ_)

module _ {a : Type{‚Ñì‚Çí‚ÇÅ}} ‚¶É _ : Equiv{‚Ñì‚Çë‚ÇÅ}(a) ‚¶Ñ {b : Type{‚Ñì‚Çí‚ÇÇ}} ‚¶É _ : Equiv{‚Ñì‚Çë‚ÇÇ}(b) ‚¶Ñ {c : Type{‚Ñì‚Çí‚ÇÉ}} ‚¶É _ : Equiv{‚Ñì‚Çë‚ÇÉ}(c) ‚¶Ñ where
  -- The composition of injective functions is injective.
  -- Source: https://math.stackexchange.com/questions/2049511/is-the-composition-of-two-injective-functions-injective/2049521
  -- Alternative proof: [‚àò]-associativity {f‚Åª¬π}{g‚Åª¬π}{g}{f} becomes id by inverse‚Çó-value injective equivalence
  [‚àò]-injective : ‚àÄ{f : b ‚Üí c}{g : a ‚Üí b} ‚Üí ‚¶É inj-f : Injective(f) ‚¶Ñ ‚Üí ‚¶É inj-g : Injective(g) ‚¶Ñ ‚Üí Injective(f ‚àò g)
  Injective.proof([‚àò]-injective {f = f}{g = g} ‚¶É inj-f ‚¶Ñ ‚¶É inj-g ‚¶Ñ ) {x‚ÇÅ}{x‚ÇÇ} = (injective(g) ‚¶É inj-g ‚¶Ñ {x‚ÇÅ} {x‚ÇÇ}) ‚àò (injective(f) ‚¶É inj-f ‚¶Ñ {g(x‚ÇÅ)} {g(x‚ÇÇ)})

  -- RHS of composition is injective if the composition is injective.
  [‚àò]-injective-elim : ‚àÄ{f : b ‚Üí c} ‚Üí ‚¶É func-f : Function(f) ‚¶Ñ ‚Üí ‚àÄ{g : a ‚Üí b} ‚Üí ‚¶É inj-fg : Injective(f ‚àò g) ‚¶Ñ ‚Üí Injective(g)
  Injective.proof([‚àò]-injective-elim {f = f}{g = g} ‚¶É inj-fg ‚¶Ñ) {x‚ÇÅ}{x‚ÇÇ} (gx‚ÇÅgx‚ÇÇ) = injective(f ‚àò g) ‚¶É inj-fg ‚¶Ñ {x‚ÇÅ} {x‚ÇÇ} (congruence‚ÇÅ(f) (gx‚ÇÅgx‚ÇÇ))

module _ {a : Type{‚Ñì‚Çí‚ÇÅ}} {b : Type{‚Ñì‚Çí‚ÇÇ}} ‚¶É _ : Equiv{‚Ñì‚Çë‚ÇÇ}(b) ‚¶Ñ {c : Type{‚Ñì‚Çí‚ÇÉ}} ‚¶É _ : Equiv{‚Ñì‚Çë‚ÇÉ}(c) ‚¶Ñ where
  -- The composition of surjective functions is surjective.
  [‚àò]-surjective : ‚àÄ{f : b ‚Üí c} ‚Üí ‚¶É func-f : Function(f) ‚¶Ñ ‚Üí ‚àÄ{g : a ‚Üí b} ‚Üí ‚¶É surj-f : Surjective(f) ‚¶Ñ ‚Üí ‚¶É surj-g : Surjective(g) ‚¶Ñ ‚Üí Surjective(f ‚àò g)
  Surjective.proof([‚àò]-surjective {f = f}{g = g}) {y}
    with [‚àÉ]-intro (a) ‚¶É fa‚â°y ‚¶Ñ ‚Üê surjective(f) {y}
    with [‚àÉ]-intro (x) ‚¶É gx‚â°a ‚¶Ñ ‚Üê surjective(g) {a}
    = [‚àÉ]-intro (x) ‚¶É congruence‚ÇÅ(f) gx‚â°a üùñ fa‚â°y ‚¶Ñ

  -- LHS of composition is surjective if the composition is surjective.
  [‚àò]-surjective-elim : ‚àÄ{f : b ‚Üí c}{g : a ‚Üí b} ‚Üí ‚¶É _ : Surjective(f ‚àò g) ‚¶Ñ ‚Üí Surjective(f)
  Surjective.proof([‚àò]-surjective-elim {f = f}{g = g}) {y} with (surjective(f ‚àò g) {y})
  ... | [‚àÉ]-intro (x) ‚¶É fgx‚â°y ‚¶Ñ = [‚àÉ]-intro (g(x)) ‚¶É fgx‚â°y ‚¶Ñ

module _
  {a : Type{‚Ñì‚Çí‚ÇÅ}} ‚¶É equiv-a : Equiv{‚Ñì‚Çë‚ÇÅ}(a) ‚¶Ñ
  {b : Type{‚Ñì‚Çí‚ÇÇ}} ‚¶É equiv-b : Equiv{‚Ñì‚Çë‚ÇÇ}(b) ‚¶Ñ
  {c : Type{‚Ñì‚Çí‚ÇÉ}} ‚¶É equiv-c : Equiv{‚Ñì‚Çë‚ÇÉ}(c) ‚¶Ñ
  where

  -- Bijective functions are closed under function composition.
  -- The composition of bijective functions is bijective.
  [‚àò]-bijective : ‚àÄ{f : b ‚Üí c} ‚Üí ‚¶É func-f : Function(f) ‚¶Ñ ‚Üí ‚àÄ{g : a ‚Üí b} ‚Üí ‚¶É bij-f : Bijective(f) ‚¶Ñ ‚Üí ‚¶É bij-g : Bijective(g) ‚¶Ñ ‚Üí Bijective(f ‚àò g)
  [‚àò]-bijective {f = f} {g = g} =
    injective-surjective-to-bijective(f ‚àò g)
      ‚¶É [‚àò]-injective
        ‚¶É inj-f = bijective-to-injective(f) ‚¶Ñ
        ‚¶É inj-g = bijective-to-injective(g) ‚¶Ñ
      ‚¶Ñ
      ‚¶É [‚àò]-surjective
        ‚¶É surj-f = bijective-to-surjective(f) ‚¶Ñ
        ‚¶É surj-g = bijective-to-surjective(g) ‚¶Ñ
      ‚¶Ñ

  -- The composition of functions is a function.
  [‚àò]-function : ‚àÄ{f : b ‚Üí c}{g : a ‚Üí b} ‚Üí ‚¶É func-f : Function(f) ‚¶Ñ ‚Üí ‚¶É func-g : Function(g) ‚¶Ñ ‚Üí Function(f ‚àò g)
  Function.congruence([‚àò]-function {f = f}{g = g}) = congruence‚ÇÅ(f) ‚àò congruence‚ÇÅ(g)

module _
  {a‚ÇÅ : Type{‚Ñì‚Çí‚ÇÅ}} ‚¶É equiv-a‚ÇÅ : Equiv{‚Ñì‚Çë‚ÇÅ}(a‚ÇÅ) ‚¶Ñ
  {b‚ÇÅ : Type{‚Ñì‚Çí‚ÇÇ}} ‚¶É equiv-b‚ÇÅ : Equiv{‚Ñì‚Çë‚ÇÇ}(b‚ÇÅ) ‚¶Ñ
  {a‚ÇÇ : Type{‚Ñì‚Çí‚ÇÉ}} ‚¶É equiv-a‚ÇÇ : Equiv{‚Ñì‚Çë‚ÇÉ}(a‚ÇÇ) ‚¶Ñ
  {b‚ÇÇ : Type{‚Ñì‚Çí‚ÇÑ}} ‚¶É equiv-b‚ÇÇ : Equiv{‚Ñì‚Çë‚ÇÑ}(b‚ÇÇ) ‚¶Ñ
  {c  : Type{‚Ñì‚Çí‚ÇÖ}} ‚¶É equiv-c  : Equiv{‚Ñì‚Çë‚ÇÖ}(c) ‚¶Ñ
  {f : a‚ÇÇ ‚Üí b‚ÇÇ ‚Üí c}  ‚¶É func-f : BinaryOperator(f) ‚¶Ñ
  {g : a‚ÇÅ ‚Üí b‚ÇÅ ‚Üí a‚ÇÇ} ‚¶É func-g : BinaryOperator(g) ‚¶Ñ
  {h : a‚ÇÅ ‚Üí b‚ÇÅ ‚Üí b‚ÇÇ} ‚¶É func-h : BinaryOperator(h) ‚¶Ñ
  where

  [‚àò]-binaryOperator : BinaryOperator(x ‚Ü¶ y ‚Ü¶ f(g x y)(h x y))
  BinaryOperator.congruence [‚àò]-binaryOperator xy1 xy2 = congruence‚ÇÇ(f) (congruence‚ÇÇ(g) xy1 xy2) (congruence‚ÇÇ(h) xy1 xy2)

module _
  {a : Type{‚Ñì‚Çí‚ÇÅ}} ‚¶É equiv-a : Equiv{‚Ñì‚Çë‚ÇÅ}(a) ‚¶Ñ
  {b : Type{‚Ñì‚Çí‚ÇÇ}} ‚¶É equiv-b : Equiv{‚Ñì‚Çë‚ÇÇ}(b) ‚¶Ñ
  {f : a ‚Üí a ‚Üí b}  ‚¶É func-f : BinaryOperator(f) ‚¶Ñ
  where

  [$‚ÇÇ]-function : Function(f $‚ÇÇ_)
  Function.congruence [$‚ÇÇ]-function = congruence‚ÇÇ(f) $‚ÇÇ_

module _ {X : Type{‚Ñì‚ÇÅ}} {Y : Type{‚Ñì‚ÇÇ}} {Z : Type{‚Ñì‚ÇÉ}} where
  swap-involution : ‚¶É _ : Equiv{‚Ñì‚Çë}(X ‚Üí Y ‚Üí Z) ‚¶Ñ ‚Üí ‚àÄ{f : X ‚Üí Y ‚Üí Z} ‚Üí (swap(swap(f)) ‚â°‚Çõ f)
  swap-involution = reflexivity(_‚â°‚Çõ_)

  swap-involution-fn : ‚¶É _ : Equiv{‚Ñì‚Çë}((X ‚Üí Y ‚Üí Z) ‚Üí (X ‚Üí Y ‚Üí Z)) ‚¶Ñ ‚Üí (swap ‚àò swap ‚â°‚Çõ id {T = X ‚Üí Y ‚Üí Z})
  swap-involution-fn = reflexivity(_‚â°‚Çõ_)

  swap-binaryOperator : ‚¶É _ : Equiv{‚Ñì‚Çë‚ÇÅ}(X) ‚¶Ñ ‚¶É _ : Equiv{‚Ñì‚Çë‚ÇÇ}(Y) ‚¶Ñ ‚¶É _ : Equiv{‚Ñì‚Çë‚ÇÉ}(Z) ‚¶Ñ ‚Üí ‚àÄ{_‚ñ´_ : X ‚Üí Y ‚Üí Z} ‚Üí ‚¶É _ : BinaryOperator(_‚ñ´_) ‚¶Ñ ‚Üí BinaryOperator(swap(_‚ñ´_))
  BinaryOperator.congruence (swap-binaryOperator {_‚ñ´_ = _‚ñ´_} ‚¶É intro p ‚¶Ñ) x‚ÇÅy‚ÇÅ x‚ÇÇy‚ÇÇ = p x‚ÇÇy‚ÇÇ x‚ÇÅy‚ÇÅ

module _ {X : Type{‚Ñì‚ÇÅ}} {Y : Type{‚Ñì‚ÇÇ}} where
  s-combinator-const-id : ‚¶É _ : Equiv{‚Ñì‚Çë}(X ‚Üí X) ‚¶Ñ ‚Üí (_‚àò‚Çõ_ {X = X}{Y = Y ‚Üí X}{Z = X} const const ‚â°‚Çõ id)
  s-combinator-const-id = reflexivity(_‚â°‚Çõ_)

module _ {X : Type{‚Ñì‚ÇÅ}} {Y : Type{‚Ñì‚ÇÇ}} {Z : Type{‚Ñì‚ÇÉ}} ‚¶É equiv-z : Equiv{‚Ñì‚Çë‚ÇÉ}(Z) ‚¶Ñ where
  s-combinator-const-eq : ‚àÄ{f}{a}{b} ‚Üí (_‚àò‚Çõ_{X = X}{Y = Y}{Z = Z} f (const b) a ‚â°‚Çõ f a b)
  s-combinator-const-eq = reflexivity(_‚â°‚Çõ_)

{- TODO: Maybe this is unprovable because types. https://plato.stanford.edu/entries/axiom-choice/#AxiChoLog https://plato.stanford.edu/entries/axiom-choice/choice-and-type-theory.html https://en.wikipedia.org/wiki/Diaconescu%27s_theorem
module _ {fn-ext : FunctionExtensionality} where
  open import Function.Names
  open import Data.Boolean

  function-extensionality-to-classical : ‚àÄ{P} ‚Üí (P ‚à® (¬¨ P))
  function-extensionality-to-classical{P} = where
    A : Bool ‚Üí Stmt
    A(x) = (P ‚à® (x ‚â° ùêπ))

    B : Bool ‚Üí Stmt
    B(x) = (P ‚à® (x ‚â° ùëá))

    C : (Bool ‚Üí Stmt) ‚Üí Stmt
    C(F) = (F ‚äú A) ‚à® (F ‚äú B)
-}

module _ {X : Type{‚Ñì‚Çí‚ÇÅ}} ‚¶É eq-x : Equiv{‚Ñì‚Çë‚ÇÅ}(X) ‚¶Ñ {Y : Type{‚Ñì‚Çí‚ÇÇ}} ‚¶É eq-y : Equiv{‚Ñì‚Çë‚ÇÇ}(Y) ‚¶Ñ {Z : Type{‚Ñì‚Çí‚ÇÉ}} ‚¶É eq-z : Equiv{‚Ñì‚Çë‚ÇÉ}(Z) ‚¶Ñ where
  open import Function.Equals
  open import Function.Equals.Proofs

  s-combinator-injective : Injective(_‚àò‚Çõ_ {X = X}{Y = Y}{Z = Z})
  _‚äú_.proof (Injective.proof s-combinator-injective {f} {g} sxsy) {x} = Function.Equals.intro(\{a} ‚Üí [‚äú]-apply([‚äú]-apply sxsy {const(a)}){x})

  s-combinator-inverse‚Çó : Inverse‚Çó(_‚àò‚Çõ_ {X = X}{Y = Y}{Z = Z})(f ‚Ü¶ a ‚Ü¶ b ‚Ü¶ f (const b) a)
  _‚äú_.proof (Inverse·µ£.proof s-combinator-inverse‚Çó) = reflexivity(_‚â°‚Çõ_)

module _ {A : Type{‚Ñì}} ‚¶É equiv-A : Equiv{‚Ñì‚Çë}(A) ‚¶Ñ where
  classical-constant-endofunction-existence : ‚¶É classical : Classical(A) ‚¶Ñ ‚Üí ‚àÉ{Obj = A ‚Üí A}(Constant)
  classical-constant-endofunction-existence with excluded-middle(A)
  ... | [‚à®]-intro‚Çó a  = [‚àÉ]-intro (const a)
  ... | [‚à®]-intro·µ£ na = [‚àÉ]-intro id ‚¶É intro(\{a} ‚Üí [‚ä•]-elim(na a)) ‚¶Ñ

module _ {T : Type{‚Ñì}} ‚¶É equiv : Equiv{‚Ñì‚Çë}(T) ‚¶Ñ where
  open import Logic.Propositional.Theorems
  open import Structure.Operator.Properties

  proj‚ÇÇ‚Çó-associativity : Associativity{T = T}(proj‚ÇÇ‚Çó)
  proj‚ÇÇ‚Çó-associativity = intro(reflexivity(_))

  proj‚ÇÇ·µ£-associativity : Associativity{T = T}(proj‚ÇÇ·µ£)
  proj‚ÇÇ·µ£-associativity = intro(reflexivity(_))

  proj‚ÇÇ‚Çó-identity‚Çó : ‚àÄ{id : T} ‚Üí Identity‚Çó(proj‚ÇÇ‚Çó)(id) ‚Üî (‚àÄ{x} ‚Üí (Equiv._‚â°_ equiv id x))
  proj‚ÇÇ‚Çó-identity‚Çó = [‚Üî]-intro intro Identity‚Çó.proof

  proj‚ÇÇ‚Çó-identity·µ£ : ‚àÄ{id : T} ‚Üí Identity·µ£(proj‚ÇÇ‚Çó)(id)
  proj‚ÇÇ‚Çó-identity·µ£ = intro(reflexivity(_))

  proj‚ÇÇ‚Çó-identity : ‚àÄ{id : T} ‚Üí Identity(proj‚ÇÇ‚Çó)(id) ‚Üî (‚àÄ{x} ‚Üí (Equiv._‚â°_ equiv id x))
  proj‚ÇÇ‚Çó-identity =
    [‚Üî]-transitivity
      ([‚Üî]-intro (l ‚Ü¶ intro ‚¶É left = l ‚¶Ñ ‚¶É right = proj‚ÇÇ‚Çó-identity·µ£ ‚¶Ñ) Identity.left)
      proj‚ÇÇ‚Çó-identity‚Çó

  proj‚ÇÇ·µ£-identity‚Çó : ‚àÄ{id : T} ‚Üí Identity‚Çó(proj‚ÇÇ·µ£)(id)
  proj‚ÇÇ·µ£-identity‚Çó = intro(reflexivity(_))

  proj‚ÇÇ·µ£-identity·µ£ : ‚àÄ{id : T} ‚Üí Identity·µ£(proj‚ÇÇ·µ£)(id) ‚Üî (‚àÄ{x} ‚Üí (Equiv._‚â°_ equiv id x))
  proj‚ÇÇ·µ£-identity·µ£ = [‚Üî]-intro intro Identity·µ£.proof

  proj‚ÇÇ·µ£-identity : ‚àÄ{id : T} ‚Üí Identity(proj‚ÇÇ·µ£)(id) ‚Üî (‚àÄ{x} ‚Üí (Equiv._‚â°_ equiv id x))
  proj‚ÇÇ·µ£-identity =
    [‚Üî]-transitivity
      ([‚Üî]-intro (r ‚Ü¶ intro ‚¶É left = proj‚ÇÇ·µ£-identity‚Çó ‚¶Ñ ‚¶É right = r ‚¶Ñ) Identity.right)
      proj‚ÇÇ·µ£-identity·µ£
