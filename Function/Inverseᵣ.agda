module Function.Inverse·µ£ where

import      Lvl
open import Logic
open import Logic.Propositional
open import Logic.Predicate
open import Functional
open import Function.Names using (_‚äú_)
open import Structure.Setoid.WithLvl
open import Structure.Function
open import Structure.Function.Domain
open import Structure.Function.Domain.Proofs
open import Structure.Relator.Properties
open import Syntax.Transitivity
open import Type

private variable ‚Ñì ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚Çë ‚Ñì‚Çë‚ÇÅ ‚Ñì‚Çë‚ÇÇ : Lvl.Level
private variable A B : Type{‚Ñì}

module _
  {A : Type{‚Ñì‚ÇÅ}} ‚¶É equiv-A : Equiv{‚Ñì‚Çë‚ÇÅ}(A) ‚¶Ñ
  {B : Type{‚Ñì‚ÇÇ}} ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ
  where

  private variable f : A ‚Üí B

  inv·µ£ : (f : A ‚Üí B) ‚Üí ‚¶É inver·µ£ : Invertible·µ£(f) ‚¶Ñ ‚Üí (B ‚Üí A)
  inv·µ£ f ‚¶É inver·µ£ ‚¶Ñ = [‚àÉ]-witness inver·µ£

module _
  {A : Type{‚Ñì‚ÇÅ}} ‚¶É equiv-A : Equiv{‚Ñì‚Çë‚ÇÅ}(A) ‚¶Ñ
  {B : Type{‚Ñì‚ÇÇ}} ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ
  {f : A ‚Üí B} ‚¶É inver·µ£ : Invertible·µ£(f) ‚¶Ñ
  where

  -- `inv·µ£ f` is a right inverse of `f` for `(_‚àò_)`.
  inv·µ£-inverse·µ£ : Inverse·µ£(f)(inv·µ£(f))
  inv·µ£-inverse·µ£ = [‚àß]-elim·µ£([‚àÉ]-proof inver·µ£)

module _
  {A : Type{‚Ñì‚ÇÅ}} ‚¶É equiv-A : Equiv{‚Ñì‚Çë‚ÇÅ}(A) ‚¶Ñ
  {B : Type{‚Ñì‚ÇÇ}} ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ
  {f : A ‚Üí B} ‚¶É func : Function(f) ‚¶Ñ ‚¶É inj : Injective(f) ‚¶Ñ ‚¶É inver·µ£ : Invertible·µ£(f) ‚¶Ñ
  where

  inv·µ£-invertible : Invertible·µ£(inv·µ£ f)
  inv·µ£-invertible = inverse·µ£-invertible·µ£ {f = f} {f‚Åª¬π = inv·µ£(f)} ‚¶É inver·µ£ = inv·µ£-inverse·µ£ ‚¶Ñ

  inv·µ£-involution : (inv·µ£(inv·µ£(f)) ‚¶É inverse·µ£-invertible·µ£ ‚¶É inver·µ£ = [‚àß]-elim·µ£([‚àÉ]-proof inver·µ£) ‚¶Ñ ‚¶Ñ ‚äú f)
  inv·µ£-involution {x} =
    injective(inv·µ£ f) ‚¶É inverse·µ£-injective ‚¶É equiv-A = equiv-A ‚¶Ñ ‚¶É equiv-B = equiv-B ‚¶Ñ {f = f} ‚¶Ñ $
      (inv·µ£(f) ‚àò inv·µ£(inv·µ£ f))(x) üùñ[ _‚â°_ ]-[ inverse·µ£(inv·µ£ f)(inv·µ£(inv·µ£ f)) ‚¶É inv·µ£-inverse·µ£ ‚¶Ñ ]
      x                           üùñ[ _‚â°_ ]-[ inverse‚Çó(f)(inv·µ£ f) ‚¶É inverse·µ£-inverse‚Çó ‚¶Ñ ]-sym
      inv·µ£ f(f(x))                üùñ-end
    where
      instance _ = [‚àß]-elim·µ£([‚àÉ]-proof(inver·µ£))
      instance _ = inv·µ£-invertible
      instance _ = [‚àß]-elim·µ£([‚àÉ]-proof(inv·µ£-invertible))

