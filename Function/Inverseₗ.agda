module Function.Inverse‚Çó where

import      Lvl
import      Data.Either as Either
open import Data.Either.Proofs
open import Lang.Inspect
open import Logic
open import Logic.Classical
-- open import Logic.Computability
open import Logic.Propositional
open import Logic.Predicate
open import Functional
open import Function.Names using (_‚äú_)
import      Function.Equals as FunctionEq
open import Function.Proofs
-- open import Function.Domains TODO: Unapply
open import Structure.Setoid
open import Structure.Function
open import Structure.Function.Domain
open import Structure.Function.Domain.Proofs
open import Structure.Relator.Properties
open import Syntax.Transitivity
open import Type

-- TODO: Move to Function.Domains
module _ {‚Ñì‚Çí‚ÇÅ ‚Ñì‚Çí‚ÇÇ : Lvl.Level} {X : Type{‚Ñì‚Çí‚ÇÅ}} {Y : Type{‚Ñì‚Çí‚ÇÇ}}  ‚¶É eqY : Equiv(Y) ‚¶Ñ where
  record Unapply (f : X ‚Üí Y) (y : Y) (x : X) : Type{‚Ñì‚Çí‚ÇÇ} where
    constructor intro
    field ‚¶É proof ‚¶Ñ : (f(x) ‚â° y)

module _ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {A : Type{‚Ñì‚ÇÅ}} ‚¶É eqA : Equiv(A) ‚¶Ñ {B : Type{‚Ñì‚ÇÇ}} ‚¶É eqB : Equiv(B) ‚¶Ñ where
  -- An inverse function of an injective function f.
  -- This is definable when the proposition "y is a value in f" for any y is decidable.
  -- Because f is not guaranteed to be surjective, all non-values in the codomain B use the fallback function to make the inverse a total (B ‚Üí A).
  inv‚Çó : (B ‚Üí A) ‚Üí (f : A ‚Üí B) ‚Üí ‚¶É _ : ‚àÄ{y} ‚Üí Classical(‚àÉ(Unapply f(y))) ‚¶Ñ ‚Üí (B ‚Üí A)
  inv‚Çó(fallback) f(y) = Either.map1 [‚àÉ]-witness (const(fallback(y))) (excluded-middle{P = ‚àÉ(Unapply f(y))})
  -- {-# INLINE inv‚Çó #-}

  module _ {fallback : B ‚Üí A} {f : A ‚Üí B} ‚¶É classical-unapply : ‚àÄ{y} ‚Üí Classical(‚àÉ(Unapply f(y))) ‚¶Ñ where
    inv‚Çó-inverse‚Çó : ‚¶É _ : Injective(f) ‚¶Ñ ‚Üí (inv‚Çó(fallback) (f) ‚àò f ‚äú id)
    inv‚Çó-inverse‚Çó{x} with excluded-middle{P = ‚àÉ(Unapply f(f(x)))} | inspect(inv‚Çó(fallback) f) (f(x))
    ... | [‚à®]-intro‚Çó ([‚àÉ]-intro _ ‚¶É intro ‚¶É p ‚¶Ñ ‚¶Ñ) | _ = injective(f) p
    ... | [‚à®]-intro·µ£ p | _ = [‚ä•]-elim(p ([‚àÉ]-intro x ‚¶É intro ‚¶É proof = reflexivity(_‚â°_) ‚¶Ñ ‚¶Ñ))

    [‚àò]-inverse‚Çó : ‚¶É _ : Injective(f) ‚¶Ñ ‚Üí ‚àÉ(g ‚Ü¶ (g ‚àò f ‚äú id))
    [‚àò]-inverse‚Çó = [‚àÉ]-intro(inv‚Çó(fallback) f) ‚¶É inv‚Çó-inverse‚Çó ‚¶Ñ

    inv‚Çó-function : ‚¶É _ : Function(fallback)‚¶Ñ ‚Üí ‚¶É _ : Function(f) ‚¶Ñ ‚Üí Function(inv‚Çó(fallback) f)
    Function.congruence inv‚Çó-function {y‚ÇÅ}{y‚ÇÇ} y‚ÇÅy‚ÇÇ with excluded-middle{P = ‚àÉ(Unapply f(y‚ÇÅ))} | inspect(inv‚Çó(fallback) f) y‚ÇÅ | excluded-middle{P = ‚àÉ(Unapply f(y‚ÇÇ))} | inspect(inv‚Çó(fallback) f) y‚ÇÇ
    ... | [‚à®]-intro‚Çó ([‚àÉ]-intro x‚ÇÅ ‚¶É intro ‚¶É p‚ÇÅ ‚¶Ñ ‚¶Ñ) | intro pp‚ÇÅ | [‚à®]-intro‚Çó ([‚àÉ]-intro x‚ÇÇ ‚¶É intro ‚¶É p‚ÇÇ ‚¶Ñ ‚¶Ñ) | intro pp‚ÇÇ = symmetry(_‚â°_) pp‚ÇÅ üùñ proof-test üùñ pp‚ÇÇ where -- TODO: Requires that Either.map1 is a function/operation
    -- Classical.excluded-middle classical-unapply
    -- {f‚ÇÅ = [‚àÉ]-witness {Pred = Unapply f(y‚ÇÇ)}}
    -- map1-eq (reflexivity(_‚â°_)) (congruence‚ÇÅ(const) ‚¶É const-function-function ‚¶É ? ‚¶Ñ ‚¶Ñ (congruence‚ÇÅ(fallback) y‚ÇÅy‚ÇÇ))
      proof-test :
        (Either.map1
          {‚Ñì‚ÇÅ Lvl.‚äî ‚Ñì‚ÇÇ} {‚àÉ {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ} {A} (Unapply {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ} {A} {B} ‚¶É eqB ‚¶Ñ f y‚ÇÅ)}
          {‚Ñì‚ÇÅ} {A}
          {‚Ñì‚ÇÅ Lvl.‚äî ‚Ñì‚ÇÇ} {‚àÉ {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ} {A} (Unapply {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ} {A} {B} ‚¶É eqB ‚¶Ñ f y‚ÇÅ) ‚Üí ‚ä•}
          [‚àÉ]-witness
          (Œª _ ‚Üí fallback y‚ÇÅ)
          (Classical.excluded-middle (classical-unapply {y‚ÇÅ}))
        )
        ‚â°
        (Either.map1
          {‚Ñì‚ÇÅ Lvl.‚äî ‚Ñì‚ÇÇ} {‚àÉ {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ} {A} (Unapply {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ} {A} {B} ‚¶É eqB ‚¶Ñ f y‚ÇÇ)}
          {‚Ñì‚ÇÅ} {A}
          {‚Ñì‚ÇÅ Lvl.‚äî ‚Ñì‚ÇÇ} {‚àÉ {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ} {A} (Unapply {‚Ñì‚ÇÅ} {‚Ñì‚ÇÇ} {A} {B} ‚¶É eqB ‚¶Ñ f y‚ÇÇ) ‚Üí ‚ä•}
          [‚àÉ]-witness
          (Œª _ ‚Üí fallback y‚ÇÇ)
          (Classical.excluded-middle (classical-unapply {y‚ÇÇ}))
        )
      proof-test = map1-eq {f‚ÇÅ = {![‚àÉ]-witness!}} (reflexivity(_‚â°_)) (congruence‚ÇÅ(const) ‚¶É const-function-function {c = x‚ÇÅ} ‚¶Ñ (congruence‚ÇÅ(fallback) y‚ÇÅy‚ÇÇ)) {!!}
    ... | [‚à®]-intro‚Çó([‚àÉ]-intro x‚ÇÅ ‚¶É intro ‚¶É p‚ÇÅ ‚¶Ñ ‚¶Ñ) | intro pp‚ÇÅ | [‚à®]-intro·µ£ np‚ÇÇ | intro pp‚ÇÇ with () ‚Üê np‚ÇÇ([‚àÉ]-intro(x‚ÇÅ) ‚¶É intro ‚¶É proof = p‚ÇÅ üùñ y‚ÇÅy‚ÇÇ ‚¶Ñ ‚¶Ñ)
    ... | [‚à®]-intro·µ£ np‚ÇÅ | intro pp‚ÇÅ | [‚à®]-intro‚Çó([‚àÉ]-intro x‚ÇÇ ‚¶É intro ‚¶É p‚ÇÇ ‚¶Ñ ‚¶Ñ) | intro pp‚ÇÇ with () ‚Üê np‚ÇÅ([‚àÉ]-intro(x‚ÇÇ) ‚¶É intro ‚¶É proof = p‚ÇÇ üùñ symmetry(_‚â°_) y‚ÇÅy‚ÇÇ ‚¶Ñ ‚¶Ñ)
    ... | [‚à®]-intro·µ£ np‚ÇÅ | intro pp‚ÇÅ | [‚à®]-intro·µ£ np‚ÇÇ | intro pp‚ÇÇ = congruence‚ÇÅ(fallback) y‚ÇÅy‚ÇÇ
