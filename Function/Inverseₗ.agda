module Function.Inverse‚Çó where

import      Lvl
import      Data.Either as Either
open import Data.Either.Proofs
open import Lang.Inspect
open import Logic
open import Logic.Classical
open import Logic.Propositional
open import Logic.Predicate
open import Functional
open import Function.Domains
open import Function.Names using (_‚äú_)
import      Function.Equals as FunctionEq
open import Function.Proofs
open import Structure.Setoid
open import Structure.Function
open import Structure.Function.Domain
open import Structure.Function.Domain.Proofs
open import Structure.Relator.Properties
open import Syntax.Transitivity
open import Type

private variable ‚Ñì ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ ‚Ñì‚Çë ‚Ñì‚Çë‚ÇÅ ‚Ñì‚Çë‚ÇÇ : Lvl.Level

module _
  {A : Type{‚Ñì‚ÇÅ}} ‚¶É equiv-A : Equiv{‚Ñì‚Çë‚ÇÅ}(A) ‚¶Ñ
  {B : Type{‚Ñì‚ÇÇ}} ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ
  where

  -- An inverse function of an injective function f.
  -- This is definable when the proposition "y is a value in f" for any y is decidable.
  -- Because f is not guaranteed to be surjective, all non-values in the codomain B use the fallback function to make the inverse a total (B ‚Üí A).
  inv‚Çó-construction : (B ‚Üí A) ‚Üí (f : A ‚Üí B) ‚Üí ‚¶É _ : ‚àÄ{y} ‚Üí Classical(‚àÉ(Fiber f(y))) ‚¶Ñ ‚Üí (B ‚Üí A)
  inv‚Çó-construction(fallback) f(y) = Either.map1 [‚àÉ]-witness (const(fallback(y))) (excluded-middle(‚àÉ(Fiber f(y))))

  module _ {fallback : B ‚Üí A} {f : A ‚Üí B} ‚¶É classical-unapply : ‚àÄ{y} ‚Üí Classical(‚àÉ(Fiber f(y))) ‚¶Ñ where
    module _ ‚¶É inj : Injective(f) ‚¶Ñ ‚¶É func-fallback : Function(fallback) ‚¶Ñ where
      inv‚Çó-construction-inverse‚Çó : Inverse‚Çó(f)(inv‚Çó-construction(fallback) f)
      Inverse‚Çó.proof inv‚Çó-construction-inverse‚Çó{x} with excluded-middle(‚àÉ(Fiber f(f(x)))) | inspect(inv‚Çó-construction(fallback) f) (f(x))
      ... | [‚à®]-intro‚Çó ([‚àÉ]-intro _ ‚¶É p ‚¶Ñ) | _ = injective(f) p
      ... | [‚à®]-intro·µ£ p | _ = [‚ä•]-elim(p ([‚àÉ]-intro x ‚¶É reflexivity(_‚â°_) ‚¶Ñ))

      inv‚Çó-construction-function : Function(inv‚Çó-construction(fallback) f)
      Function.congruence inv‚Çó-construction-function {y‚ÇÅ} {y‚ÇÇ} y‚ÇÅy‚ÇÇ with Classical.excluded-middle (classical-unapply {y‚ÇÅ}) | Classical.excluded-middle (classical-unapply {y‚ÇÇ})
      ... | [‚à®]-intro‚Çó ([‚àÉ]-intro x‚ÇÅ ‚¶É fxy1 ‚¶Ñ) | [‚à®]-intro‚Çó ([‚àÉ]-intro x‚ÇÇ ‚¶É fxy2 ‚¶Ñ) =
        injective(f) $
          f(x‚ÇÅ)                        üùñ-[ fxy1 ]
          y‚ÇÅ                           üùñ-[ y‚ÇÅy‚ÇÇ ]
          y‚ÇÇ                           üùñ-[ fxy2 ]-sym
          f(x‚ÇÇ)                        üùñ-end
      ... | [‚à®]-intro‚Çó ([‚àÉ]-intro x‚ÇÅ ‚¶É fxy1 ‚¶Ñ) | [‚à®]-intro·µ£ nfxy2                   = [‚ä•]-elim (nfxy2 ([‚àÉ]-intro x‚ÇÅ ‚¶É fxy1 üùñ y‚ÇÅy‚ÇÇ ‚¶Ñ))
      ... | [‚à®]-intro·µ£ nfxy1                   | [‚à®]-intro‚Çó ([‚àÉ]-intro x‚ÇÇ ‚¶É fxy2 ‚¶Ñ) = [‚ä•]-elim (nfxy1 ([‚àÉ]-intro x‚ÇÇ ‚¶É fxy2 üùñ symmetry(_‚â°_) y‚ÇÅy‚ÇÇ ‚¶Ñ))
      ... | [‚à®]-intro·µ£ nfxy1                   | [‚à®]-intro·µ£ nfxy2                   = congruence‚ÇÅ(fallback) y‚ÇÅy‚ÇÇ

      injective-to-invertible‚Çó-construction : Invertible‚Çó(f)
      ‚àÉ.witness injective-to-invertible‚Çó-construction = inv‚Çó-construction(fallback) f
      ‚àÉ.proof   injective-to-invertible‚Çó-construction = [‚àß]-intro inv‚Çó-construction-function inv‚Çó-construction-inverse‚Çó

module _
  {A : Type{‚Ñì‚ÇÅ}} ‚¶É equiv-A : Equiv{‚Ñì‚Çë‚ÇÅ}(A) ‚¶Ñ
  {B : Type{‚Ñì‚ÇÇ}} ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ
  where

  -- An inverse function of an invertible function f.
  inv‚Çó : (f : A ‚Üí B) ‚Üí ‚¶É inver‚Çó : Invertible‚Çó(f) ‚¶Ñ ‚Üí (B ‚Üí A)
  inv‚Çó _ ‚¶É inver‚Çó ‚¶Ñ = [‚àÉ]-witness inver‚Çó

  module _ {f : A ‚Üí B} where
    inv‚Çó-inverse‚Çó : ‚¶É inver‚Çó : Invertible‚Çó(f) ‚¶Ñ ‚Üí Inverse‚Çó(f)(inv‚Çó f)
    inv‚Çó-inverse‚Çó ‚¶É inver‚Çó ‚¶Ñ = [‚àß]-elim·µ£([‚àÉ]-proof inver‚Çó)

  module _ {f : A ‚Üí B} ‚¶É classical-unapply : ‚àÄ{y} ‚Üí Classical(‚àÉ(Fiber f(y))) ‚¶Ñ where
    -- All left inverse functions are functionally equal to one of `inv‚Çó-construction`.
    inverse‚Çó-is-construction : ‚¶É inver‚Çó : Invertible‚Çó(f) ‚¶Ñ ‚¶É inv‚Çó-func : Function(inv‚Çó f) ‚¶Ñ ‚Üí (inv‚Çó f ‚äú inv‚Çó-construction(inv‚Çó f) f)
    inverse‚Çó-is-construction {y} with Classical.excluded-middle (classical-unapply {y})
    ... | [‚à®]-intro‚Çó ([‚àÉ]-intro x ‚¶É p ‚¶Ñ) =
      inv‚Çó f(y)    üùñ-[ congruence‚ÇÅ(inv‚Çó f) p ]-sym
      inv‚Çó f(f(x)) üùñ-[ inverse‚Çó _ _ ‚¶É inv‚Çó-inverse‚Çó ‚¶Ñ ]
      x            üùñ-end
    ... | [‚à®]-intro·µ£ nfxy = reflexivity(_‚â°_)
