module Function.Equiv.Proofs where

open import Data
open import Functional
open import Function.Equiv
import      Lvl
open import Structure.Function
open import Structure.Function.Domain
open import Structure.Operator
open import Structure.Operator.Properties
open import Structure.Relator.Properties
open import Structure.Setoid
open import Syntax.Transitivity
open import Type
open import Type.Properties.Empty
open import Type.Properties.Inhabited
open import Type.Properties.Singleton

private variable ‚Ñì ‚Ñì‚Çí ‚Ñì‚Çò ‚Ñì‚Çë‚ÇÅ ‚Ñì‚Çë‚ÇÇ ‚Ñì‚Çë‚ÇÉ ‚Ñì‚Çë‚ÇÑ ‚Ñì‚Çë‚ÇÖ ‚Ñì‚Çë‚ÇÜ : Lvl.Level
private variable T A B C : Type{‚Ñì}

module _
  ‚¶É equiv-AC : Equiv{‚Ñì‚Çë‚ÇÅ}(A ‚Üí C) ‚¶Ñ
  ‚¶É equiv-BC : Equiv{‚Ñì‚Çë‚ÇÇ}(B ‚Üí C) ‚¶Ñ
  ‚¶É equiv-C : Equiv{‚Ñì‚Çë‚ÇÉ}(C) ‚¶Ñ
  ‚¶É ext-AC : Extensionality equiv-C equiv-AC ‚¶Ñ
  ‚¶É ext-BC : Extensionality equiv-C equiv-BC ‚¶Ñ
  where

  instance
    [‚àò]‚Çó-function : ‚àÄ{g} ‚Üí Function(\f ‚Üí _‚àò_ {X = A}{Y = B}{Z = C} f g)
    Function.congruence ([‚àò]‚Çó-function {g = g}) {f‚ÇÅ}{f‚ÇÇ} pf = functionExtensionality $ \{x} ‚Üí
      f‚ÇÅ(g(x)) üùñ[ _‚â°_ ]-[ congruence‚ÇÅ(_$ g(x)) pf ]
      f‚ÇÇ(g(x)) üùñ-end

module _
  ‚¶É equiv-AB : Equiv{‚Ñì‚Çë‚ÇÅ}(A ‚Üí B) ‚¶Ñ
  ‚¶É equiv-AC : Equiv{‚Ñì‚Çë‚ÇÇ}(A ‚Üí C) ‚¶Ñ
  ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÉ}(B) ‚¶Ñ
  ‚¶É equiv-C : Equiv{‚Ñì‚Çë‚ÇÑ}(C) ‚¶Ñ
  ‚¶É ext-AB : Extensionality equiv-B equiv-AB ‚¶Ñ
  ‚¶É ext-AC : Extensionality equiv-C equiv-AC ‚¶Ñ
  ‚¶É func-BC : ‚àÄ{f : B ‚Üí C} ‚Üí Function(f) ‚¶Ñ
  where

  instance
    [‚àò]·µ£-function : ‚àÄ{f} ‚Üí Function(\g ‚Üí _‚àò_ {X = A}{Y = B}{Z = C} f g)
    Function.congruence ([‚àò]·µ£-function {f = f}) {g‚ÇÅ}{g‚ÇÇ} pg = functionExtensionality $ \{x} ‚Üí
      f(g‚ÇÅ(x)) üùñ[ _‚â°_ ]-[ congruence‚ÇÅ(f) (congruence‚ÇÅ(_$ x) pg) ]
      f(g‚ÇÇ(x)) üùñ-end

module _
  ‚¶É equiv-AB : Equiv{‚Ñì‚Çë‚ÇÅ}(A ‚Üí B) ‚¶Ñ
  ‚¶É equiv-BC : Equiv{‚Ñì‚Çë‚ÇÇ}(B ‚Üí C) ‚¶Ñ
  ‚¶É equiv-AC : Equiv{‚Ñì‚Çë‚ÇÉ}(A ‚Üí C) ‚¶Ñ
  ‚¶É equiv-A : Equiv{‚Ñì‚Çë‚ÇÑ}(A) ‚¶Ñ
  ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÖ}(B) ‚¶Ñ
  ‚¶É equiv-C : Equiv{‚Ñì‚Çë‚ÇÜ}(C) ‚¶Ñ
  ‚¶É ext-AB : Extensionality equiv-B equiv-AB ‚¶Ñ
  ‚¶É ext-BC : Extensionality equiv-C equiv-BC ‚¶Ñ
  ‚¶É ext-AC : Extensionality equiv-C equiv-AC ‚¶Ñ
  ‚¶É func-BC : ‚àÄ{f : B ‚Üí C} ‚Üí Function(f) ‚¶Ñ
  where

  instance
    [‚àò]-binaryOperator : BinaryOperator(_‚àò_ {X = A}{Y = B}{Z = C})
    BinaryOperator.congruence [‚àò]-binaryOperator {f‚ÇÅ} {f‚ÇÇ} {g‚ÇÅ} {g‚ÇÇ} pf pg = functionExtensionality $ \{x} ‚Üí
      f‚ÇÅ(g‚ÇÅ(x)) üùñ[ _‚â°_ ]-[ congruence‚ÇÅ(f‚ÇÅ) (congruence‚ÇÅ(_$ x) pg) ]
      f‚ÇÅ(g‚ÇÇ(x)) üùñ[ _‚â°_ ]-[ congruence‚ÇÅ(_$ g‚ÇÇ(x)) pf ]
      f‚ÇÇ(g‚ÇÇ(x)) üùñ-end

module _
  ‚¶É equiv-AB : Equiv{‚Ñì‚Çë‚ÇÅ}(A ‚Üí B) ‚¶Ñ
  ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ
  ‚¶É ext : Extensionality equiv-B equiv-AB ‚¶Ñ
  where

  instance
    const-function : Function(const{A = A}{B = B})
    Function.congruence const-function {c‚ÇÅ}{c‚ÇÇ} pc = functionExtensionality $ \{x} ‚Üí
      const c‚ÇÅ x üùñ[ _‚â°_ ]-[]
      c‚ÇÅ         üùñ[ _‚â°_ ]-[ pc ]
      c‚ÇÇ         üùñ[ _‚â°_ ]-[]
      const c‚ÇÇ x üùñ-end

  instance
    const-injective : ‚¶É ‚óä A ‚¶Ñ ‚Üí Injective(const{A = A}{B = B})
    Injective.proof const-injective = congruence‚ÇÅ(_$ inhabitant)

module _ ‚¶É equiv-TUnit : Equiv{‚Ñì‚Çë‚ÇÅ}(T ‚Üí Unit{‚Ñì}) ‚¶Ñ where
  Unit-codomain-unit : IsUnit(T ‚Üí Unit{‚Ñì})
  IsUnit.unit       Unit-codomain-unit = const <>
  IsUnit.uniqueness Unit-codomain-unit {f} = reflexivity(_‚â°_)

module _
  ‚¶É equiv-EmptyT : Equiv{‚Ñì‚Çë‚ÇÅ}(Empty{‚Ñì} ‚Üí T) ‚¶Ñ
  ‚¶É equiv-T : Equiv{‚Ñì‚Çë‚ÇÇ}(T) ‚¶Ñ
  ‚¶É ext : Extensionality equiv-T equiv-EmptyT ‚¶Ñ
  where

  Empty-domain-unit : IsUnit(Empty{‚Ñì} ‚Üí T)
  IsUnit.unit       Empty-domain-unit = Data.empty
  IsUnit.uniqueness Empty-domain-unit {f} = functionExtensionality \{}
