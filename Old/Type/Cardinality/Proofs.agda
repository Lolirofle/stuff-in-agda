import      Lvl
open import Type

module Type.Cardinality.Proofs {‚Ñì‚Çó : Lvl.Level} where

open import Functional
import      Logic.Predicate
import      Logic.Predicate.Theorems
import      Relator.Equals
import      Relator.Equals.Proofs
import      Type.Cardinality
import      Type.Functions
import      Type.Functions.Proofs
import      Type.Functions.Inverse
import      Type.Functions.Inverse.Proofs

module _ {‚Ñì‚Çí‚ÇÅ}{‚Ñì‚Çí‚ÇÇ} {X : Type{‚Ñì‚Çí‚ÇÅ}} {Y : Type{‚Ñì‚Çí‚ÇÇ}} where
  open Logic.Predicate               {‚Ñì‚Çó}
  open Logic.Predicate.Theorems      {‚Ñì‚Çó}
  open Type.Cardinality              {‚Ñì‚Çó}
  open Type.Functions                {‚Ñì‚Çó}
  open Type.Functions.Inverse        {‚Ñì‚Çó}
  open Type.Functions.Inverse.Proofs {‚Ñì‚Çó}
  open Type.Functions.Proofs         {‚Ñì‚Çó}

  instance
    [‚âç]-to-[‚âº] : ‚¶É _ : X ‚âç Y ‚¶Ñ ‚Üí (X ‚âº Y)
    [‚âç]-to-[‚âº] ‚¶É proof ‚¶Ñ = [‚àÉ]-map (proof ‚Ü¶ bijective-to-injective ‚¶É proof ‚¶Ñ) proof

  instance
    [‚âç]-to-[‚âΩ] : ‚¶É _ : X ‚âç Y ‚¶Ñ ‚Üí (X ‚âº Y)
    [‚âç]-to-[‚âΩ] ‚¶É proof ‚¶Ñ = [‚àÉ]-map (proof ‚Ü¶ bijective-to-injective ‚¶É proof ‚¶Ñ) proof

  [‚âç]-symmetry : (X ‚âç Y) ‚Üí (Y ‚âç X)
  [‚âç]-symmetry ([‚àÉ]-intro f ‚¶É proof ‚¶Ñ) = [‚àÉ]-intro (inv f ‚¶É proof ‚¶Ñ) ‚¶É inv-bijective {‚Ñì‚Çí‚ÇÅ}{‚Ñì‚Çí‚ÇÇ} {_}{_} {f} ‚¶É proof ‚¶Ñ ‚¶Ñ

  -- TODO: Is it possible to prove these?
  -- [‚âç]-antisymmetry : (X ‚âº Y) ‚Üí (X ‚âΩ Y) ‚Üí (X ‚âç Y)
  -- [‚âç]-antisymmetry = [‚àÉ]-map ()

  -- [‚âº][‚âΩ]-swap : (X ‚âº Y) ‚Üí (Y ‚âΩ X)
  -- [‚âΩ][‚âº]-swap : (X ‚âΩ Y) ‚Üí (Y ‚âº X)

module _ {‚Ñì‚Çí} {X : Type{‚Ñì‚Çí}} where
  open Logic.Predicate          {‚Ñì‚Çó Lvl.‚äî ‚Ñì‚Çí}
  open Logic.Predicate.Theorems {‚Ñì‚Çó Lvl.‚äî ‚Ñì‚Çí}
  open Type.Cardinality         {‚Ñì‚Çó Lvl.‚äî ‚Ñì‚Çí}
  open Type.Functions.Proofs     {‚Ñì‚Çó Lvl.‚äî ‚Ñì‚Çí}

  instance
    [‚âç]-reflexivity : (X ‚âç X)
    [‚âç]-reflexivity = [‚àÉ]-intro (id) ‚¶É id-is-bijective ‚¶Ñ

  instance
    [‚âº]-reflexivity : (X ‚âº X)
    [‚âº]-reflexivity = [‚àÉ]-intro(id) ‚¶É bijective-to-injective ‚¶É id-is-bijective ‚¶Ñ ‚¶Ñ

  instance
    [‚âΩ]-reflexivity : (X ‚âΩ X)
    [‚âΩ]-reflexivity = [‚àÉ]-intro(id) ‚¶É bijective-to-surjective ‚¶É id-is-bijective ‚¶Ñ ‚¶Ñ

module _ {‚Ñì‚Çí} {X : Type{‚Ñì‚Çí}} {Y : Type{‚Ñì‚Çí}} where
  open Type.Cardinality {‚Ñì‚Çó Lvl.‚äî ‚Ñì‚Çí}
  open Relator.Equals   {‚Ñì‚Çó Lvl.‚äî ‚Ñì‚Çí}{Lvl.ùêí(‚Ñì‚Çí)}

  [‚â°]-to-[‚âç] : (X ‚â° Y) ‚Üí (X ‚âç Y)
  [‚â°]-to-[‚âç] [‚â°]-intro = [‚âç]-reflexivity
