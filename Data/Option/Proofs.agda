module Data.Option.Proofs where

import      Lvl
open import Data
open import Data.Option
open import Data.Option.Equiv using (Extensionality)
open import Data.Option.Functions
open import Data.Option.Relation
open import Functional as Fn using (_‚àò_ ; _$_ ; const)
open import Function.EqualsRaw
open import Function.Proofs
open import Logic.Predicate
open import Logic.Propositional
open import Structure.Setoid using (Equiv)
open import Structure.Function
open import Structure.Function.Domain
import      Structure.Function.Names as Names
open import Structure.Operator
open import Structure.Operator.Monoid
import      Structure.Operator.Names as Names
open import Structure.Operator.Properties
open import Structure.Relator.Properties
open import Syntax.Function
open import Syntax.Transitivity
open import Type

private variable ‚Ñì ‚Ñì‚Çë ‚Ñì‚Çë‚ÇÅ ‚Ñì‚Çë‚ÇÇ ‚Ñì‚Çë‚ÇÉ ‚Ñì‚Çë‚ÇÑ ‚Ñì‚Çë‚Çí‚ÇÅ ‚Ñì‚Çë‚Çí‚ÇÇ : Lvl.Level
private variable T A B C : Type{‚Ñì}
private variable x y id : T
private variable o : Option(T)

module _ where
  open        Structure.Setoid

  module _ ‚¶É _ : let _ = A ; _ = B ; _ = C in Equiv{‚Ñì‚Çë}(C) ‚¶Ñ {f : B ‚Üí C}{g : A ‚Üí B} {c : C} where
    partialMap-map-[‚àò] : (partialMap c (f ‚àò g) ‚äú (partialMap c f ‚àò map g))
    partialMap-map-[‚àò] {None}   = reflexivity(_‚â°_)
    partialMap-map-[‚àò] {Some _} = reflexivity(_‚â°_)

  module _ ‚¶É _ : let _ = A ; _ = B ; _ = C in Equiv{‚Ñì‚Çë}(C) ‚¶Ñ {f : B ‚Üí C}{g : A ‚Üí B} {b : B} where
    partialMap-apply-compose : ((partialMap (f $ b) (f ‚àò g)) ‚äú (f ‚àò partialMap b g))
    partialMap-apply-compose {None}   = reflexivity(_‚â°_)
    partialMap-apply-compose {Some _} = reflexivity(_‚â°_)

  module _
    ‚¶É equiv-A : Equiv{‚Ñì‚Çë‚ÇÅ}(A) ‚¶Ñ
    ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ
    ‚¶É equiv-C : Equiv{‚Ñì‚Çë‚ÇÉ}(C) ‚¶Ñ
    ‚¶É equiv-oA : Equiv{‚Ñì‚Çë‚ÇÑ}(Option(A)) ‚¶Ñ
    ‚¶É ext-A : Extensionality(equiv-oA) ‚¶Ñ
    {b‚ÇÅ b‚ÇÇ : B}
    {f‚ÇÅ f‚ÇÇ : A ‚Üí B}
    ‚¶É func-f‚ÇÇ : Function(f‚ÇÇ) ‚¶Ñ
    where

    open Extensionality(ext-A)

    partialMap-function : ‚àÄ{o‚ÇÅ o‚ÇÇ} ‚Üí (b‚ÇÅ ‚â° b‚ÇÇ) ‚Üí (f‚ÇÅ ‚äú f‚ÇÇ) ‚Üí (o‚ÇÅ ‚â° o‚ÇÇ) ‚Üí (partialMap b‚ÇÅ f‚ÇÅ o‚ÇÅ ‚â° partialMap b‚ÇÇ f‚ÇÇ o‚ÇÇ)
    partialMap-function {o‚ÇÅ = None}   {o‚ÇÇ = None}   pb pf po = pb
    partialMap-function {o‚ÇÅ = None}   {o‚ÇÇ = Some y} pb pf po with () ‚Üê cases-inequality po
    partialMap-function {o‚ÇÅ = Some x} {o‚ÇÇ = None}   pb pf po with () ‚Üê cases-inequality (symmetry(_‚â°_) po)
    partialMap-function {o‚ÇÅ = Some x} {o‚ÇÇ = Some y} pb pf po = pf üùñ congruence‚ÇÅ(f‚ÇÇ) (injective(Some) po)

  module _ ‚¶É _ : let _ = A ; _ = B ; _ = C in Equiv{‚Ñì‚Çë}(Option(C)) ‚¶Ñ {f : B ‚Üí C}{g : A ‚Üí B} where
    map-preserves-[‚àò] : (map(f ‚àò g) ‚äú (map f) ‚àò (map g))
    map-preserves-[‚àò] {None}   = reflexivity(_‚â°_)
    map-preserves-[‚àò] {Some x} = reflexivity(_‚â°_)

  module _ ‚¶É _ : Equiv{‚Ñì‚Çë}(Option(A)) ‚¶Ñ where
    map-preserves-id : (map Fn.id ‚äú Fn.id)
    map-preserves-id {None}   = reflexivity(_‚â°_)
    map-preserves-id {Some x} = reflexivity(_‚â°_)

    andThen·µ£-Some : ((_andThen Some) ‚äú Fn.id)
    andThen·µ£-Some {None}   = reflexivity(_‚â°_)
    andThen·µ£-Some {Some x} = reflexivity(_‚â°_)

  module _ ‚¶É _ : Equiv{‚Ñì‚Çë}(Option(A)) ‚¶Ñ where
    andThen·µ£-None : o andThen (const None) ‚â° None
    andThen·µ£-None {o = None}   = reflexivity(_‚â°_)
    andThen·µ£-None {o = Some x} = reflexivity(_‚â°_)

  module _ ‚¶É _ : let _ = A in Equiv{‚Ñì‚Çë}(Option(B)) ‚¶Ñ {f : A ‚Üí Option(B)} where
    andThen‚Çó-None : (None andThen f ‚â° None)
    andThen‚Çó-None = reflexivity(_‚â°_)

    andThen‚Çó-Some : (Some(x) andThen f ‚â° f(x))
    andThen‚Çó-Some = reflexivity(_‚â°_)

  module _ ‚¶É _ : let _ = A ; _ = B in Equiv{‚Ñì‚Çë}(Option(C)) ‚¶Ñ {f : A ‚Üí Option(B)} {g : B ‚Üí Option(C)} where
    andThen-associativity : (o andThen (p ‚Ü¶ f(p) andThen g) ‚â° (o andThen f) andThen g)
    andThen-associativity {None}   = reflexivity(_‚â°_)
    andThen-associativity {Some x} = reflexivity(_‚â°_)

module _
  {_‚ñ´_ : T ‚Üí T ‚Üí T}
  ‚¶É equiv-T : Equiv{‚Ñì‚Çë}(T) ‚¶Ñ
  ‚¶É equiv-opt-T : Equiv{‚Ñì‚Çë‚ÇÇ}(Option(T)) ‚¶Ñ
  where

  open Structure.Setoid

  instance
    andCombine-absorber‚Çó : Absorber‚Çó(andCombine(_‚ñ´_))(None)
    Absorber‚Çó.proof andCombine-absorber‚Çó {None}   = reflexivity(_‚â°_)
    Absorber‚Çó.proof andCombine-absorber‚Çó {Some x} = reflexivity(_‚â°_)

  instance
    andCombine-absorber·µ£ : Absorber·µ£(andCombine(_‚ñ´_))(None)
    Absorber·µ£.proof andCombine-absorber·µ£ {None}   = reflexivity(_‚â°_)
    Absorber·µ£.proof andCombine-absorber·µ£ {Some x} = reflexivity(_‚â°_)

  -- `andCombine` essentially adds an additional value (None) to the type, and it becomes an absorber by definition.
  instance
    andCombine-absorber : Absorber(andCombine(_‚ñ´_))(None)
    andCombine-absorber = intro

  instance
    orCombine-identity‚Çó : ‚àÄ{l} ‚Üí Identity‚Çó(orCombine(_‚ñ´_) l Fn.id)(None)
    Identity‚Çó.proof orCombine-identity‚Çó {None} = reflexivity(_‚â°_)
    Identity‚Çó.proof orCombine-identity‚Çó {Some x} = reflexivity(_‚â°_)

  instance
    orCombine-identity·µ£ : ‚àÄ{r} ‚Üí Identity·µ£(orCombine(_‚ñ´_) Fn.id r)(None)
    Identity·µ£.proof orCombine-identity·µ£ {None} = reflexivity(_‚â°_)
    Identity·µ£.proof orCombine-identity·µ£ {Some x} = reflexivity(_‚â°_)

  instance
    orCombine-identity : Identity(orCombine(_‚ñ´_) Fn.id Fn.id)(None)
    orCombine-identity = intro

module _
  ‚¶É equiv-T     : Equiv{‚Ñì‚Çë‚ÇÅ}(T) ‚¶Ñ
  ‚¶É equiv-opt-T : Equiv{‚Ñì‚Çë‚ÇÇ}(Option(T)) ‚¶Ñ
  ‚¶É some-func   : Function(Some) ‚¶Ñ
  {_‚ñ´_ : T ‚Üí T ‚Üí T}
  where

  open Structure.Setoid

  instance
    andCombine-associativity : ‚¶É _ : Associativity(_‚ñ´_) ‚¶Ñ ‚Üí Associativity(andCombine(_‚ñ´_))
    andCombine-associativity = intro (\{x}{y}{z} ‚Üí p{x}{y}{z}) where
      p : Names.Associativity(andCombine(_‚ñ´_))
      p {None}   {None}   {None}   = reflexivity(_‚â°_)
      p {None}   {None}   {Some _} = reflexivity(_‚â°_)
      p {None}   {Some _} {None}   = reflexivity(_‚â°_)
      p {None}   {Some _} {Some _} = reflexivity(_‚â°_)
      p {Some _} {None}   {None}   = reflexivity(_‚â°_)
      p {Some _} {None}   {Some _} = reflexivity(_‚â°_)
      p {Some _} {Some _} {None}   = reflexivity(_‚â°_)
      p {Some _} {Some _} {Some _} = congruence‚ÇÅ(Some) (associativity(_‚ñ´_))

  instance
    andCombine-identity‚Çó : ‚¶É ident : Identity‚Çó(_‚ñ´_)(id) ‚¶Ñ ‚Üí Identity‚Çó(andCombine(_‚ñ´_))(Some(id))
    Identity‚Çó.proof andCombine-identity‚Çó {None} = reflexivity(_‚â°_)
    Identity‚Çó.proof (andCombine-identity‚Çó {id = id}) {Some x} = congruence‚ÇÅ(Some) (identity‚Çó(_‚ñ´_)(id))

  instance
    andCombine-identity·µ£ : ‚¶É ident : Identity·µ£(_‚ñ´_)(id) ‚¶Ñ ‚Üí Identity·µ£(andCombine(_‚ñ´_))(Some(id))
    Identity·µ£.proof andCombine-identity·µ£ {None} = reflexivity(_‚â°_)
    Identity·µ£.proof (andCombine-identity·µ£ {id = id}) {Some x} = congruence‚ÇÅ(Some) (identity·µ£(_‚ñ´_)(id))

  instance
    andCombine-identity : ‚¶É ident : Identity(_‚ñ´_)(id) ‚¶Ñ ‚Üí Identity(andCombine(_‚ñ´_))(Some(id))
    andCombine-identity = intro

  -- Note: The constant function using an absorber satisfies all the properties. The identity function also do.
  orCombine-associativity : ‚àÄ{f} ‚¶É idemp-f : Idempotent(f) ‚¶Ñ (_ : ‚àÄ{x y} ‚Üí (f(x) ‚ñ´ y ‚â° f(x ‚ñ´ y))) (_ : ‚àÄ{x y} ‚Üí (x ‚ñ´ f(y) ‚â° f(x ‚ñ´ y))) ‚Üí ‚¶É _ : Associativity(_‚ñ´_) ‚¶Ñ ‚Üí Associativity(orCombine(_‚ñ´_) f f) -- TODO: What are the unnamed properties here in the assumptions called? Also, 
  orCombine-associativity {f = f} compat‚Çó compat·µ£ = intro (\{x}{y}{z} ‚Üí p{x}{y}{z}) where
    p : Names.Associativity(orCombine(_‚ñ´_) f f)
    p {None}   {None}   {None}   = reflexivity(_‚â°_)
    p {None}   {None}   {Some z} = congruence‚ÇÅ(Some) (symmetry(_‚â°_) (idempotent(f)))
    p {None}   {Some y} {None}   = reflexivity(_‚â°_)
    p {None}   {Some y} {Some z} = congruence‚ÇÅ(Some) compat‚Çó
    p {Some x} {None}   {None}   = congruence‚ÇÅ(Some) (idempotent(f))
    p {Some x} {None}   {Some z} = congruence‚ÇÅ(Some) (transitivity(_‚â°_) compat‚Çó (symmetry(_‚â°_) compat·µ£))
    p {Some x} {Some y} {None}   = congruence‚ÇÅ(Some) (symmetry(_‚â°_) compat·µ£)
    p {Some x} {Some y} {Some z} = congruence‚ÇÅ(Some) (associativity(_‚ñ´_))

module _
  ‚¶É equiv : Equiv{‚Ñì‚Çë‚ÇÅ}(T) ‚¶Ñ
  ‚¶É equiv-Option : Equiv{‚Ñì‚Çë‚ÇÇ}(Option(T)) ‚¶Ñ
  ‚¶É ext : Extensionality(equiv-Option) ‚¶Ñ
  {_‚ñ´_ : T ‚Üí T ‚Üí T}
  ‚¶É oper : BinaryOperator(_‚ñ´_) ‚¶Ñ
  where

  open Extensionality(ext)
  open Monoid ‚¶É ‚Ä¶ ‚¶Ñ using () renaming (id to id‚Çò)
  open Structure.Setoid

  instance
    andCombine-function : BinaryOperator(andCombine(_‚ñ´_))
    {-# CATCHALL #-}
    BinaryOperator.congruence andCombine-function {_}     {_}     {None}  {Some _} p‚ÇÅ p‚ÇÇ with () ‚Üê cases-inequality p‚ÇÇ
    {-# CATCHALL #-}
    BinaryOperator.congruence andCombine-function {_}     {_}     {Some _}{None}   p‚ÇÅ p‚ÇÇ with () ‚Üê cases-inequality (symmetry(_‚â°_) p‚ÇÇ)
    {-# CATCHALL #-}
    BinaryOperator.congruence andCombine-function {None}  {Some _}{_}     {_}      p‚ÇÅ p‚ÇÇ with () ‚Üê cases-inequality p‚ÇÅ
    {-# CATCHALL #-}
    BinaryOperator.congruence andCombine-function {Some _}{None}  {_}     {_}      p‚ÇÅ p‚ÇÇ with () ‚Üê cases-inequality (symmetry(_‚â°_) p‚ÇÅ)
    BinaryOperator.congruence andCombine-function {None}  {None}  {None}  {None}   p‚ÇÅ p‚ÇÇ = reflexivity(_‚â°_)
    BinaryOperator.congruence andCombine-function {Some a}{Some b}{None}  {None}   p‚ÇÅ p‚ÇÇ = reflexivity(_‚â°_)
    BinaryOperator.congruence andCombine-function {None}  {None}  {Some c}{Some d} p‚ÇÅ p‚ÇÇ = reflexivity(_‚â°_)
    BinaryOperator.congruence andCombine-function {Some a}{Some b}{Some c}{Some d} p‚ÇÅ p‚ÇÇ = congruence‚ÇÅ(Some) (congruence‚ÇÇ(_‚ñ´_) (injective(Some) p‚ÇÅ) (injective(Some) p‚ÇÇ))

  module _  {l r} ‚¶É func-l : Function(l) ‚¶Ñ ‚¶É func-r : Function(r) ‚¶Ñ where
    instance
      orCombine-function : BinaryOperator(orCombine(_‚ñ´_) l r)
      {-# CATCHALL #-}
      BinaryOperator.congruence orCombine-function {_}     {_}     {None}  {Some _} p‚ÇÅ p‚ÇÇ with () ‚Üê cases-inequality p‚ÇÇ
      {-# CATCHALL #-}
      BinaryOperator.congruence orCombine-function {_}     {_}     {Some _}{None}   p‚ÇÅ p‚ÇÇ with () ‚Üê cases-inequality (symmetry(_‚â°_) p‚ÇÇ)
      {-# CATCHALL #-}
      BinaryOperator.congruence orCombine-function {None}  {Some _}{_}     {_}      p‚ÇÅ p‚ÇÇ with () ‚Üê cases-inequality p‚ÇÅ
      {-# CATCHALL #-}
      BinaryOperator.congruence orCombine-function {Some _}{None}  {_}     {_}      p‚ÇÅ p‚ÇÇ with () ‚Üê cases-inequality (symmetry(_‚â°_) p‚ÇÅ)
      BinaryOperator.congruence orCombine-function {None}  {None}  {None}  {None}   p‚ÇÅ p‚ÇÇ = reflexivity(_‚â°_)
      BinaryOperator.congruence orCombine-function {Some a}{Some b}{None}  {None}   p‚ÇÅ p‚ÇÇ = congruence‚ÇÅ(Some) (congruence‚ÇÅ(l) (injective(Some) p‚ÇÅ))
      BinaryOperator.congruence orCombine-function {None}  {None}  {Some c}{Some d} p‚ÇÅ p‚ÇÇ = congruence‚ÇÅ(Some) (congruence‚ÇÅ(r) (injective(Some) p‚ÇÇ))
      BinaryOperator.congruence orCombine-function {Some a}{Some b}{Some c}{Some d} p‚ÇÅ p‚ÇÇ = congruence‚ÇÅ(Some) (congruence‚ÇÇ(_‚ñ´_) (injective(Some) p‚ÇÅ) (injective(Some) p‚ÇÇ))

  -- A monoid is constructed by lifting an associative binary operator using `orCombine`.
    -- Essentially means that an additional value (None) is added to the type, and it becomes an identity by definition.
  instance
    orCombine-monoid : ‚¶É assoc : Associativity(_‚ñ´_) ‚¶Ñ ‚Üí Monoid(orCombine(_‚ñ´_) Fn.id Fn.id)
    Monoid.associativity orCombine-monoid = orCombine-associativity (reflexivity(_‚â°_)) (reflexivity(_‚â°_))
    Monoid.identity-existence orCombine-monoid = [‚àÉ]-intro None

  -- A monoid is still a monoid when lifting a binary operator using `andCombine`.
  instance
    andCombine-monoid : ‚¶É monoid : Monoid(_‚ñ´_) ‚¶Ñ ‚Üí Monoid(andCombine(_‚ñ´_))
    Monoid.associativity andCombine-monoid = andCombine-associativity
    Monoid.identity-existence andCombine-monoid = [‚àÉ]-intro (Some(id‚Çò))

module _
  ‚¶É equiv-A  : Equiv{‚Ñì‚Çë‚ÇÅ}(A) ‚¶Ñ
  ‚¶É equiv-B  : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ
  ‚¶É equiv-oA : Equiv{‚Ñì‚Çë‚ÇÉ}(Option(A)) ‚¶Ñ
  ‚¶É equiv-oB : Equiv{‚Ñì‚Çë‚ÇÑ}(Option(B)) ‚¶Ñ
  ‚¶É ext-B : Extensionality(equiv-oB) ‚¶Ñ
  {f : A ‚Üí B}
  where

  open import Logic.Predicate
  open import Logic.Propositional
  open Structure.Setoid

  open Extensionality(ext-B)

  map-Some-value : (map f(o) ‚â° Some y) ‚Üí ‚àÉ(x ‚Ü¶ (f(x) ‚â° y) ‚àß (o ‚â° Some(x)))
  map-Some-value {o = None}   eq with () ‚Üê cases-inequality eq
  map-Some-value {o = Some x} eq = [‚àÉ]-intro x ‚¶É [‚àß]-intro (injective(Some) eq) (reflexivity(_‚â°_)) ‚¶Ñ

module _
  ‚¶É equiv-A : Equiv{‚Ñì‚Çë‚ÇÅ}(A) ‚¶Ñ
  ‚¶É equiv-opt-A : Equiv{‚Ñì‚Çë‚Çí‚ÇÅ}(Option(A)) ‚¶Ñ
  ‚¶É ext-A : Extensionality equiv-opt-A ‚¶Ñ
  ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ
  ‚¶É equiv-opt-B : Equiv{‚Ñì‚Çë‚Çí‚ÇÇ}(Option(B)) ‚¶Ñ
  ‚¶É ext-B : Extensionality equiv-opt-B ‚¶Ñ
  where

  open Data.Option.Equiv
  open Structure.Setoid

  map-injective : ‚àÄ{f : A ‚Üí B} ‚¶É inj-f : Injective(f) ‚¶Ñ ‚Üí Injective(map f)
  map-injective{f = f} = intro p where
    p : Names.Injective(map f)
    p {None}  {None}   xy = reflexivity(_‚â°_)
    p {None}  {Some y} xy = [‚ä•]-elim (cases-inequality xy)
    p {Some x}{None}   xy = [‚ä•]-elim (cases-inequality (symmetry(_‚â°_) xy))
    p {Some x}{Some y} xy = congruence‚ÇÅ(Some) (injective(f) (injective(Some) xy))

module _ ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ where
  open Structure.Setoid

  partialMap-some-value : ‚àÄ{def}{f : A ‚Üí B}{o} ‚Üí ‚¶É some : IsSome(o) ‚¶Ñ ‚Üí (partialMap def f o ‚â° f(extract o))
  partialMap-some-value {o = Some _} = reflexivity(_‚â°_)

  partialMap-none-value : ‚àÄ{def}{f : A ‚Üí B}{o} ‚Üí ‚¶É none : IsNone(o) ‚¶Ñ ‚Üí (partialMap def f o ‚â° def)
  partialMap-none-value {o = None} = reflexivity(_‚â°_)

module _ ‚¶É equiv-opt-B : Equiv{‚Ñì‚Çë‚Çí‚ÇÇ}(Option(B)) ‚¶Ñ where
  open Structure.Setoid

  map-some-value : ‚àÄ{f : A ‚Üí B}{o} ‚Üí ‚¶É some : IsSome(o) ‚¶Ñ ‚Üí (map f(o) ‚â° Some(f(extract o)))
  map-some-value{o = o} = partialMap-some-value {o = o}

map-is-some : ‚àÄ{f : A ‚Üí B}{o} ‚Üí ‚¶É some : IsSome(o) ‚¶Ñ ‚Üí IsSome(map f(o))
map-is-some{o = Some _} = <>

map-is-none : ‚àÄ{f : A ‚Üí B}{o} ‚Üí ‚¶É none : IsNone(o) ‚¶Ñ ‚Üí IsNone(map f(o))
map-is-none{o = None} = <>

module _ ‚¶É equiv-B : Equiv{‚Ñì‚Çë‚ÇÇ}(B) ‚¶Ñ where
  open Structure.Setoid

  extract-map : ‚àÄ{f : A ‚Üí B}{o} ‚¶É some : IsSome(o) ‚¶Ñ ‚Üí (extract(map f(o)) ‚¶É map-is-some ‚¶É some ‚¶Ñ ‚¶Ñ ‚â° f(extract o))
  extract-map {o = Some _} = reflexivity(_‚â°_)

module _
  ‚¶É equiv : Equiv{‚Ñì‚Çë‚ÇÅ}(T) ‚¶Ñ
  ‚¶É equiv-o : Equiv{‚Ñì‚Çë‚ÇÇ}(Option(T)) ‚¶Ñ
  ‚¶É ext : Extensionality(equiv-o) ‚¶Ñ
  where

  open Structure.Setoid

  extract-injective : ‚àÄ{o‚ÇÅ o‚ÇÇ : Option(T)} ‚¶É some-o‚ÇÅ : IsSome o‚ÇÅ ‚¶Ñ ‚¶É some-o‚ÇÇ : IsSome o‚ÇÇ ‚¶Ñ ‚Üí (extract o‚ÇÅ ‚â° extract o‚ÇÇ) ‚Üí (o‚ÇÅ ‚â° o‚ÇÇ)
  extract-injective {Some _}{Some _} = congruence‚ÇÅ(Some)

module _
  {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}
  {A : Type{‚Ñì‚ÇÅ}}
  {B : Option A ‚Üí Type{‚Ñì‚ÇÇ}}
  {b}{ab}
  (P : {o : Option A} ‚Üí B(o) ‚Üí Type{‚Ñì})
  (pn : P b)
  (ps : {a : A} ‚Üí P(ab a))
  where

  elim-intro : P{o} (elim{B = B} b ab o)
  elim-intro {o} = elim{B = \o ‚Üí P{o} (elim{B = B} b ab o)} pn (\a ‚Üí ps{a}) o

module _
  {def}{f : A ‚Üí B}
  (P : {Option A} ‚Üí B ‚Üí Type{‚Ñì})
  (pn : P def)
  (ps : ‚àÄ{a} ‚Üí P(f(a)))
  where

  partialMap-intro : P{o}(partialMap def f o)
  partialMap-intro = elim-intro (\{o} ‚Üí P{o}) pn ps
