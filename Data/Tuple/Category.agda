module Data.Tuple.Category where

import      Lvl
open import Data.Tuple as Tuple using (_‚®Ø_ ; _,_)
open import Data.Tuple.Equivalence
import      Functional as Fn
open import Logic.Propositional
open import Logic.Predicate
open import Structure.Category
open import Structure.Category.Functor
open import Structure.Category.Functor.Functors
open import Structure.Categorical.Functor.Properties
open import Structure.Categorical.Properties
open import Structure.Function
open import Structure.Operator
open import Structure.Relator.Equivalence
open import Structure.Relator.Properties
open import Structure.Setoid
open import Syntax.Transitivity
open import Type

private variable ‚Ñì ‚Ñì‚Çí ‚Ñì‚Çò ‚Ñì‚Çë ‚Ñì‚Çí‚ÇÅ ‚Ñì‚Çò‚ÇÅ ‚Ñì‚Çë‚ÇÅ ‚Ñì‚Çí‚ÇÇ ‚Ñì‚Çò‚ÇÇ ‚Ñì‚Çë‚ÇÇ : Lvl.Level
private variable Obj Obj‚ÇÅ Obj‚ÇÇ Obj‚ÇÅ‚Çó Obj‚ÇÅ·µ£ Obj‚ÇÇ‚Çó Obj‚ÇÇ·µ£ : Type{‚Ñì}
private variable Morphism Morphism‚ÇÅ Morphism‚ÇÇ Morphism‚ÇÅ‚Çó Morphism‚ÇÇ‚Çó Morphism‚ÇÅ·µ£ Morphism‚ÇÇ·µ£ : Obj ‚Üí Obj ‚Üí Type{‚Ñì}
private variable ‚¶É morphism-equiv morphism-equiv‚ÇÅ morphism-equiv‚ÇÇ morphism-equiv‚ÇÅ‚Çó morphism-equiv‚ÇÇ‚Çó morphism-equiv‚ÇÅ·µ£ morphism-equiv‚ÇÇ·µ£ ‚¶Ñ : ‚àÄ{x y : Obj} ‚Üí Equiv{‚Ñì‚Çë}(Morphism x y)
private variable F F‚ÇÅ F‚ÇÇ : Obj‚ÇÅ ‚Üí Obj‚ÇÇ
private variable C C‚Çó C·µ£ C‚ÇÅ‚Çó C‚ÇÅ·µ£ C‚ÇÇ‚Çó C‚ÇÇ·µ£ C‚ÇÅ C‚ÇÇ C‚ÇÉ : CategoryObject{‚Ñì‚Çí}{‚Ñì‚Çò}{‚Ñì‚Çë}

module _
  (cat‚ÇÅ : Category{Obj = Obj‚ÇÅ} (Morphism‚ÇÅ) ‚¶É \{x y} ‚Üí morphism-equiv‚ÇÅ{x}{y} ‚¶Ñ)
  (cat‚ÇÇ : Category{Obj = Obj‚ÇÇ} (Morphism‚ÇÇ) ‚¶É \{x y} ‚Üí morphism-equiv‚ÇÇ{x}{y} ‚¶Ñ)
  where

  open Category ‚¶É ‚Ä¶ ‚¶Ñ

  private instance _ = cat‚ÇÅ
  private instance _ = cat‚ÇÇ

  tupleCategory : Category{Obj = Obj‚ÇÅ ‚®Ø Obj‚ÇÇ} (Tuple.uncurry(_‚®Ø_) Fn.‚àò‚ÇÇ Tuple.map‚ÇÇ(Morphism‚ÇÅ)(Morphism‚ÇÇ))
  Category._‚àò_ tupleCategory = Tuple.map‚ÇÇ(_‚àò_)(_‚àò_)
  Category.id  tupleCategory = (id , id)
  BinaryOperator.congruence (Category.binaryOperator tupleCategory) (p‚ÇÅl , p‚ÇÅr) (p‚ÇÇl , p‚ÇÇr) = [‚àß]-intro (congruence‚ÇÇ(_‚àò_) p‚ÇÅl p‚ÇÇl) (congruence‚ÇÇ(_‚àò_) p‚ÇÅr p‚ÇÇr)
  Morphism.Associativity.proof (Category.associativity tupleCategory) = [‚àß]-intro (Morphism.associativity(_‚àò_)) (Morphism.associativity(_‚àò_))
  Morphism.Identity‚Çó.proof (_‚®Ø_.left  (Category.identity tupleCategory)) = [‚àß]-intro (Morphism.identity‚Çó(_‚àò_)(id)) (Morphism.identity‚Çó(_‚àò_)(id))
  Morphism.Identity·µ£.proof (_‚®Ø_.right (Category.identity tupleCategory)) = [‚àß]-intro (Morphism.identity·µ£(_‚àò_)(id)) (Morphism.identity·µ£(_‚àò_)(id))

_‚®Ø·∂ú·µÉ·µó_ : CategoryObject{‚Ñì‚Çí‚ÇÅ}{‚Ñì‚Çò‚ÇÅ}{‚Ñì‚Çë‚ÇÅ} ‚Üí CategoryObject{‚Ñì‚Çí‚ÇÇ}{‚Ñì‚Çò‚ÇÇ}{‚Ñì‚Çë‚ÇÇ} ‚Üí CategoryObject
(intro C‚ÇÅ) ‚®Ø·∂ú·µÉ·µó (intro C‚ÇÇ) = intro (tupleCategory C‚ÇÅ C‚ÇÇ)

module Tuple·∂ú·µÉ·µó where
  open CategoryObject ‚¶É ‚Ä¶ ‚¶Ñ
  open Functor ‚¶É ‚Ä¶ ‚¶Ñ renaming (map to fmap)
  private open module CategoryObjectEquiv {‚Ñì‚Çí ‚Ñì‚Çò ‚Ñì‚Çë} ‚¶É C : CategoryObject{‚Ñì‚Çí}{‚Ñì‚Çò}{‚Ñì‚Çë} ‚¶Ñ {x}{y} = Equivalence (Equiv-equivalence ‚¶É CategoryObject.morphism-equiv(C){x}{y} ‚¶Ñ) using ()

  open Structure.Category.Functor.Functors.Wrapped

  map : (C‚ÇÅ‚Çó ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ C‚ÇÅ·µ£) ‚Üí (C‚ÇÇ‚Çó ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ C‚ÇÇ·µ£) ‚Üí ((C‚ÇÅ‚Çó ‚®Ø·∂ú·µÉ·µó C‚ÇÇ‚Çó) ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ (C‚ÇÅ·µ£ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ·µ£))
  map {C‚ÇÅ‚Çó = C‚ÇÅ‚Çó} {C‚ÇÅ·µ£ = C‚ÇÅ·µ£} {C‚ÇÇ‚Çó = C‚ÇÇ‚Çó} {C‚ÇÇ·µ£ = C‚ÇÇ·µ£} ([‚àÉ]-intro F‚ÇÅ ‚¶É functor‚ÇÅ ‚¶Ñ) ([‚àÉ]-intro F‚ÇÇ ‚¶É functor‚ÇÇ ‚¶Ñ) = [‚àÉ]-intro _ ‚¶É tupleMapFunctor ‚¶Ñ where
    instance _ = C‚ÇÅ‚Çó ; instance _ = C‚ÇÅ·µ£ ; instance _ = C‚ÇÇ‚Çó ; instance _ = C‚ÇÇ·µ£
    instance _ = C‚ÇÅ‚Çó ‚®Ø·∂ú·µÉ·µó C‚ÇÇ‚Çó ; instance _ = C‚ÇÅ·µ£ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ·µ£
    tupleMapFunctor : Functor(tupleCategory (category ‚¶É C‚ÇÅ‚Çó ‚¶Ñ) (category ‚¶É C‚ÇÇ‚Çó ‚¶Ñ))(tupleCategory (category ‚¶É C‚ÇÅ·µ£ ‚¶Ñ) (category ‚¶É C‚ÇÇ·µ£ ‚¶Ñ)) (Tuple.map F‚ÇÅ F‚ÇÇ)
    Functor.map tupleMapFunctor = Tuple.map fmap fmap
    Functor.op-preserving tupleMapFunctor = intro([‚àß]-intro (preserving‚ÇÇ _ _ _ _ _ ‚¶É op-preserving ‚¶Ñ) (preserving‚ÇÇ _ _ _ _ _ ‚¶É op-preserving ‚¶Ñ))
    Functor.id-preserving tupleMapFunctor = intro([‚àß]-intro (preserving‚ÇÄ _ _ _ _ _ ‚¶É id-preserving ‚¶Ñ) (preserving‚ÇÄ _ _ _ _ _ ‚¶É id-preserving ‚¶Ñ))

  mapLeft : (C‚ÇÅ‚Çó ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ C‚ÇÅ·µ£) ‚Üí ((C‚ÇÅ‚Çó ‚®Ø·∂ú·µÉ·µó C‚ÇÇ) ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ (C‚ÇÅ·µ£ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ))
  mapLeft F = map F id·∂†·µò‚Åø·∂ú·µó·µí ≥

  mapRight : (C‚ÇÇ‚Çó ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ C‚ÇÇ·µ£) ‚Üí ((C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ‚Çó) ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ (C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ·µ£))
  mapRight F = map id·∂†·µò‚Åø·∂ú·µó·µí ≥ F

  left : ((C‚Çó ‚®Ø·∂ú·µÉ·µó C·µ£) ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ C‚Çó)
  ‚àÉ.witness left = Tuple.left
  Functor.map (‚àÉ.proof left) = Tuple.left
  Functor.op-preserving (‚àÉ.proof (left {C‚Çó = C‚Çó} {C·µ£ = C·µ£})) =
    intro \{ {f‚Çó , f·µ£} {g‚Çó , g·µ£} ‚Üí
      Tuple.left((f‚Çó , f·µ£) ‚àò (g‚Çó , g·µ£))         üùñ[ _‚â°_ ]-[]
      Tuple.left((f‚Çó ‚àò g‚Çó) , (f·µ£ ‚àò g·µ£))         üùñ[ _‚â°_ ]-[]
      f‚Çó ‚àò g‚Çó                                   üùñ[ _‚â°_ ]-[]
      Tuple.left(f‚Çó , f·µ£) ‚àò Tuple.left(g‚Çó , g·µ£) üùñ-end
    } where instance _ = C‚Çó ; instance _ = C·µ£ ; instance _ = C‚Çó ‚®Ø·∂ú·µÉ·µó C·µ£
  Functor.id-preserving (‚àÉ.proof (left {C‚Çó = C‚Çó} {C·µ£ = C·µ£})) {x , y} =
    intro Fn.$
      Tuple.left (id ‚¶É C‚Çó ‚®Ø·∂ú·µÉ·µó C·µ£ ‚¶Ñ {x , y})      üùñ[ _‚â°_ ]-[]
      Tuple.left (id ‚¶É C‚Çó ‚¶Ñ {x} , id ‚¶É C·µ£ ‚¶Ñ {y})  üùñ[ _‚â°_ ]-[]
      id ‚¶É C‚Çó ‚¶Ñ {x}                               üùñ-end
    where instance _ = C‚Çó ; instance _ = C·µ£ ; instance _ = C‚Çó ‚®Ø·∂ú·µÉ·µó C·µ£

  right : ((C‚Çó ‚®Ø·∂ú·µÉ·µó C·µ£) ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ C·µ£)
  ‚àÉ.witness right = Tuple.right
  Functor.map (‚àÉ.proof right) = Tuple.right
  Functor.op-preserving (‚àÉ.proof (right {C‚Çó = C‚Çó} {C·µ£ = C·µ£})) =
    intro \{ {f‚Çó , f·µ£} {g‚Çó , g·µ£} ‚Üí
      Tuple.right ((f‚Çó , f·µ£) ‚àò (g‚Çó , g·µ£))        üùñ[ _‚â°_ ]-[]
      Tuple.right ((f‚Çó ‚àò g‚Çó) , (f·µ£ ‚àò g·µ£))        üùñ[ _‚â°_ ]-[]
      f·µ£ ‚àò g·µ£                                    üùñ[ _‚â°_ ]-[]
      Tuple.right(f‚Çó , f·µ£) ‚àò Tuple.right(g‚Çó , g·µ£) üùñ-end
    } where instance _ = C‚Çó ; instance _ = C·µ£ ; instance _ = C‚Çó ‚®Ø·∂ú·µÉ·µó C·µ£
  Functor.id-preserving (‚àÉ.proof (right {C‚Çó = C‚Çó} {C·µ£ = C·µ£})) {x , y} =
    intro Fn.$
      Tuple.right (id ‚¶É C‚Çó ‚®Ø·∂ú·µÉ·µó C·µ£ ‚¶Ñ {x , y})      üùñ[ _‚â°_ ]-[]
      Tuple.right (id ‚¶É C‚Çó ‚¶Ñ {x} , id ‚¶É C·µ£ ‚¶Ñ {y})  üùñ[ _‚â°_ ]-[]
      id ‚¶É C·µ£ ‚¶Ñ {y}                                üùñ-end
    where instance _ = C‚Çó ; instance _ = C·µ£ ; instance _ = C‚Çó ‚®Ø·∂ú·µÉ·µó C·µ£

  diag : (C ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ (C ‚®Ø·∂ú·µÉ·µó C))
  ‚àÉ.witness diag = Tuple.diag
  Functor.map (‚àÉ.proof diag) = Tuple.diag
  Functor.op-preserving (‚àÉ.proof (diag {C = C})) =
    intro \{f}{g} ‚Üí
      Tuple.diag(f ‚àò g)               üùñ[ _‚â°_ ]-[]
      Tuple.diag(f) ‚àò Tuple.diag(g) üùñ-end
    where instance _ = C ; instance _ = C ‚®Ø·∂ú·µÉ·µó C
  (Functor.id-preserving (‚àÉ.proof (diag {C = C})) {x}) =
    intro Fn.$
      Tuple.diag(id{x = x})  üùñ[ _‚â°_ ]-[]
      id{x = (x , x)}          üùñ-end
    where instance _ = C ; instance _ = C ‚®Ø·∂ú·µÉ·µó C

  const‚Çó : CategoryObject.Object(C‚Çó) ‚Üí (C·µ£ ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ (C‚Çó ‚®Ø·∂ú·µÉ·µó C·µ£))
  const‚Çó c = mapLeft (const·∂†·µò‚Åø·∂ú·µó·µí ≥ c) ‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥ diag

  const·µ£ : CategoryObject.Object(C·µ£) ‚Üí (C‚Çó ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ (C‚Çó ‚®Ø·∂ú·µÉ·µó C·µ£))
  const·µ£ c = mapRight (const·∂†·µò‚Åø·∂ú·µó·µí ≥ c) ‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥ diag

  associateLeft : (C‚ÇÅ ‚®Ø·∂ú·µÉ·µó (C‚ÇÇ ‚®Ø·∂ú·µÉ·µó C‚ÇÉ)) ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ ((C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ) ‚®Ø·∂ú·µÉ·µó C‚ÇÉ)
  ‚àÉ.witness associateLeft = Tuple.associateLeft
  Functor.map (‚àÉ.proof associateLeft) = Tuple.associateLeft
  Functor.op-preserving (‚àÉ.proof (associateLeft {C‚ÇÅ = C‚ÇÅ}{C‚ÇÇ = C‚ÇÇ}{C‚ÇÉ = C‚ÇÉ})) =
    intro \{f}{g} ‚Üí
      Tuple.associateLeft(f ‚àò g)                    üùñ[ _‚â°_ ]-[]
      Tuple.associateLeft f ‚àò Tuple.associateLeft g üùñ-end
    where
      instance _ = C‚ÇÅ ; instance _ = C‚ÇÇ ; instance _ = C‚ÇÉ
      instance _ = C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ ; instance _ = C‚ÇÇ ‚®Ø·∂ú·µÉ·µó C‚ÇÉ
      instance _ = C‚ÇÅ ‚®Ø·∂ú·µÉ·µó (C‚ÇÇ ‚®Ø·∂ú·µÉ·µó C‚ÇÉ) ; instance _ = (C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ) ‚®Ø·∂ú·µÉ·µó C‚ÇÉ
  Functor.id-preserving (‚àÉ.proof (associateLeft {C‚ÇÅ = C‚ÇÅ}{C‚ÇÇ = C‚ÇÇ}{C‚ÇÉ = C‚ÇÉ})) =
    intro Fn.$
      Tuple.associateLeft(id) üùñ[ _‚â°_ ]-[]
      id                      üùñ-end
    where
      instance _ = C‚ÇÅ ; instance _ = C‚ÇÇ ; instance _ = C‚ÇÉ
      instance _ = C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ ; instance _ = C‚ÇÇ ‚®Ø·∂ú·µÉ·µó C‚ÇÉ
      instance _ = C‚ÇÅ ‚®Ø·∂ú·µÉ·µó (C‚ÇÇ ‚®Ø·∂ú·µÉ·µó C‚ÇÉ) ; instance _ = (C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ) ‚®Ø·∂ú·µÉ·µó C‚ÇÉ

  associateRight : ((C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ) ‚®Ø·∂ú·µÉ·µó C‚ÇÉ) ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ (C‚ÇÅ ‚®Ø·∂ú·µÉ·µó (C‚ÇÇ ‚®Ø·∂ú·µÉ·µó C‚ÇÉ))
  ‚àÉ.witness associateRight = Tuple.associateRight
  Functor.map (‚àÉ.proof associateRight) = Tuple.associateRight
  Functor.op-preserving (‚àÉ.proof (associateRight {C‚ÇÅ = C‚ÇÅ}{C‚ÇÇ = C‚ÇÇ}{C‚ÇÉ = C‚ÇÉ})) =
    intro \{f}{g} ‚Üí
      Tuple.associateRight(f ‚àò g)                    üùñ[ _‚â°_ ]-[]
      Tuple.associateRight f ‚àò Tuple.associateRight g üùñ-end
    where
      instance _ = C‚ÇÅ ; instance _ = C‚ÇÇ ; instance _ = C‚ÇÉ
      instance _ = C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ ; instance _ = C‚ÇÇ ‚®Ø·∂ú·µÉ·µó C‚ÇÉ
      instance _ = C‚ÇÅ ‚®Ø·∂ú·µÉ·µó (C‚ÇÇ ‚®Ø·∂ú·µÉ·µó C‚ÇÉ) ; instance _ = (C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ) ‚®Ø·∂ú·µÉ·µó C‚ÇÉ
  Functor.id-preserving (‚àÉ.proof (associateRight {C‚ÇÅ = C‚ÇÅ}{C‚ÇÇ = C‚ÇÇ}{C‚ÇÉ = C‚ÇÉ})) =
    intro Fn.$
      Tuple.associateRight(id) üùñ[ _‚â°_ ]-[]
      id                       üùñ-end
    where
      instance _ = C‚ÇÅ ; instance _ = C‚ÇÇ ; instance _ = C‚ÇÉ
      instance _ = C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ ; instance _ = C‚ÇÇ ‚®Ø·∂ú·µÉ·µó C‚ÇÉ
      instance _ = C‚ÇÅ ‚®Ø·∂ú·µÉ·µó (C‚ÇÇ ‚®Ø·∂ú·µÉ·µó C‚ÇÉ) ; instance _ = (C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ) ‚®Ø·∂ú·µÉ·µó C‚ÇÉ

  _on‚ÇÇ_ : let _ = C‚ÇÅ in ((C‚ÇÇ ‚®Ø·∂ú·µÉ·µó C‚ÇÇ) ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ C‚ÇÉ) ‚Üí (C‚ÇÅ ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ C‚ÇÇ) ‚Üí ((C‚ÇÅ ‚®Ø·∂ú·µÉ·µó C‚ÇÅ) ‚Üí·∂†·µò‚Åø·∂ú·µó·µí ≥ C‚ÇÉ)
  F on‚ÇÇ G = F ‚àò·∂†·µò‚Åø·∂ú·µó·µí ≥ (map G G)
