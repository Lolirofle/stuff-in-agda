module Numeral.Natural.Relation.Order.Proofs{โ} where

import Lvl
open import Data.Tuple as Tuple using (_โจฏ_ ; _,_)
open import Functional
open import Logic.Propositional{โ}
open import Logic.Propositional.Theorems{โ}
open import Logic.Predicate{โ}{Lvl.๐}
open import Numeral.Natural
open import Numeral.Natural.Oper
open import Numeral.Natural.Oper.Properties{โ}
open import Numeral.Natural.Induction{โ}
open import Numeral.Natural.Relation.Order{โ}
import      Numeral.Natural.Relation.Order.Existence         {โ} as [โคโ]
open import Numeral.Natural.Relation.Order.Existence.Proofs{โ} using () renaming ([โค]-with-[๐] to [โคโ]-with-[๐])
open import Relator.Equals{โ}{Lvl.๐}
open import Relator.Equals.Proofs{โ}{Lvl.๐}
open import Structure.Operator.Properties{โ}{Lvl.๐}
open import Structure.Relator.Ordering{โ}{Lvl.๐}
open import Structure.Relator.Properties{โ}{Lvl.๐}
open import Type

-- TODO: The instance declarations probably do nothing for functions with arguments. Either make all the args implicit or remove the instance decls.
-- TODO: A method for pattern matching: https://stackoverflow.com/questions/20682013/agda-why-am-i-unable-to-pattern-match-on-refl

[โค]-equivalence : โ{x y} โ (x [โคโ].โค y) โ (x โค y)
[โค]-equivalence{x}{y} = [โ]-intro (l{x}{y}) (r{x}{y}) where
  l : โ{x y} โ (x [โคโ].โค y) โ (x โค y)
  l{๐}   {y}    ([โค]-minimum)      = [โ]-intro(y) โฆ [โก]-intro โฆ
  l{๐(x)}{๐}    ()
  l{๐(x)}{๐(y)} ([โค]-with-[๐] โฆ proof โฆ) = [โคโ]-with-[๐] {x}{y} (l{x}{y} (proof))

  r : โ{x y} โ (x [โคโ].โค y) โ (x โค y)
  r{๐}   {y}    ([โ]-intro(z) โฆ ๐+zโกy   โฆ) = [โค]-minimum
  r{๐(x)}{๐}    ([โ]-intro(z) โฆ โฆ)
  r{๐(x)}{๐(y)} ([โ]-intro(z) โฆ ๐x+zโก๐y โฆ) = [โค]-with-[๐] โฆ r{x}{y} ([โ]-intro(z) โฆ [๐]-injectivity(๐x+zโก๐y) โฆ ) โฆ

[โค]-from-[โก] : โ{x y : โ} โ (x โก y) โ (x โค y)
[โค]-from-[โก] {๐}   {_}    ([โก]-intro) = [โค]-minimum
[โค]-from-[โก] {๐(x)}{๐(y)} ([โก]-intro) = [โค]-with-[๐] โฆ [โค]-from-[โก] {x}{y} ([โก]-intro) โฆ

[โค][0]แตฃ : โ{x : โ} โ (x โค 0) โ (x โก 0)
[โค][0]แตฃ {๐}    (_) = [โก]-intro
[โค][0]แตฃ {๐(_)} ()

[โค][0]แตฃ-negation : โ{x : โ} โ (๐(x) โฐ 0)
[โค][0]แตฃ-negation ()

[โค]-successor : โ{x y : โ} โ (x โค y) โ (x โค ๐(y))
[โค]-successor {๐}   {_}    (_) = [โค]-minimum
[โค]-successor {๐(x)}{๐}    ()
[โค]-successor {๐(x)}{๐(y)} ([โค]-with-[๐] โฆ proof โฆ) = [โค]-with-[๐] โฆ [โค]-successor {x}{y} (proof) โฆ

[โค]-predecessor : โ{x y : โ} โ (๐(x) โค y) โ (x โค y)
[โค]-predecessor {x}   {๐}    ()
[โค]-predecessor {๐}   {๐(y)} (_) = [โค]-minimum
[โค]-predecessor {๐(x)}{๐(y)} ([โค]-with-[๐] โฆ proof โฆ) = [โค]-with-[๐] โฆ [โค]-predecessor {x}{y} (proof) โฆ

[โค]-without-[๐] : โ{x y : โ} โ (๐(x) โค ๐(y)) โ (x โค y)
[โค]-without-[๐] ([โค]-with-[๐] โฆ proof โฆ) = proof

[โค][๐]โ : โ{x : โ} โ ยฌ(๐(x) โค x)
[โค][๐]โ {๐}    (1โค0)    = [โค][0]แตฃ-negation{0}(1โค0)
[โค][๐]โ {๐(n)} (SSnโคSn) = [โค][๐]โ {n} ([โค]-without-[๐] {๐(n)}{n} (SSnโคSn))

[โค]-with-[+]แตฃ : โ{x y z : โ} โ (x โค y) โ (x + z โค y + z)
[โค]-with-[+]แตฃ {_}{_}{๐}    (proof)    = proof
[โค]-with-[+]แตฃ {_}{_}{๐(z)} (proof) = [โค]-with-[๐] โฆ [โค]-with-[+]แตฃ {_}{_}{z} (proof) โฆ

-- [โค]-with-[+]โ : โ{x y z : โ} โ (x โค y) โ (z + x โค z + y)
-- TODO: [โค]-with-[+] : โ{xโ yโ : โ} โ (xโ โค yโ) โ โ{xโ yโ : โ} โ (xโ โค yโ) โ (xโ + xโ โค yโ + yโ)

[โค]โ[+] : โ{x y : โ} โ (x + y โค x) โ (y โก ๐)
[โค]โ[+] {๐}               = [โค][0]แตฃ
[โค]โ[+] {๐(x)}{y} (proof) = [โค]โ[+] {x} ([โค]-without-[๐] {x + y} {x} (proof))

instance
  [โค]-reflexivity : Reflexivity (_โค_)
  reflexivity โฆ [โค]-reflexivity โฆ = [โค]-from-[โก] [โก]-intro

instance
  [โค]-transitivity : Transitivity (_โค_)
  transitivity โฆ [โค]-transitivity โฆ {๐}   {_}   {_} (_)(_) = [โค]-minimum
  transitivity โฆ [โค]-transitivity โฆ {๐(a)}{๐(b)}{๐(c)} ([โค]-with-[๐] โฆ proofโ โฆ) ([โค]-with-[๐] โฆ proofแตฃ โฆ ) =
    [โค]-with-[๐] โฆ transitivity โฆ [โค]-transitivity โฆ {a}{b}{c} (proofโ) (proofแตฃ) โฆ

instance
  [โค]-antisymmetry : Antisymmetry (_โค_) (_โก_)
  antisymmetry โฆ [โค]-antisymmetry โฆ {๐}    {๐}    (_) (_) = [โก]-intro
  antisymmetry โฆ [โค]-antisymmetry โฆ {๐(_)} {๐}    ()
  antisymmetry โฆ [โค]-antisymmetry โฆ {๐}    {๐(_)} (_) ()
  antisymmetry โฆ [โค]-antisymmetry โฆ {๐(a)} {๐(b)} ([โค]-with-[๐] โฆ proofโ โฆ) ([โค]-with-[๐] โฆ proofแตฃ โฆ) =
    [โก]-with(๐) (antisymmetry โฆ [โค]-antisymmetry โฆ {a}{b} proofโ proofแตฃ)

instance
  [โค]-totality : ConverseTotal(_โค_)
  converseTotal โฆ [โค]-totality โฆ {๐}   {๐}    = [โจ]-introโ ([โค]-from-[โก] [โก]-intro)
  converseTotal โฆ [โค]-totality โฆ {๐(a)}{๐}    = [โจ]-introแตฃ ([โค]-minimum)
  converseTotal โฆ [โค]-totality โฆ {๐}   {๐(b)} = [โจ]-introโ ([โค]-minimum)
  converseTotal โฆ [โค]-totality โฆ {๐(a)}{๐(b)} = [โจ]-elim ([โจ]-introโ โ (proof โฆ [โค]-with-[๐] {a}{b} โฆ proof โฆ)) ([โจ]-introแตฃ โ (proof โฆ [โค]-with-[๐] {b}{a} โฆ proof โฆ)) (converseTotal โฆ [โค]-totality โฆ {a}{b})

instance
  [โค]-weakOrder : Weak.TotalOrder (_โค_) (_โก_)
  [โค]-weakOrder = record{
      partialOrder = record{
          antisymmetry = [โค]-antisymmetry;
          transitivity = [โค]-transitivity;
          reflexivity  = [โค]-reflexivity
        };
      totality = [โค]-totality
    }

[โฅ]-to-[โฎ] : โ{a b : โ} โ (a โฎ b) โ (a โฅ b)
[โฅ]-to-[โฎ] {a}{b} (bโคa) (๐aโคb) = [โค][๐]โ (transitivity {_}{_}{๐(a)}{b}{a} (๐aโคb) (bโคa))

[โค]-to-[โฏ] : โ{a b : โ} โ (a โฏ b) โ (a โค b)
[โค]-to-[โฏ] {a}{b} (aโคb) (๐bโคa) = [โฅ]-to-[โฎ] {b}{a} (aโคb) (๐bโคa)

[>]-to-[โฐ] : โ{a b : โ} โ (a โฐ b) โ (a > b)
[>]-to-[โฐ] {a}{b} (๐bโคa) (aโคb) = [โค]-to-[โฏ] (aโคb) (๐bโคa)

[<]-to-[โฑ] : โ{a b : โ} โ (a โฑ b) โ (a < b)
[<]-to-[โฑ] {a}{b} (๐aโคb) (bโคa) = [โฅ]-to-[โฎ] (bโคa) (๐aโคb)



[<][0]แตฃ : โ{x : โ} โ (x โฎ 0)
[<][0]แตฃ = [โค][0]แตฃ-negation

instance
  [<]-irreflexivity : Irreflexivity (_<_)
  irreflexivity โฆ [<]-irreflexivity โฆ = [โค][๐]โ

instance
  [<]-transitivity : Transitivity (_<_)
  transitivity โฆ [<]-transitivity โฆ {x}{y}{z} (l) (r) = transitivity โฆ [โค]-transitivity โฆ {๐(x)} {๐(y)} {z} ([โค]-successor (l)) (r)

instance
  [<]-asymmetry : Asymmetry (_<_)
  asymmetry โฆ [<]-asymmetry โฆ (l) (r) = irreflexivity โฆ [<]-irreflexivity โฆ (transitivity โฆ [<]-transitivity โฆ (l) (r))

instance
  [<]-strictOrder : Strict.Order (_<_)
  [<]-strictOrder = record{
      transitivity  = [<]-transitivity;
      asymmetry     = [<]-asymmetry;
      irreflexivity = [<]-irreflexivity
    }

[<]-minimum : โ{x : โ} โ (0 < ๐(x))
[<]-minimum {x} = [โค]-with-[๐] {0} โฆ [โค]-minimum โฆ

[<]-of-[๐] : โ{x : โ} โ (x < ๐(x))
[<]-of-[๐] = reflexivity โฆ [โค]-reflexivity โฆ

[โค]-of-[๐] : โ{x : โ} โ (x โค ๐(x))
[โค]-of-[๐] = [โค]-successor(reflexivity)

[<][โข]-equivalence : โ{x} โ (x > 0) โ (x โข 0)
[<][โข]-equivalence {x} = [โ]-intro (l{x}) (r{x}) where
  l : โ{x} โ (x > 0) โ (x โข 0)
  l{๐}    (xโข๐)  = [โฅ]-elim((xโข๐)([โก]-intro))
  l{๐(x)} (๐xโข๐) = [โค]-with-[๐] โฆ [โค]-minimum โฆ

  r : โ{x} โ (x > 0) โ (x โข 0)
  r{๐}    ()
  r{๐(x)} (๐โค๐x) (๐xโก๐) with [โก]-substitutionแตฃ (๐xโก๐) {expr โฆ 1 โค expr} (๐โค๐x)
  ... | ()



[โค]-to-[<][โก] : โ{a b : โ} โ (a โค b) โ (a < b)โจ(a โก b)
[โค]-to-[<][โก] {๐}   {๐}    ([โค]-minimum)    = [โจ]-introแตฃ([โก]-intro)
[โค]-to-[<][โก] {๐}   {๐(b)} ([โค]-minimum)    = [โจ]-introโ([<]-minimum)
[โค]-to-[<][โก] {๐(a)}{๐(b)} ([โค]-with-[๐] โฆ aโคb โฆ) with [โค]-to-[<][โก] {a}{b} (aโคb)
... | [โจ]-introโ(a<b) = [โจ]-introโ([โค]-with-[๐] โฆ a<b โฆ)
... | [โจ]-introแตฃ(aโกb) = [โจ]-introแตฃ([โก]-with(๐) (aโกb))

[<][โก]-to-[โค] : โ{a b : โ} โ (a < b)โจ(a โก b) โ (a โค b)
[<][โก]-to-[โค] {a}   {.a}   ([โจ]-introแตฃ([โก]-intro)) = [โค]-from-[โก] ([โก]-intro)
[<][โก]-to-[โค] {a}   {b}    ([โจ]-introโ(a<b))       = [โค]-predecessor (a<b)

[โฅ]-to-[>][โก] : โ{a b : โ} โ (a โฅ b) โ (a > b)โจ(a โก b)
[โฅ]-to-[>][โก] {a}{b} (proof) with [โค]-to-[<][โก] {b}{a} (proof)
... | [โจ]-introโ(a<b) = [โจ]-introโ(a<b)
... | [โจ]-introแตฃ(bโกa) = [โจ]-introแตฃ(symmetry(bโกa))

[>][โก]-to-[โฅ] : โ{a b : โ} โ (a > b)โจ(a โก b) โ (a โฅ b)
[>][โก]-to-[โฅ] {a}{b} ([โจ]-introโ(a<b)) = [<][โก]-to-[โค] {b}{a} ([โจ]-introโ(a<b))
[>][โก]-to-[โฅ] {a}{b} ([โจ]-introแตฃ(bโกa)) = [<][โก]-to-[โค] {b}{a} ([โจ]-introแตฃ(symmetry(bโกa)))

[โโ]-lesser-[๐]โ : โ{x y} โ ((x โโ ๐(y)) โค (x โโ y))
[โโ]-lesser-[๐]แตฃ : โ{x y} โ ((x โโ y) โค (๐(x) โโ y))

[โโ]-lesser-[๐]โ {๐}   {_}    = [โค]-minimum
[โโ]-lesser-[๐]โ {๐(_)}{๐}    = [โค]-of-[๐]
[โโ]-lesser-[๐]โ {๐(x)}{๐(y)} = [โโ]-lesser-[๐]แตฃ {x}{๐(y)}

[โโ]-lesser-[๐]แตฃ {๐}   {_}    = [โค]-minimum
[โโ]-lesser-[๐]แตฃ {๐(x)}{๐}    = [โค]-of-[๐]
[โโ]-lesser-[๐]แตฃ {๐(x)}{๐(y)} = [โโ]-lesser-[๐]โ {๐(x)}{y}

[โค][โโ][๐]โ : โ{x y} โ ((๐(x) โโ y) โค ๐(x โโ y))
[โค][โโ][๐]โ {x}   {๐}    = reflexivity
[โค][โโ][๐]โ {๐}   {๐(y)} = [โค]-minimum
[โค][โโ][๐]โ {๐(x)}{๐(y)} = [โค][โโ][๐]โ {x}{y}

[โโ]-lesser : โ{x y} โ ((x โโ y) โค x)
[โโ]-lesser {๐}   {_}    = [โค]-minimum
[โโ]-lesser {๐(x)}{๐}    = reflexivity
[โโ]-lesser {๐(x)}{๐(y)} = ([โโ]-lesser-[๐]โ {๐(x)}{y}) ๐ ([โโ]-lesser {๐(x)}{y})

[โโ]-positive : โ{x y} โ (y > x) โ (y โโ x > 0) -- TODO: Converse is probably true too
[โโ]-positive {๐}   {๐}    ()
[โโ]-positive {๐(x)}{๐}    ()
[โโ]-positive {๐}   {๐(y)} (_) = [โค]-with-[๐] โฆ [โค]-minimum โฆ
[โโ]-positive {๐(x)}{๐(y)} ([โค]-with-[๐] โฆ proof โฆ) = [โโ]-positive {x}{y} (proof)
  -- (๐y > ๐x) โ (๐y โโ ๐x > 0)
  -- (๐x < ๐y) โ (0 < ๐y โโ ๐x)
  -- (๐๐x โค ๐y) โ (๐0 โค ๐y โโ ๐x)
  -- (๐x โค y) โ (๐0 โค ๐y โโ ๐x)
  -- (๐x โค y) โ (๐0 โค y โโ x)
  -- (x < y) โ (0 < y โโ x)
  -- (y > x) โ (y โโ x > 0)

 -- [โค]-with-[๐]

-- TODO: Prove using contraposition of [โโ]-positive. Negation of (>) is to be proven to be (โค), and then (โค0) is (โก0) by [โค][0]แตฃ
-- [โโ]-is-zero : โ{x y} โ (y โโ x โก 0) โ (y โค x)
