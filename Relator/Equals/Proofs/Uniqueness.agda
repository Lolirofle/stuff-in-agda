module Relator.Equals.Proofs.Uniqueness {‚Ñì‚ÇÅ}{‚Ñì‚ÇÇ}{‚Ñì‚ÇÉ} where -- TODO: _‚â°_ as a parameter

import      Lvl
open import Functional
open import Logic.Propositional{‚Ñì‚ÇÅ Lvl.‚äî ‚Ñì‚ÇÇ Lvl.‚äî ‚Ñì‚ÇÉ}
open import Logic.Predicate{‚Ñì‚ÇÅ Lvl.‚äî ‚Ñì‚ÇÉ}{‚Ñì‚ÇÇ}
open import Relator.EqualsOld{‚Ñì‚ÇÅ Lvl.‚äî ‚Ñì‚ÇÉ}{‚Ñì‚ÇÇ}
open import Relator.Equals.Uniqueness{‚Ñì‚ÇÅ}{‚Ñì‚ÇÇ}{‚Ñì‚ÇÉ}
open import Relator.Equals.Proofs{‚Ñì‚ÇÅ Lvl.‚äî ‚Ñì‚ÇÉ}{‚Ñì‚ÇÇ}
open import Structure.Function.Domain{‚Ñì‚ÇÅ Lvl.‚äî ‚Ñì‚ÇÉ}
open import Structure.Relator.Properties{‚Ñì‚ÇÅ Lvl.‚äî ‚Ñì‚ÇÉ}{‚Ñì‚ÇÇ}
open import Type

Uniqueness-Injectivity : ‚àÄ{A : Type{‚Ñì‚ÇÇ}}{B : Type{‚Ñì‚ÇÇ}}{f : A ‚Üí B} ‚Üí (‚àÄ{y : B} ‚Üí Unique{A} (x ‚Ü¶ y ‚â° f(x))) ‚Üî Injective(f)
Uniqueness-Injectivity {A}{B} {f} = [‚Üî]-intro l r where
  l : (‚àÄ{y : B} ‚Üí Unique{A} (x ‚Ü¶ y ‚â° f(x))) ‚Üê Injective(f)
  l (injective) {y} {x‚ÇÅ}{x‚ÇÇ} (y‚â°fx‚ÇÅ) (y‚â°fx‚ÇÇ) = injective {x‚ÇÅ}{x‚ÇÇ} (symmetry(y‚â°fx‚ÇÅ) üùñ (y‚â°fx‚ÇÇ))

  r : (‚àÄ{y : B} ‚Üí Unique{A} (x ‚Ü¶ y ‚â° f(x))) ‚Üí Injective(f)
  r (unique) {x‚ÇÅ}{x‚ÇÇ} (fx‚ÇÅ‚â°fx‚ÇÇ) = unique {f(x‚ÇÅ)}{x‚ÇÅ}{x‚ÇÇ} ([‚â°]-intro) (fx‚ÇÅ‚â°fx‚ÇÇ)

