module _ where
  private variable i i‚ÇÅ i‚ÇÇ : I
  private variable A B : Obj(i)

  -- A relation allowing "application" and "abstraction" of some kind.
  -- Note: This definition has some similarities to invertible Hom-functors of indexed categories, but the structure is only the signature of a category.
  record FunctionLike : Typeœâ where -- {‚Ñì‚Çí‚Çó Lvl.‚äî ‚Ñì‚Çí·µ£ Lvl.‚äî ‚Ñì‚Çò Lvl.‚äî ‚Ñì‚Çë‚Çò Lvl.‚äî Lvl.ùêí(‚Ñì‚Çó Lvl.‚äî ‚Ñì·µ£ Lvl.‚äî ‚Ñì‚Çë)}
    constructor intro
    field
      convert : (A ‚ü∂ B) ‚Üî (type(A) ‚Üí type(B))
      ‚¶É convert‚Çó-func ‚¶Ñ : Function(convert{A = A}{B = B} $‚Çó_)
      ‚¶É convert·µ£-func ‚¶Ñ : Function(convert{A = A}{B = B} $·µ£_)
      ‚¶É correctness ‚¶Ñ : InversePair ‚¶É morphism-equiv{i‚ÇÅ}{i‚ÇÇ}{A}{B} ‚¶Ñ ‚¶É [‚äú]-equiv ‚¶Ñ convert

    -- Function application.
    _$_ : (A ‚ü∂ B) ‚Üí (type(A) ‚Üí type(B))
    _$_ = convert $·µ£_

    -- Function abstraction.
    abstr : (type(A) ‚Üí type(B)) ‚Üí (A ‚ü∂ B)
    abstr = convert $‚Çó_

open FunctionLike ‚¶É ‚Ä¶ ‚¶Ñ using (_$_ ; abstr) public

-- A relation isomorphic to the function type, allowing "application" and "abstraction".
FunctionType : ‚àÄ{‚Ñì‚Çò : Lvl.Level ‚Üí Lvl.Level ‚Üí Lvl.Level} ‚Üí (‚àÄ{‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} ‚Üí Type{‚Ñì‚ÇÅ} ‚Üí Type{‚Ñì‚ÇÇ} ‚Üí Type{‚Ñì‚Çò ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}) ‚Üí Typeœâ
FunctionType(_‚ü∂_) = FunctionLike(\‚Ñì ‚Üí Type{‚Ñì}) (_‚ü∂_) Fn.id



open import Function
open import Function.Proofs
open import Structure.Relator.Properties
-- open import Relator.Equals.Proofs.Equiv

module _ {‚Ñì‚Çú : Lvl.Level ‚Üí Lvl.Level} ‚¶É type-equiv : ‚àÄ{‚Ñì}{T : Type{‚Ñì}} ‚Üí Equiv{‚Ñì‚Çú(‚Ñì)}(T) ‚¶Ñ {‚Ñì‚Çò : Lvl.Level ‚Üí Lvl.Level ‚Üí Lvl.Level} where
  module _ ‚¶É function-equiv : ‚àÄ{‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}{A : Type{‚Ñì‚ÇÅ}}{B : Type{‚Ñì‚ÇÇ}} ‚Üí Equiv{‚Ñì‚Çò ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}(A ‚Üí·∂† B) ‚¶Ñ where
    instance
      explicit-functionType : FunctionType(_‚Üí·∂†_)
      explicit-functionType = intro
        ‚¶É function-equiv ‚¶Ñ
        (intro Fn.id (Fn._$_))
        ‚¶É correctness = intro
          ‚¶É left = intro(reflexivity(_‚â°_)) ‚¶Ñ
          ‚¶É right = intro(reflexivity(_‚â°_)) ‚¶Ñ
        ‚¶Ñ

  open import Functional.Implicit as Implicit
  module _ ‚¶É function-equiv : ‚àÄ{‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}{A : Type{‚Ñì‚ÇÅ}}{B : Type{‚Ñì‚ÇÇ}} ‚Üí Equiv{‚Ñì‚Çò ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}(A Ôπõ‚ÜíÔπú B) ‚¶Ñ where
    instance
      implicit-functionType : FunctionType(_Ôπõ‚ÜíÔπú_)
      implicit-functionType = intro (intro Implicit.inferArg (_Ôπõ$Ôπú_))
        ‚¶É intro \p ‚Üí {!_‚äú_.proof p!} ‚¶Ñ
        ‚¶É intro \p ‚Üí Dependent.intro {!p!} ‚¶Ñ
        ‚¶É correctness = intro
          ‚¶É left = intro(reflexivity(_‚â°_)) ‚¶Ñ
          ‚¶É right = intro(reflexivity(_‚â°_) ‚¶É Equiv.reflexivity function-equiv ‚¶Ñ) ‚¶Ñ
        ‚¶Ñ

  open import Functional.Instance as Instance
  module _ ‚¶É function-equiv : ‚àÄ{‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}{A : Type{‚Ñì‚ÇÅ}}{B : Type{‚Ñì‚ÇÇ}} ‚Üí Equiv{‚Ñì‚Çò ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}(A ‚¶É‚Üí‚¶Ñ B) ‚¶Ñ where
    instance
      instance-functionType : FunctionType(_‚¶É‚Üí‚¶Ñ_)
      instance-functionType = intro (intro Instance.inferArg (_‚¶É$‚¶Ñ_))
        ‚¶É {!!} ‚¶Ñ
        ‚¶É {!!} ‚¶Ñ
        ‚¶É correctness = intro
          ‚¶É left = intro(reflexivity(_‚â°_)) ‚¶Ñ
          ‚¶É right = intro(reflexivity(_‚â°_) ‚¶É Equiv.reflexivity function-equiv ‚¶Ñ) ‚¶Ñ
        ‚¶Ñ
