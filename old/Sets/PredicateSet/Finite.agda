module Sets.PredicateSet.Finite{‚Ñì‚Çó}{‚Ñì‚Çí} where

import      Lvl
open import Functional
open import Logic.Propositional{‚Ñì‚Çó Lvl.‚äî ‚Ñì‚Çí}
open import Logic.Predicate{‚Ñì‚Çó}{‚Ñì‚Çí}
open import Numeral.Finite
open import Numeral.Natural
import      Relator.Equals
open import Sets.PredicateSet
open import Structure.Function.Domain
open import Type{‚Ñì‚Çí}

{-
record Irrelevant‚àÉ {X : Type} (Pred : X ‚Üí Stmt) : Stmt where
  field
    witness   : X
    ‚¶É .proof ‚¶Ñ : Pred(witness)

record Finite {T} (S : PredSet{‚Ñì‚Çó}{‚Ñì‚Çí}(T)) : Stmt where
  field
    count     : ‚Ñï
    bijection : ùïü(count) ‚Üí Irrelevant‚àÉ(x ‚Ü¶ (x ‚àà S))
    proof     : Bijective(bijection) -- TODO: Bijective must allow different levels
-}
